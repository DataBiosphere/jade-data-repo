name: Run Gradle on PRs
on: pull_request
jobs:
  gradle:
    strategy:
      matrix:
        os: [ubuntu-latest]
    runs-on: ${{ matrix.os }}
    services:
      postgres:
        image: postgres:9.6
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: postgres
        ports:
          - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
    steps:
      - name: "Checkout code"
        uses: actions/checkout@v2
      - name: "Install Java"
        uses: actions/setup-java@v1
        with:
          java-version: 8
      - name: "Install Gradle"
        uses: eskatos/gradle-command-action@v1
      - name: "Install Google Cloud SDK"
        uses: GoogleCloudPlatform/github-actions/setup-gcloud@0.1.1
        with:
          version: "279.0.0"
          export_default_credentials: true
      - name: "Install Vault"
        uses: volcano-coffee-company/setup-vault@v1
        with:
          version: "1.3"
      - name: "Get Vault token"
        env:
          ROLE_ID: ${{ secrets.ROLE_ID }}
          SECRET_ID: ${{ secrets.SECRET_ID }}
          VAULT_ADDR: ${{ secrets.VAULT_ADDR }}
          GOOGLE_APPLICATION_CREDENTIALS: ${{ secrets.GOOGLE_APPLICATION_CREDENTIALS }}
          GOOGLE_SA_CERT: ${{ secrets.GOOGLE_SA_CERT }}
        run: |
          export VAULT_TOKEN=$(curl \
            --request POST \
            --data '{"role_id":"'"${ROLE_ID}"'","secret_id":"'"${SECRET_ID}"'"}' \
            ${VAULT_ADDR}/v1/auth/approle/login | jq -r .auth.client_token)
          vault read -format=json secret/dsde/datarepo/dev/sa-key.json | \
            jq .data > $GOOGLE_APPLICATION_CREDENTIALS
          jq -r .private_key $GOOGLE_APPLICATION_CREDENTIALS > $GOOGLE_SA_CERT
          chmod 600 $GOOGLE_SA_CERT
      - name: "Configure Google Cloud SDK"
        env:
          INTEGRATION_ZONE: us-central1
          INTEGRATION_PROJECT: broad-jade-integration
          CLUSTER_NAME: integration-master
          GOOGLE_APPLICATION_CREDENTIALS: ${{ secrets.GOOGLE_APPLICATION_CREDENTIALS }}
        run: |
          gcloud auth activate-service-account --key-file $GOOGLE_APPLICATION_CREDENTIALS

          gcloud config set compute/zone ${INTEGRATION_ZONE}
          gcloud config set project ${INTEGRATION_PROJECT}

          gcloud auth configure-docker
          gcloud components install kubectl

          CUR_IPS=$(gcloud container clusters describe ${CLUSTER_NAME} --format json | \
            jq -r '[.masterAuthorizedNetworksConfig.cidrBlocks[] | .cidrBlock]')
          RUNNER_IP=$(curl https://api.ipify.org/?format=text | xargs printf '[ "%s/32" ]')
          NEW_IPS=$(printf '%s\n' $CUR_IPS $RUNNER_IP | jq -s -r 'add | unique | join(",")')

          gcloud container clusters update ${CLUSTER_NAME} \
            --enable-master-authorized-networks \
            --master-authorized-networks ${NEW_IPS}

          gcloud container clusters get-credentials ${CLUSTER_NAME}
          echo "::set-env name=CLUSTER_NAME::${CLUSTER_NAME}"

          RESTORE_IPS=$(printf '%s\n' $CUR_IPS | jq -s -r 'add | unique | join(",")')
          echo "::set-env name=RESTORE_IPS::${RESTORE_IPS}"
      - name: "Set up integration environment"
        env:
          DEV_PROJECT: broad-jade-dev
          INTEGRATION_API: integration-jade-datarepo-api
        run: |
          ./gradlew jib
          kubectl --namespace integration --record deployment/${INTEGRATION_API} \
            set image deployment/${INTEGRATION_API} \
            "${INTEGRATION_API}=gcr.io/${DEV_PROJECT}/jade-data-repo:$(git rev-parse --short HEAD)"
      - name: "Build and test code"
        env:
          PGHOST: localhost
          PGPORT: ${{ job.services.postgres.ports[5432] }}
          PGPASSWORD: postgres
          GOOGLE_CLOUD_PROJECT: broad-jade-integration
          GOOGLE_APPLICATION_CREDENTIALS: ${{ secrets.GOOGLE_APPLICATION_CREDENTIALS }}
        run: |
          GCR_TAG=$(git rev-parse --short HEAD)
          psql -U postgres -f ./db/create-data-repo-db
          ./gradlew assemble
          ./gradlew check --scan
          ./gradlew testConnected --scan
          ./gradlew testIntegration --scan
      - name: "Post test cleanup"
        if: always()
        run: |
          gcloud container clusters update ${CLUSTER_NAME} \
            --enable-master-authorized-networks \
            --master-authorized-networks ${RESTORE_IPS}
