package bio.terra.service.snapshot;

import bio.terra.model.SnapshotRequestContentsModel;

import bio.terra.model.SnapshotRequestModel;
import bio.terra.model.SnapshotRequestSourceModel;
import bio.terra.common.ValidationUtils;
import org.springframework.stereotype.Component;
import org.springframework.validation.Errors;
import org.springframework.validation.Validator;

import javax.validation.constraints.NotNull;
import java.util.List;

/**
 * This validator runs along with the constraint validation that comes from the Models generated by swagger-codegen.
 * The constraints will be able to handle things like nulls, but not things like uniqueness or other structural
 * validations.
 *
 * There are a lot of null checks here because this will still be called even if a constraint validation failed.
 * Spring will not shortcut out early if a validation fails, so this Validator will still get nulls and should only
 * validate if the field is present.
 */
@Component
public class SnapshotRequestValidator implements Validator {

    @Override
    public boolean supports(Class<?> clazz) {
        return true;
    }


    private void validateSnapshotName(String snapshotName, Errors errors) {
        if (snapshotName == null) {
            errors.rejectValue("name", "SnapshotNameMissing");
        } else if (!ValidationUtils.isValidName(snapshotName)) {
            errors.rejectValue("name", "SnapshotNameInvalid");
        }
    }

    private void validateSnapshotValues(List<SnapshotRequestContentsModel> contentsList, Errors errors) {
        if (contentsList == null || contentsList.isEmpty()) {
            errors.rejectValue("contents", "SnapshotSourceListEmpty");
        } else {
            contentsList.forEach(contents -> {
                List<String> rootValues = contents.getRootValues();
                String rootValueQuery = contents.getRootValueQuery();

                boolean hasRootValues = false;
                boolean hasQuery = false;
                if (!(rootValues == null) && !rootValues.isEmpty()) {
                    hasRootValues = true;
                }
                if (rootValueQuery != null) {
                    hasQuery = true;
                }

                if (hasRootValues && hasQuery || !hasRootValues && !hasQuery) {
                    errors.rejectValue("contents", "SnapshotRootValuesInvalid", "A snapshot request can only have rootValues or a query, not both");
                }

                SnapshotRequestSourceModel source = contents.getSource();
                String datasetName = source.getDatasetName();
                String assetName = source.getAssetName();
                if (datasetName == null) {
                    errors.rejectValue("contents", "SnapshotDatasetNameMissing");
                } else if (!ValidationUtils.isValidName(datasetName)) {
                    errors.rejectValue("contents", "SnapshotDatasetNameInvalid");
                }
                if (assetName == null) {
                    errors.rejectValue("contents", "SnapshotAssetNameMissing");
                } else if (!ValidationUtils.isValidName(assetName)) {
                    errors.rejectValue("contents", "SnapshotAssetNameInvalid");
                }
            });
        }
    }

    private void validateSnapshotDescription(String description, Errors errors) {
        if (description == null) {
            errors.rejectValue("description", "SnapshotDescriptionMissing");
        } else if (!ValidationUtils.isValidDescription(description)) {
            errors.rejectValue("description", "SnapshotDescriptionTooLong");
        }
    }

    @Override
    public void validate(@NotNull Object target, Errors errors) {
        if (target != null && target instanceof SnapshotRequestModel) {
            SnapshotRequestModel snapshotRequestModel = (SnapshotRequestModel) target;
            validateSnapshotName(snapshotRequestModel.getName(), errors);
            validateSnapshotDescription(snapshotRequestModel.getDescription(), errors);
            validateSnapshotValues(snapshotRequestModel.getContents(), errors);
        }
    }
}
