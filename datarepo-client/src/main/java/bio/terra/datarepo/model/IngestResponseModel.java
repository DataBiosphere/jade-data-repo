/*
 * Data Repository API
 * This document defines the REST API for Data Repository. **Status: design in progress**  There are four top-level endpoints (besides some used by swagger):  * /swagger-ui.html - generated by swagger: swagger API page that provides this documentation and a live UI for      submitting REST requests  * /status - provides the operational status of the service  * /api    - is the authenticated and authorized Data Repository API  * /ga4gh/drs/v1 - is a transcription of the Data Repository Service API  The overall API (/api) currently supports two interfaces:  * Repository - a general and default interface for initial setup, managing ingest and repository metadata  * Resource - an interface for managing billing accounts and resources  The API endpoints are organized by interface. Each interface is separately versioned.  ## Notes on Naming All of the reference items are suffixed with \"Model\". Those names are used as the class names in the generated Java code. It is helpful to distinguish these model classes from other related classes, like the DAO classes and the operation classes.  ## Editing and debugging I have found it best to edit this file directly to make changes and then use the swagger-editor to validate. The errors out of swagger-codegen are not that helpful. In the swagger-editor, it gives you nice errors and links to the place in the YAML where the errors are.  But... the swagger-editor has been a bit of a pain for me to run. I tried the online website and was not able to load my YAML. Instead, I run it locally in a docker container, like this: ``` docker pull swaggerapi/swagger-editor docker run -p 9090:8080 swaggerapi/swagger-editor ``` Then navigate to localhost:9090 in your browser.  I have not been able to get the file upload to work. It is a bit of a PITA, but I copy-paste the source code, replacing what is in the editor. Then make any fixes. Then copy-paste the resulting, valid file back into our source code. Not elegant, but easier than playing detective with the swagger-codegen errors.  This might be something about my browser or environment, so give it a try yourself and see how it goes.  ## Merging the DRS standard swagger into this swagger ##  The merging is done in three sections:  1. Merging the security definitions into our security definitions  2. This section of paths. We make all paths explicit (prefixed with /ga4gh/drs/v1)     All standard DRS definitions and parameters are prefixed with 'DRS' to separate them     from our native definitions and parameters. We remove the x-swagger-router-controller lines.  3. A separate part of the definitions section for the DRS definitions  NOTE: the code here does not relect the DRS spec anymore. See DR-409. 
 *
 * OpenAPI spec version: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package bio.terra.datarepo.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;

/**
 * Response from performing an ingest. 
 */
@ApiModel(description = "Response from performing an ingest. ")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2020-09-25T14:51:02.312-04:00")
public class IngestResponseModel {
  @JsonProperty("dataset_id")
  private String datasetId = null;

  @JsonProperty("dataset")
  private String dataset = null;

  @JsonProperty("table")
  private String table = null;

  @JsonProperty("path")
  private String path = null;

  @JsonProperty("load_tag")
  private String loadTag = null;

  @JsonProperty("row_count")
  private Long rowCount = null;

  @JsonProperty("bad_row_count")
  private Long badRowCount = null;

  public IngestResponseModel datasetId(String datasetId) {
    this.datasetId = datasetId;
    return this;
  }

   /**
   * unique id of the dataset
   * @return datasetId
  **/
  @ApiModelProperty(value = "unique id of the dataset")
  public String getDatasetId() {
    return datasetId;
  }

  public void setDatasetId(String datasetId) {
    this.datasetId = datasetId;
  }

  public IngestResponseModel dataset(String dataset) {
    this.dataset = dataset;
    return this;
  }

   /**
   * name of the dataset
   * @return dataset
  **/
  @ApiModelProperty(value = "name of the dataset")
  public String getDataset() {
    return dataset;
  }

  public void setDataset(String dataset) {
    this.dataset = dataset;
  }

  public IngestResponseModel table(String table) {
    this.table = table;
    return this;
  }

   /**
   * name of the target table for ingest
   * @return table
  **/
  @ApiModelProperty(required = true, value = "name of the target table for ingest")
  public String getTable() {
    return table;
  }

  public void setTable(String table) {
    this.table = table;
  }

  public IngestResponseModel path(String path) {
    this.path = path;
    return this;
  }

   /**
   * Get path
   * @return path
  **/
  @ApiModelProperty(required = true, value = "")
  public String getPath() {
    return path;
  }

  public void setPath(String path) {
    this.path = path;
  }

  public IngestResponseModel loadTag(String loadTag) {
    this.loadTag = loadTag;
    return this;
  }

   /**
   * Get loadTag
   * @return loadTag
  **/
  @ApiModelProperty(value = "")
  public String getLoadTag() {
    return loadTag;
  }

  public void setLoadTag(String loadTag) {
    this.loadTag = loadTag;
  }

  public IngestResponseModel rowCount(Long rowCount) {
    this.rowCount = rowCount;
    return this;
  }

   /**
   * number of rows successfully ingested
   * @return rowCount
  **/
  @ApiModelProperty(required = true, value = "number of rows successfully ingested")
  public Long getRowCount() {
    return rowCount;
  }

  public void setRowCount(Long rowCount) {
    this.rowCount = rowCount;
  }

  public IngestResponseModel badRowCount(Long badRowCount) {
    this.badRowCount = badRowCount;
    return this;
  }

   /**
   * number of bad rows skipped
   * @return badRowCount
  **/
  @ApiModelProperty(value = "number of bad rows skipped")
  public Long getBadRowCount() {
    return badRowCount;
  }

  public void setBadRowCount(Long badRowCount) {
    this.badRowCount = badRowCount;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IngestResponseModel ingestResponseModel = (IngestResponseModel) o;
    return Objects.equals(this.datasetId, ingestResponseModel.datasetId) &&
        Objects.equals(this.dataset, ingestResponseModel.dataset) &&
        Objects.equals(this.table, ingestResponseModel.table) &&
        Objects.equals(this.path, ingestResponseModel.path) &&
        Objects.equals(this.loadTag, ingestResponseModel.loadTag) &&
        Objects.equals(this.rowCount, ingestResponseModel.rowCount) &&
        Objects.equals(this.badRowCount, ingestResponseModel.badRowCount);
  }

  @Override
  public int hashCode() {
    return Objects.hash(datasetId, dataset, table, path, loadTag, rowCount, badRowCount);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IngestResponseModel {\n");
    
    sb.append("    datasetId: ").append(toIndentedString(datasetId)).append("\n");
    sb.append("    dataset: ").append(toIndentedString(dataset)).append("\n");
    sb.append("    table: ").append(toIndentedString(table)).append("\n");
    sb.append("    path: ").append(toIndentedString(path)).append("\n");
    sb.append("    loadTag: ").append(toIndentedString(loadTag)).append("\n");
    sb.append("    rowCount: ").append(toIndentedString(rowCount)).append("\n");
    sb.append("    badRowCount: ").append(toIndentedString(badRowCount)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

