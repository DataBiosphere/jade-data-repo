/*
 * Data Repository Building Notes
 *
 * USING SWAGGER-CODEGEN
 * We use swagger-codegen to generate our model classes and controller interfaces with default methods.
 * The swagger YAML file is the primary implementation and documentation of the Data Repository API.
 *
 * The gradle technique for running codegen as part of the build is written up here:
 *   https://blog.jcore.com/2017/05/22/automatically-generating-api-using-swagger-and-gradle/
 * It relies on the behavior of the Java plugin, described here:
 *   https://docs.gradle.org/current/userguide/java_plugin.html#sec:java_source_sets
 */

import io.swagger.codegen.config.CodegenConfigurator
import io.swagger.codegen.DefaultGenerator

buildscript {
    ext {
        springBootVersion = '2.1.7.RELEASE'
    }
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath('io.swagger:swagger-codegen:2.3.1')
        classpath('gradle.plugin.com.srcclr:gradle:3.1.0')
    }
}

plugins {
  id "com.google.cloud.tools.jib" version "1.6.1"
  id 'org.liquibase.gradle' version '2.0.1'
}

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'

apply plugin: 'checkstyle'
apply plugin: 'findbugs'
apply plugin: 'jacoco'

apply plugin:'com.srcclr.gradle'

if (hasProperty('buildScan')) {
    buildScan {
        termsOfServiceUrl = 'https://gradle.com/terms-of-service'
        termsOfServiceAgree = 'yes'
    }
}

tasks.withType(FindBugs) {
    reports {
        xml.enabled false
        html.enabled true
        html.stylesheet resources.text.fromFile('config/findbugs/plain.xsl')
    }
}

tasks.withType(JacocoReport) {
    reports {
        xml.enabled false
        csv.enabled false
        html.destination file("${buildDir}/jacocoHtml")
    }
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                counter = 'BRANCH'
                value = 'COVEREDRATIO'
                minimum = 0.2
            }
        }
    }
}
check.dependsOn jacocoTestCoverageVerification


group 'bio.terra'
version '0.1'
sourceCompatibility = 1.8

repositories {
    mavenCentral()
    maven {
        url 'https://broadinstitute.jfrog.io/broadinstitute/libs-release-local/'
    }
}

configurations {
    generatedCompile
    developmentOnly
    runtimeClasspath {
        extendsFrom developmentOnly
    }
}


// Exclude the Spring logger, so everything will use SLF4J
configurations.all {
    exclude group: "commons-logging", module: "commons-logging"
}

dependencies {
    // TODO: Unpack the "starter" and include just what we use
    compile 'ch.qos.logback:logback-classic:1.2.3'       // Logger
    compile 'com.google.apis:google-api-services-cloudbilling:v1-rev20190805-1.30.1'
    compile 'com.google.apis:google-api-services-cloudresourcemanager:v1-rev549-1.25.0'
    compile 'com.google.apis:google-api-services-serviceusage:v1-rev20191203-1.30.3'
    compile 'com.google.cloud:google-cloud-bigquery:1.91.0'
    compile 'com.google.cloud:google-cloud-storage:1.92.0'
    compile 'com.google.cloud:google-cloud-firestore:1.22.0'
    compile 'io.springfox:springfox-swagger-ui:2.9.2'
    compile 'io.springfox:springfox-swagger2:2.9.2'
    compile 'org.apache.commons:commons-dbcp2:2.7.0'     // For database connection support
    compile 'org.apache.commons:commons-lang3:3.9'
    compile 'org.apache.directory.studio:org.apache.commons.io:2.4'
    compile 'org.liquibase:liquibase-core:3.8.0'         // For upgrade
    compile 'org.postgresql:postgresql:42.2.8'           // Postgres jdbc driver
    compile 'org.slf4j:slf4j-api:1.7.28'                 // Logging facade
    compile "org.springframework.boot:spring-boot-starter-web"
    compile 'org.springframework:spring-jdbc:5.1.9.RELEASE'
    compile 'org.broadinstitute.dsde.workbench:sam-client_2.12:0.1-9435410-SNAP'

    // Need groovy on the class path for the logback config. Could use XML and skip this dependency,
    // but the groovy config is... well... groovy.
    runtime group: 'org.codehaus.groovy', name: 'groovy', version: '2.5.7'

    // Findbugs annotations, so we can selectively suppress findbugs findings
    compileOnly 'com.google.code.findbugs:annotations:3.0.1u2'

    liquibaseRuntime 'org.liquibase:liquibase-core:3.8.0'
    liquibaseRuntime 'org.postgresql:postgresql:42.2.7'
    liquibaseRuntime 'ch.qos.logback:logback-classic:1.2.3'

    testCompile group: 'junit', name: 'junit', version: '4.12'
    testCompile group: 'org.hamcrest', name: 'hamcrest', version: '2.1'
    testCompile "org.springframework.boot:spring-boot-starter-test"
    testCompile 'org.postgresql:postgresql:42.2.8'

    generatedCompile 'org.springframework.boot:spring-boot-starter-web'
    generatedCompile 'io.springfox:springfox-swagger2:2.7.0'
    generatedCompile 'io.springfox:springfox-swagger-ui:2.7.0'

    developmentOnly("org.springframework.boot:spring-boot-devtools")
    annotationProcessor "org.springframework.boot:spring-boot-configuration-processor"
}

def openapiSourceFile = 'src/main/resources/data-repository-openapi.yaml'
def openapiTargetFolder = 'src/generated/java'

task generateApi {
    // specify the task inputs and outputs so gradle knows what to rebuild based on what has changed
    inputs.file("$projectDir/$openapiSourceFile")
    outputs.dir("$projectDir/$openapiTargetFolder")
    doLast {
        def config = new CodegenConfigurator()
        config.setInputSpec("file:///$projectDir/$openapiSourceFile")
        config.setOutputDir("$projectDir")
        config.setLang('spring')
        // These properties are not well documented. The only way I've found to figure them out is to
        // locally install the swagger-codegen tool and invoke it to get the specific help for the
        // spring boot options.
        config.setAdditionalProperties([
                'interfaceOnly' : 'true',                  // only generate the model and API interfaces
                'useTags'       : 'true',                  // organize the swagger ui page by tags
                'library'       : 'spring-boot',           // do spring-boot code generation
                'dateLibrary'   : 'java8',                 // do java8 code generation
                'apiPackage'    : 'bio.terra.controller',
                'modelPackage'  : 'bio.terra.model',
                'invokerPackage': 'bio.terra',
                'sourceFolder'  : openapiTargetFolder
        ])
        new DefaultGenerator().opts(config.toClientOptInput()).generate()
    }
}

task unpack(type: Copy) {
    dependsOn bootJar
    from(zipTree(tasks.bootJar.outputs.files.singleFile))
    into("build/dependency")
}

clean.doFirst {
    delete("${projectDir}/$openapiTargetFolder")
}

sourceSets {
    generated {
        compileClasspath = configurations.generatedCompile
    }
    main {
        compileClasspath += generated.output
        runtimeClasspath += generated.output
    }
    test {
        compileClasspath += generated.output
        runtimeClasspath += generated.output
    }
    checkstyle {
        toolVersion '7.8.1'
        checkstyleGenerated.enabled = false // Don't check generated code
        configFile file("config/checkstyle/checkstyle.xml")
    }
    findbugs {
        toolVersion '3.0.1'
        ignoreFailures = false
        excludeFilter = file("config/findbugs/excludeFilter.xml")
        reportsDir = file("$project.buildDir/reports/findbugs")
        effort = "max"
    }
    jacoco {
        toolVersion '0.8.2'
    }
}

bootRun {
    classpath += sourceSets.generated.output
}

jar {
    from sourceSets.generated.output
}

jib {
    extraDirectories.paths = ['build/gen-expanded']
    to {
        image = "gcr.io/broad-jade-dev/jade-data-repo"
        tags = [(System.env.GCR_TAG ?: "latest")]
    }
}
// jib expects all classes to be under app/classes in the resulting image. this, combined with the extraDirectories
// setting above will ensure that the generated classes end up in the right place when jib builds.
task setupGeneratedDir(type: Copy) {
    from file('build/classes/java/generated')
    into file('build/gen-expanded/app/classes')
}
tasks.jib.dependsOn setupGeneratedDir

liquibase {
    activities {
        datarepo {
            changeLogFile project.ext.dbDatarepoChangesetFile
            url project.ext.dbDatarepoUri
            username project.ext.dbDatarepoUsername
            password project.ext.dbDatarepoPassword
            logLevel 'debug'
        }
        stairway {
            changeLogFile project.ext.dbStairwayChangesetFile
            url project.ext.dbStairwayUri
            username project.ext.dbStairwayUsername
            password project.ext.dbStairwayPassword
            logLevel 'debug'
        }
    }
}

def getGitHash = { ->
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'rev-parse', '--short', 'HEAD'
        standardOutput = stdout
    }
    return stdout.toString().trim()
}


// -- Test tasks --
// The default 'test' task runs all of the unit tests.
// There are separate tasks for running just the unit tests and just the connected tests.
// connected tests and running all of the tests.
test {
    useJUnit {
        includeCategories 'bio.terra.common.category.Unit', 'bio.terra.common.category.StairwayUnit'
    }
    outputs.upToDateWhen { false }
}

task testConnected(type: Test) {
    useJUnit {
        includeCategories 'bio.terra.common.category.Connected'
    }
    testLogging {
        events = ["passed", "failed", "skipped", "started", "standard_out"]
    }
    outputs.upToDateWhen { false }
}

task testIntegration(type: Test) {
    useJUnit {
        includeCategories 'bio.terra.common.category.Integration'
    }
    testLogging {
        events = ["passed", "failed", "skipped", "started", "standard_out"]
    }
    outputs.upToDateWhen { false }
}

task testUnit(type: Test) {
    useJUnit {
        includeCategories 'bio.terra.common.category.Unit'
    }
    outputs.upToDateWhen { false }
}

task testAll(type: Test) {
    useJUnit {
        includeCategories 'bio.terra.common.category.Connected', 'bio.terra.common.category.Unit', 'bio.terra.common.category.StairwayUnit'
    }
    outputs.upToDateWhen { false }
}

compileGeneratedJava.dependsOn generateApi
classes.dependsOn generatedClasses
compileJava.dependsOn compileGeneratedJava
ideaModule.dependsOn generateApi
