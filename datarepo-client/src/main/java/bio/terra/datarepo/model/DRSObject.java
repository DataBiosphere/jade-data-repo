/*
 * Data Repository API
 * This document defines the REST API for Data Repository. **Status: design in progress**  There are four top-level endpoints (besides some used by swagger):  * /swagger-ui.html - generated by swagger: swagger API page that provides this documentation and a live UI for      submitting REST requests  * /status - provides the operational status of the service  * /api    - is the authenticated and authorized Data Repository API  * /ga4gh/drs/v1 - is a transcription of the Data Repository Service API  The overall API (/api) currently supports two interfaces:  * Repository - a general and default interface for initial setup, managing ingest and repository metadata  * Resource - an interface for managing billing accounts and resources  The API endpoints are organized by interface. Each interface is separately versioned.  ## Notes on Naming All of the reference items are suffixed with \"Model\". Those names are used as the class names in the generated Java code. It is helpful to distinguish these model classes from other related classes, like the DAO classes and the operation classes.  ## Editing and debugging I have found it best to edit this file directly to make changes and then use the swagger-editor to validate. The errors out of swagger-codegen are not that helpful. In the swagger-editor, it gives you nice errors and links to the place in the YAML where the errors are.  But... the swagger-editor has been a bit of a pain for me to run. I tried the online website and was not able to load my YAML. Instead, I run it locally in a docker container, like this: ``` docker pull swaggerapi/swagger-editor docker run -p 9090:8080 swaggerapi/swagger-editor ``` Then navigate to localhost:9090 in your browser.  I have not been able to get the file upload to work. It is a bit of a PITA, but I copy-paste the source code, replacing what is in the editor. Then make any fixes. Then copy-paste the resulting, valid file back into our source code. Not elegant, but easier than playing detective with the swagger-codegen errors.  This might be something about my browser or environment, so give it a try yourself and see how it goes.  ## Merging the DRS standard swagger into this swagger ##  The merging is done in three sections:  1. Merging the security definitions into our security definitions  2. This section of paths. We make all paths explicit (prefixed with /ga4gh/drs/v1)     All standard DRS definitions and parameters are prefixed with 'DRS' to separate them     from our native definitions and parameters. We remove the x-swagger-router-controller lines.  3. A separate part of the definitions section for the DRS definitions  NOTE: the code here does not relect the DRS spec anymore. See DR-409. 
 *
 * OpenAPI spec version: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package bio.terra.datarepo.model;

import java.util.Objects;
import java.util.Arrays;
import bio.terra.datarepo.model.DRSAccessMethod;
import bio.terra.datarepo.model.DRSChecksum;
import bio.terra.datarepo.model.DRSContentsObject;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.ArrayList;
import java.util.List;

/**
 * DRSObject
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2020-09-25T14:51:02.312-04:00")
public class DRSObject {
  @JsonProperty("id")
  private String id = null;

  @JsonProperty("name")
  private String name = null;

  @JsonProperty("self_uri")
  private String selfUri = null;

  @JsonProperty("size")
  private Long size = null;

  @JsonProperty("created_time")
  private String createdTime = null;

  @JsonProperty("updated_time")
  private String updatedTime = null;

  @JsonProperty("version")
  private String version = null;

  @JsonProperty("mime_type")
  private String mimeType = null;

  @JsonProperty("checksums")
  private List<DRSChecksum> checksums = new ArrayList<>();

  @JsonProperty("access_methods")
  private List<DRSAccessMethod> accessMethods = null;

  @JsonProperty("contents")
  private List<DRSContentsObject> contents = null;

  @JsonProperty("description")
  private String description = null;

  @JsonProperty("aliases")
  private List<String> aliases = null;

  public DRSObject id(String id) {
    this.id = id;
    return this;
  }

   /**
   * An identifier unique to this &#x60;Object&#x60;.
   * @return id
  **/
  @ApiModelProperty(required = true, value = "An identifier unique to this `Object`.")
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }

  public DRSObject name(String name) {
    this.name = name;
    return this;
  }

   /**
   * A string that can be used to name an &#x60;Object&#x60;. This string is made up of uppercase and lowercase letters, decimal digits, hypen, period, and underscore [A-Za-z0-9.-_]. See http://pubs.opengroup.org/onlinepubs/9699919799/basedefs/V1_chap03.html#tag_03_282[portable filenames].
   * @return name
  **/
  @ApiModelProperty(value = "A string that can be used to name an `Object`. This string is made up of uppercase and lowercase letters, decimal digits, hypen, period, and underscore [A-Za-z0-9.-_]. See http://pubs.opengroup.org/onlinepubs/9699919799/basedefs/V1_chap03.html#tag_03_282[portable filenames].")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public DRSObject selfUri(String selfUri) {
    this.selfUri = selfUri;
    return this;
  }

   /**
   * A drs:// URI, as defined in the DRS documentation, that tells clients how to access this object. The intent of this field is to make DRS objects self-contained, and therefore easier for clients to store and pass around.
   * @return selfUri
  **/
  @ApiModelProperty(example = "drs://drs.example.org/314159", required = true, value = "A drs:// URI, as defined in the DRS documentation, that tells clients how to access this object. The intent of this field is to make DRS objects self-contained, and therefore easier for clients to store and pass around.")
  public String getSelfUri() {
    return selfUri;
  }

  public void setSelfUri(String selfUri) {
    this.selfUri = selfUri;
  }

  public DRSObject size(Long size) {
    this.size = size;
    return this;
  }

   /**
   * For blobs, the blob size in bytes. For bundles, the cumulative size, in bytes, of items in the &#x60;contents&#x60; field.
   * @return size
  **/
  @ApiModelProperty(required = true, value = "For blobs, the blob size in bytes. For bundles, the cumulative size, in bytes, of items in the `contents` field.")
  public Long getSize() {
    return size;
  }

  public void setSize(Long size) {
    this.size = size;
  }

  public DRSObject createdTime(String createdTime) {
    this.createdTime = createdTime;
    return this;
  }

   /**
   * Timestamp of object creation in RFC3339.
   * @return createdTime
  **/
  @ApiModelProperty(value = "Timestamp of object creation in RFC3339.")
  public String getCreatedTime() {
    return createdTime;
  }

  public void setCreatedTime(String createdTime) {
    this.createdTime = createdTime;
  }

  public DRSObject updatedTime(String updatedTime) {
    this.updatedTime = updatedTime;
    return this;
  }

   /**
   * Timestamp of &#x60;Object&#x60; update in RFC3339, identical to create timestamp in systems that do not support updates.
   * @return updatedTime
  **/
  @ApiModelProperty(value = "Timestamp of `Object` update in RFC3339, identical to create timestamp in systems that do not support updates.")
  public String getUpdatedTime() {
    return updatedTime;
  }

  public void setUpdatedTime(String updatedTime) {
    this.updatedTime = updatedTime;
  }

  public DRSObject version(String version) {
    this.version = version;
    return this;
  }

   /**
   * A string representing a version. (Some systems may use checksum, a RFC3339 timestamp, or an incrementing version number.)
   * @return version
  **/
  @ApiModelProperty(value = "A string representing a version. (Some systems may use checksum, a RFC3339 timestamp, or an incrementing version number.)")
  public String getVersion() {
    return version;
  }

  public void setVersion(String version) {
    this.version = version;
  }

  public DRSObject mimeType(String mimeType) {
    this.mimeType = mimeType;
    return this;
  }

   /**
   * A string providing the mime-type of the &#x60;Object&#x60;.
   * @return mimeType
  **/
  @ApiModelProperty(example = "application/json", value = "A string providing the mime-type of the `Object`.")
  public String getMimeType() {
    return mimeType;
  }

  public void setMimeType(String mimeType) {
    this.mimeType = mimeType;
  }

  public DRSObject checksums(List<DRSChecksum> checksums) {
    this.checksums = checksums;
    return this;
  }

  public DRSObject addChecksumsItem(DRSChecksum checksumsItem) {
    this.checksums.add(checksumsItem);
    return this;
  }

   /**
   * The checksum of the &#x60;Object&#x60;. At least one checksum must be provided. For blobs, the checksum is computed over the bytes in the blob.  For bundles, the checksum is computed over a sorted concatenation of the checksums of its top-level contained objects (not recursive, names not included). The list of checksums is sorted alphabetically (hex-code) before concatenation and a further checksum is performed on the concatenated checksum value.  For example, if a bundle contains blobs with the following checksums: md5(blob1) &#x3D; 72794b6d md5(blob2) &#x3D; 5e089d29  Then the checksum of the bundle is: md5( concat( sort( md5(blob1), md5(blob2) ) ) ) &#x3D; md5( concat( sort( 72794b6d, 5e089d29 ) ) ) &#x3D; md5( concat( 5e089d29, 72794b6d ) ) &#x3D; md5( 5e089d2972794b6d ) &#x3D; f7a29a04
   * @return checksums
  **/
  @ApiModelProperty(required = true, value = "The checksum of the `Object`. At least one checksum must be provided. For blobs, the checksum is computed over the bytes in the blob.  For bundles, the checksum is computed over a sorted concatenation of the checksums of its top-level contained objects (not recursive, names not included). The list of checksums is sorted alphabetically (hex-code) before concatenation and a further checksum is performed on the concatenated checksum value.  For example, if a bundle contains blobs with the following checksums: md5(blob1) = 72794b6d md5(blob2) = 5e089d29  Then the checksum of the bundle is: md5( concat( sort( md5(blob1), md5(blob2) ) ) ) = md5( concat( sort( 72794b6d, 5e089d29 ) ) ) = md5( concat( 5e089d29, 72794b6d ) ) = md5( 5e089d2972794b6d ) = f7a29a04")
  public List<DRSChecksum> getChecksums() {
    return checksums;
  }

  public void setChecksums(List<DRSChecksum> checksums) {
    this.checksums = checksums;
  }

  public DRSObject accessMethods(List<DRSAccessMethod> accessMethods) {
    this.accessMethods = accessMethods;
    return this;
  }

  public DRSObject addAccessMethodsItem(DRSAccessMethod accessMethodsItem) {
    if (this.accessMethods == null) {
      this.accessMethods = new ArrayList<>();
    }
    this.accessMethods.add(accessMethodsItem);
    return this;
  }

   /**
   * The list of access methods that can be used to fetch the &#x60;Object&#x60;. Required for single blobs; optional for bundles.
   * @return accessMethods
  **/
  @ApiModelProperty(value = "The list of access methods that can be used to fetch the `Object`. Required for single blobs; optional for bundles.")
  public List<DRSAccessMethod> getAccessMethods() {
    return accessMethods;
  }

  public void setAccessMethods(List<DRSAccessMethod> accessMethods) {
    this.accessMethods = accessMethods;
  }

  public DRSObject contents(List<DRSContentsObject> contents) {
    this.contents = contents;
    return this;
  }

  public DRSObject addContentsItem(DRSContentsObject contentsItem) {
    if (this.contents == null) {
      this.contents = new ArrayList<>();
    }
    this.contents.add(contentsItem);
    return this;
  }

   /**
   * If not set, this &#x60;Object&#x60; is a single blob. If set, this &#x60;Object&#x60; is a bundle containing the listed &#x60;ContentsObject&#x60; s (some of which may be further nested).
   * @return contents
  **/
  @ApiModelProperty(value = "If not set, this `Object` is a single blob. If set, this `Object` is a bundle containing the listed `ContentsObject` s (some of which may be further nested).")
  public List<DRSContentsObject> getContents() {
    return contents;
  }

  public void setContents(List<DRSContentsObject> contents) {
    this.contents = contents;
  }

  public DRSObject description(String description) {
    this.description = description;
    return this;
  }

   /**
   * A human readable description of the &#x60;Object&#x60;.
   * @return description
  **/
  @ApiModelProperty(value = "A human readable description of the `Object`.")
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }

  public DRSObject aliases(List<String> aliases) {
    this.aliases = aliases;
    return this;
  }

  public DRSObject addAliasesItem(String aliasesItem) {
    if (this.aliases == null) {
      this.aliases = new ArrayList<>();
    }
    this.aliases.add(aliasesItem);
    return this;
  }

   /**
   * A list of strings that can be used to find other metadata about this &#x60;Object&#x60; from external metadata sources. These aliases can be used to represent secondary accession numbers or external GUIDs.
   * @return aliases
  **/
  @ApiModelProperty(value = "A list of strings that can be used to find other metadata about this `Object` from external metadata sources. These aliases can be used to represent secondary accession numbers or external GUIDs.")
  public List<String> getAliases() {
    return aliases;
  }

  public void setAliases(List<String> aliases) {
    this.aliases = aliases;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DRSObject drSObject = (DRSObject) o;
    return Objects.equals(this.id, drSObject.id) &&
        Objects.equals(this.name, drSObject.name) &&
        Objects.equals(this.selfUri, drSObject.selfUri) &&
        Objects.equals(this.size, drSObject.size) &&
        Objects.equals(this.createdTime, drSObject.createdTime) &&
        Objects.equals(this.updatedTime, drSObject.updatedTime) &&
        Objects.equals(this.version, drSObject.version) &&
        Objects.equals(this.mimeType, drSObject.mimeType) &&
        Objects.equals(this.checksums, drSObject.checksums) &&
        Objects.equals(this.accessMethods, drSObject.accessMethods) &&
        Objects.equals(this.contents, drSObject.contents) &&
        Objects.equals(this.description, drSObject.description) &&
        Objects.equals(this.aliases, drSObject.aliases);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, name, selfUri, size, createdTime, updatedTime, version, mimeType, checksums, accessMethods, contents, description, aliases);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DRSObject {\n");
    
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    selfUri: ").append(toIndentedString(selfUri)).append("\n");
    sb.append("    size: ").append(toIndentedString(size)).append("\n");
    sb.append("    createdTime: ").append(toIndentedString(createdTime)).append("\n");
    sb.append("    updatedTime: ").append(toIndentedString(updatedTime)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("    mimeType: ").append(toIndentedString(mimeType)).append("\n");
    sb.append("    checksums: ").append(toIndentedString(checksums)).append("\n");
    sb.append("    accessMethods: ").append(toIndentedString(accessMethods)).append("\n");
    sb.append("    contents: ").append(toIndentedString(contents)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    aliases: ").append(toIndentedString(aliases)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

