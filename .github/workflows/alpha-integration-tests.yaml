name: DataRepo Alpha Integration Tests
env:
  K8_CLUSTER: jade-master-us-central1
  GOOGLE_APPLICATION_CREDENTIALS: /tmp/alpha-test-runner.json
  GOOGLE_CLOUD_PROJECT: terra-datarepo-alpha
  GOOGLE_CLOUD_DATA_PROJECT: terra-datarepo-alpha-data
  TDR_LOG_APPENDER: Console-Standard
on:
  # Jenkins will kick this job off manually after Alpha is deployed
  workflow_dispatch: {}
jobs:
  alpha-integration-test:
    runs-on: ubuntu-latest
    steps:
      - name: 'Checkout terra-helmfile repo'
        uses: actions/checkout@v2
        with:
          repository: 'broadinstitute/terra-helmfile'
          token: ${{ secrets.TERRA_HELMFILE_TOKEN }}
          path: terra-helmfile
          persist-credentials: false
      - name: "Read staging version from terra-helmfile" 
        id: terrahelmfile
        run: |
          alpha_version=$(docker run --rm -v ${PWD}:/workdir mikefarah/yq:3 yq r terra-helmfile/versions/alpha.yaml 'version')
          echo "::set-output name=alpha_version::$alpha_version"
      - name: "Checkout tag for DataBiosphere/jade-data-repo"
        #if: github.ref == 'refs/heads/develop'
        run: |
          git checkout ${{ steps.terrahelmfile.outputs.alpha_version }}
          echo "Current branch is ${{ github.ref }}"
      - name: "Checkout jade-data-repo"
        if: github.ref != 'refs/heads/develop'
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: "Import Vault alpha secrets"
        uses: hashicorp/vault-action@v2.1.0
        with:
          url: ${{ secrets.VAULT_ADDR }}
          method: approle
          roleId: ${{ secrets.ALPHA_ROLE_ID }}
          secretId: ${{ secrets.ALPHA_SECRET_ID }}
          secrets: |
            secret/dsde/datarepo/alpha/datarepo-api-sa key | B64_APPLICATION_CREDENTIALS ;
      - name: "Perform IAM policy cleanup for staging"
        run: |
          # write vault tokens
          base64 --decode <<< ${B64_APPLICATION_CREDENTIALS} > ${GOOGLE_APPLICATION_CREDENTIALS}

          gcloud auth activate-service-account --key-file ${GOOGLE_APPLICATION_CREDENTIALS}

          ./tools/cleanupPolicies.sh ${GOOGLE_CLOUD_DATA_PROJECT}
      - name: "Import Vault dev secrets"
        uses: hashicorp/vault-action@v2.1.0
        with:
          url: ${{ secrets.VAULT_ADDR }}
          method: approle
          roleId: ${{ secrets.ROLE_ID }}
          secretId: ${{ secrets.SECRET_ID }}
          secrets: |
            secret/dsde/datarepo/dev/sa-key-b64 sa | B64_APPLICATION_CREDENTIALS ;
      - name: "Add jade-k8-sa credentials to run as Harry Potter test users"
        env:
          # note: hack to overwrite the env var to grab the dev credentials too
          GOOGLE_APPLICATION_CREDENTIALS: /tmp/jade-dev-account.json
        run: |
          # write vault tokens
          base64 --decode <<< ${B64_APPLICATION_CREDENTIALS} > ${GOOGLE_APPLICATION_CREDENTIALS}
      - name: "Build and run Test Runner"
        run: |
          cd ${GITHUB_WORKSPACE}/${workingDir}
          echo "Building Data Repo client library"
          export TEST_RUNNER_SERVER_SPECIFICATION_FILE="alpha.json"
          export TEST_RUNNER_BILLING_PROFILE_NAME="stest1"
          ENABLE_SUBPROJECT_TASKS=1 ./gradlew :datarepo-client:clean :datarepo-client:assemble
          cd ${GITHUB_WORKSPACE}/${workingDir}/datarepo-clienttests
          export ORG_GRADLE_PROJECT_datarepoclientjar=$(find .. -type f -name "datarepo-client*.jar")
          echo "ORG_GRADLE_PROJECT_datarepoclientjar = ${ORG_GRADLE_PROJECT_datarepoclientjar}"

          echo "Running test suite"
          ./gradlew runTest --args="suites/AlphaSmokeTests.json tmp/TestRunnerResults"

          echo "Collecting measurements"
          ./gradlew collectMeasurements --args="AlphaSmokeTests.json tmp/TestRunnerResults"

          echo "Uploading results"
          ./gradlew uploadResults --args="BroadJadeDev.json tmp/TestRunnerResults"

          cd ${GITHUB_WORKSPACE}/${workingDir}
    - name: "Notify Slack"
      if: always()
      uses: broadinstitute/action-slack@v3.8.0
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      with:
        status: ${{ job.status }}
        fields: repo,message,commit,author,action,eventName,ref,workflow,job,took
        channel: "#jade-alerts"
        username: "Data Repo tests"
        text: "Alpha Smoke tests"
