package bio.terra.service.dataset;

import bio.terra.common.ValidationUtils;
import bio.terra.model.AssetModel;
import bio.terra.model.AssetTableModel;
import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
import jakarta.validation.constraints.NotNull;
import java.util.List;
import org.springframework.stereotype.Component;
import org.springframework.validation.Errors;
import org.springframework.validation.Validator;

/**
 * This validator runs along with the constraint validation that comes from the Models generated by
 * swagger-codegen. The constraints will be able to handle things like nulls, but not things like
 * uniqueness or other structural validations.
 *
 * <p>There are a lot of null checks here because this will still be called even if a constraint
 * validation failed. Spring will not shortcut out early if a validation fails, so this Validator
 * will still get nulls and should only validate if the field is present.
 */
@Component
public class AssetModelValidator implements Validator {

  @Override
  public boolean supports(@NotNull Class<?> clazz) {
    return true;
  }

  private void validateTables(List<AssetTableModel> assetTables, Errors errors) {
    if (assetTables != null) {
      for (AssetTableModel assetTable : assetTables) {
        String tableName = assetTable.getName();
        List<String> columns = assetTable.getColumns();

        if (tableName != null && columns != null) {
          if (ValidationUtils.hasDuplicates(columns)) {
            errors.rejectValue("tables", "DuplicateColumnNames");
          }
        }
      }
    }
  }

  @Override
  @SuppressFBWarnings("UC_USELESS_VOID_METHOD")
  public void validate(@NotNull Object target, Errors errors) {
    if (target != null && target instanceof AssetModel) {
      AssetModel assetModel = (AssetModel) target;
      validateTables(assetModel.getTables(), errors);
    }
  }
}
