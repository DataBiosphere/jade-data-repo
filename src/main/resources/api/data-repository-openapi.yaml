openapi: 3.0.1
info:
  title: Data Repository API
  description: >
    <details><summary>This document defines the REST API for the Terra Data Repository.</summary>
    <p>
    **Status: design in progress**

    There are a few top-level endpoints (besides some used by swagger):
     * / - generated by swagger: swagger API page that provides this
    documentation and a live UI for submitting REST requests
     * /status - provides the operational status of the service
     * /configuration - provides the basic configuration and information about the service
     * /api - is the authenticated and authorized Data Repository API
     * /ga4gh/drs/v1 - is a transcription of the Data Repository Service API

    The API endpoints are organized by interface. Each interface is separately versioned.
    <p>
    **Notes on Naming**
    <p>
    All of the reference items are suffixed with \"Model\".
    Those names are used as the class names in the generated Java code.
    It is helpful to distinguish these model classes from other related classes, like the DAO classes and the operation classes.
    </details>
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: https://app.terra.bio/#terms-of-service
  version: 0.1.0
servers:
  - url: /
security:
  - oidc:
      - openid
      - email
      - profile
paths:
  /status:
    get:
      tags:
        - unauthenticated
      description: >
        Returns the operational status of the service
      operationId: serviceStatus
      responses:
        200:
          description: Service is functional
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositoryStatusModel'
        500:
          description: Service is broken
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositoryStatusModel'
  /configuration:
    get:
      tags:
        - unauthenticated
      description: Retrieve the repository configuration information
      operationId: retrieveRepositoryConfig
      responses:
        200:
          description: Repository Config
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositoryConfigurationModel'
        500:
          description: Config is unavailable
          content: {}
  /shutdown:
    get:
      tags:
        - unauthenticated
      description: >
        Requests that this instance of DR Manager shut down. In production, this must be configured to
        only be callable by Kubernetes.
      operationId: shutdownRequest
      responses:
        204:
          description: DR Manager was shutdown successfully
          content: {}
  /api/resources/v1/profiles:
    get:
      tags:
        - profiles
        - resources
      description: >
        Returns a list of all of the billing profiles
      operationId: enumerateProfiles
      parameters:
        - name: offset
          in: query
          description: The number of items to skip before starting to collect the result
            set.
          schema:
            type: integer
            default: 0
        - name: limit
          in: query
          description: The numbers of items to return.
          schema:
            type: integer
            default: 10
      responses:
        200:
          description: List of billing profiles
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EnumerateBillingProfileModel'
    post:
      tags:
        - profiles
        - resources
      description: >
        Creates a new profile associated with a billing account. This is asynchronous.
        The final return is of type definitions/BillingProfileModel.
      operationId: createProfile
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BillingProfileRequestModel'
        required: false
      responses:
        200:
          description: Redirect for profile successful creation
          headers:
            location:
              description: url for the job result
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobModel'
        202:
          description: Job status of profile creation job & url for polling in the
            response header
          headers:
            location:
              description: url for the job polling
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobModel'
        400:
          description: Bad request - see error message
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
        403:
          description: No permission to create profiles
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
      x-codegen-request-body-name: billingProfileRequest
    put:
      tags:
        - profiles
        - resources
      description: >
        Update a billing profile by id. This is asynchronous.
        The final return is of type definitions/BillingProfileModel.
      operationId: updateProfile
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BillingProfileUpdateModel'
        required: true
      responses:
        200:
          description: Redirect for profile update result
          headers:
            location:
              description: url for the job result
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobModel'
        202:
          description: Job status of profile update job & url for polling in the response
            header
          headers:
            location:
              description: url for the job polling
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobModel'
        400:
          description: Bad request - invalid id, badly formed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
        403:
          description: No permission to update profile
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
        404:
          description: Not found - profile does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
  /api/resources/v1/profiles/{id}:
    get:
      tags:
        - profiles
        - resources
      description: Retrieve a billing profile by id
      operationId: retrieveProfile
      parameters:
        - $ref: '#/components/parameters/Id'
      responses:
        200:
          description: Billing profile
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BillingProfileModel'
        400:
          description: Bad request - invalid id, badly formed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
        403:
          description: No permission to see billing profile
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
        404:
          description: Not found - billing profile id does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
    delete:
      tags:
        - profiles
        - resources
      description: >
        Delete a billing profile by id. This is asynchronous.
        The final return is of type definitions/DeleteResponseModel.
      operationId: deleteProfile
      parameters:
        - $ref: '#/components/parameters/Id'
        - name: deleteCloudResources
          in: query
          description: ADMIN ONLY - Delete all Azure cloud resources along with billing profile.
          schema:
            type: boolean
            default: false
          required: false
      responses:
        200:
          description: Redirect for profile delete result
          headers:
            location:
              description: url for the job result
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobModel'
        202:
          description: Job status of profile delete job & url for polling in the response
            header
          headers:
            location:
              description: url for the job polling
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobModel'
        400:
          description: Bad request - invalid id, badly formed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
        403:
          description: No permission to delete profile
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
        404:
          description: Not found - profile does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
        409:
          description: Profile in use by at least one dataset
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'

  /api/resources/v1/profiles/{id}/policies:
    get:
      tags:
        - profiles
        - resources
      description: Retrieve the read and discover policies for the profile
      operationId: retrieveProfilePolicies
      parameters:
        - $ref: '#/components/parameters/Id'
      responses:
        200:
          description: Policy
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PolicyResponse'
        400:
          description: Bad request - invalid id, badly formed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
        403:
          description: No permission to see policies
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
        404:
          description: Not found - snapshot id does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'

  /api/resources/v1/profiles/{id}/policies/{policyName}/members:
    post:
      tags:
        - profiles
        - resources
      description: >
        Adds a member to the specified policy for the profile.

        NOTE: Change may take up to 60 seconds to take effect.
      operationId: addProfilePolicyMember
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PolicyMemberRequest'
        required: true
      parameters:
        - $ref: '#/components/parameters/Id'
        - $ref: '#/components/parameters/ProfilePolicyName'
      responses:
        201:
          description: Policy
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PolicyResponse'
        400:
          description: Bad request - invalid id, badly formed, or email not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
        403:
          description: No permission to update policies
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
        404:
          description: Not found - profile id does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'

  /api/resources/v1/profiles/{id}/policies/{policyName}/members/{memberEmail}:
    delete:
      tags:
        - profiles
        - resources
      description: >
        Removes a member from the specified policy for the profile.

        NOTE: Change may take up to 60 seconds to take effect.
      operationId: deleteProfilePolicyMember
      parameters:
        - $ref: '#/components/parameters/Id'
        - name: policyName
          in: path
          description: The relevant policy
          required: true
          schema:
            type: string
            enum:
              - owner
              - user
        - name: memberEmail
          in: path
          description: The email of the user to remove
          required: true
          schema:
            type: string
      responses:
        200:
          description: PolicyResponse
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PolicyResponse'
        400:
          description: Bad request - invalid id, badly formed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
        403:
          description: No permission to update policies
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
        404:
          description: Not found - snapshot id does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'

  /api/repository/v1/snapshots:
    get:
      tags:
        - snapshots
        - repository
      description: >
        Returns a list of all of the snapshots to which the caller has access.
        Access may be granted directly via SAM and/or indirectly via a user's linked RAS passport
        in Terra.  Snapshot accessibility derived from a linked RAS passport will be attributed to
        the "reader" role.
      operationId: enumerateSnapshots
      parameters:
        - name: offset
          in: query
          description: The number of items to skip before starting to collect the result
            set.
          schema:
            type: integer
            default: 0
        - name: limit
          in: query
          description: The numbers of items to return.
          schema:
            type: integer
            default: 10
        - name: sort
          in: query
          description: The field to use for sorting.
          schema:
            $ref: '#/components/schemas/EnumerateSortByParam'
        - name: direction
          in: query
          description: The direction to sort.
          schema:
            $ref: '#/components/schemas/SqlSortDirectionAscDefault'
        - name: filter
          in: query
          description: Filter the results where this string is a case insensitive match
            in the name or description.
          schema:
            type: string
        - name: region
          in: query
          description: Filter the results where this string is a case insensitive match
            in any of the cloud storage regions used by the source datasets.
          schema:
            type: string
        - name: datasetIds
          in: query
          description: Filter the results where these datasetIds are source datasets.
          required: false
          style: form
          explode: true
          schema:
            type: array
            items:
              type: string
        - name: tags
          in: query
          description: >
            Filter the results where these case sensitive tags are applied to the snapshots
          required: false
          style: form
          explode: true
          schema:
            type: array
            items:
              $ref: '#/components/schemas/Tag'
        - name: duosDatasetIds
          in: query
          description: >
            Filter the results where snapshots have been linked to one of these DUOS datasetIds
          required: false
          style: form
          explode: true
          schema:
            type: array
            items:
              $ref: '#/components/schemas/DuosId'
      responses:
        200:
          description: List of snapshots
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EnumerateSnapshotModel'
    post:
      tags:
        - snapshots
        - repository
      description: Create a new snapshot
      operationId: createSnapshot
      requestBody:
        description: Snapshot to create
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SnapshotRequestModel'
        required: false
      responses:
        200:
          description: Redirect for snapshot successful creation
          headers:
            location:
              description: url for the job result
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobModel'
        202:
          description: Job status of snapshot creation job & url for polling in the
            response header
          headers:
            location:
              description: url for the job polling
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobModel'
        400:
          description: Bad request - invalid name, badly formed or user email not
            found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
        403:
          description: No permission to create snapshots
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
        409:
          description: Snapshot with this name already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
      x-codegen-request-body-name: snapshot
  /api/repository/v1/snapshots/{id}/lock:
    put:
      tags:
        - snapshots
        - repository
      description: >
        Add an exclusive lock to the snapshot so that no delete operations can be performed on it.
      operationId: lockSnapshot
      parameters:
        - $ref: '#/components/parameters/Id'
      responses:
        200:
          description: >
            Lock successful. ResourceLocks object is returned with the locking job id as the
            exclusive lock value, showing that there is an exclusive lock this resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceLocks'
        400:
          description: Bad request - malformed snapshot Id.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
        401:
          description: The request is unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
        403:
          description: >
            Unauthorized - the snapshot does not exist or the caller is missing permissions to
            lock the snapshot.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
        404:
          description: Not found - a snapshot with the specified Id does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
        500:
          description: An unexpected error occurred - snapshot was not updated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
  /api/repository/v1/snapshots/{id}/unlock:
    put:
      tags:
        - snapshots
        - repository
      description: >
        Remove an exclusive lock on the snapshot.
      operationId: unlockSnapshot
      parameters:
        - $ref: '#/components/parameters/Id'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UnlockResourceRequest'
        required: true
      responses:
        200:
          description: >
            Unlock successful. ResourceLocks object is returned with a "null" value
            showing that there is no longer an exclusive lock on this resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceLocks'
        400:
          description: Bad request - malformed snapshot Id or lock name.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
        401:
          description: The request is unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
        403:
          description: >
            Unauthorized - snapshot does not exist or the caller is missing permissions to
            unlock the snapshot.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
        404:
          description: Not found - a snapshot with the specified Id does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
        409:
          description: >
            Conflict - the snapshot is not locked or the provided lock name is not the locking flight id.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
        500:
          description: An unexpected error occurred - snapshot was not updated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
  /api/repository/v1/snapshots/roleMap:
    get:
      tags:
        - snapshots
        - repository
      description: >
        Get accessible snapshot IDs mapped to the roles which confer access.
        Access may be granted directly via Sam and/or indirectly via a user's linked RAS passport
        in Terra.  Snapshot accessibility derived from a linked RAS passport will be attributed to
        the "reader" role.
      operationId: getSnapshotIdsAndRoles
      responses:
        200:
          description: Accessible snapshot IDs and roles
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SnapshotIdsAndRolesModel"
  /api/repository/v1/snapshots/tags:
    get:
      tags:
        - snapshots
        - repository
      description: >
        Get accessible snapshot tags. Access may be granted directly via Sam and/or indirectly via
        a user's linked RAS passport in Terra.
      operationId: getSnapshotTags
      parameters:
        - name: filter
          in: query
          description: Filter to tags with this string as a case-insensitive match.
          schema:
            type: string
        - name: limit
          in: query
          description: >
            The maximum number of tags to return, in descending order of occurrence count.
            All accessible tags will be returned if unspecified.
          schema:
            type: integer
      responses:
        200:
          description: Accessible snapshot tags matching specified filters.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TagCountResultModel'
  /api/repository/v1/snapshots/{id}:
    get:
      tags:
        - snapshots
        - repository
      description: Retrieve a snapshot by id
      operationId: retrieveSnapshot
      parameters:
        - $ref: '#/components/parameters/Id'
        - name: include
          in: query
          description: A list of what to include with the snapshot object
          required: false
          schema:
            type: array
            default: "SOURCES,TABLES,RELATIONSHIPS,PROFILE,DATA_PROJECT,DUOS"
            items:
              $ref: '#/components/schemas/SnapshotRetrieveIncludeModel'
      responses:
        200:
          description: Snapshot
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SnapshotModel'
        400:
          description: Bad request - invalid id, badly formed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
        403:
          description: No permission to see snapshot
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
        404:
          description: Not found - snapshot id does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
    delete:
      tags:
        - snapshots
        - repository
      description: Delete a snapshot by id
      operationId: deleteSnapshot
      parameters:
        - $ref: '#/components/parameters/Id'
      responses:
        200:
          description: Redirect for snapshot successful deletion
          headers:
            location:
              description: url for the job result
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobModel'
        202:
          description: Job status of snapshot deletion job & url for polling in the
            response header
          headers:
            location:
              description: url for the job polling
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobModel'
        400:
          description: Bad request - invalid id, badly formed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
        403:
          description: No permission to delete snapshot
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
        404:
          description: Not found - snapshot id does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
        409:
          description: Snapshot in use?
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
    patch:
      tags:
        - snapshots
        - repository
      description: Update supported fields of the specified snapshot.
      operationId: patchSnapshot
      parameters:
        - $ref: '#/components/parameters/Id'
      requestBody:
        description: >-
          A 'lite' snapshot definition (used to modify supported fields of a snapshot).
          Null assignments will be ignored.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SnapshotPatchRequestModel'
      responses:
        200:
          description: Summary of updated snapshot.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SnapshotSummaryModel'
        400:
          description: Bad request - invalid id, badly formed modification instructions.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
        401:
          description: Unauthorized - snapshot does not exist, missing permissions to modify.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
        404:
          description: Not found - snapshot does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
        500:
          description: An unexpected error occurred - snapshot was not updated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
  /api/repository/v1/snapshots/{id}/summary:
    get:
      tags:
        - snapshots
        - repository
      description: >
        Retrieve a snapshot summary by id.  If the caller has permission to list the snapshot in an
        enumeration, they will have permission to retrieve its summary, whereas they may lack
        necessary permissions to retrieve the full snapshot object.
      operationId: retrieveSnapshotSummary
      parameters:
        - $ref: '#/components/parameters/Id'
      responses:
        200:
          description: Snapshot summary
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SnapshotSummaryModel'
        400:
          description: Bad request - invalid id, badly formed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
        403:
          description: No permission to see snapshot summary
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
        404:
          description: Not found - snapshot id does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
  /api/repository/v1/snapshots/{id}/data/{table}:
    get:
      tags:
        - snapshots
        - search
        - repository
      deprecated: true
      description: Retrieve data for a table in a snapshot. This endpoint is deprecated, please use the POST version.
      operationId: lookupSnapshotPreviewById
      parameters:
        - $ref: '#/components/parameters/Id'
        - name: table
          in: path
          description: Name of table to get data from
          required: true
          schema:
            type: string
        - name: offset
          in: query
          description: The number of rows to skip when retrieving the next page
          schema:
            type: integer
            default: 0
            minimum: 0
        - name: limit
          in: query
          description: The number of rows to return for the data
          schema:
            type: integer
            default: 30
            minimum: 1
            maximum: 1000
        - name: sort
          in: query
          description: The table column to sort by
          schema:
            type: string
            default: "datarepo_row_id"
        - name: direction
          in: query
          description: The direction to sort.
          schema:
            $ref: '#/components/schemas/SqlSortDirectionAscDefault'
        - name: filter
          in: query
          description: A SQL WHERE clause to filter the table results.
          schema:
            type: string
      responses:
        200:
          description: Returns the table data from a snapshot
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SnapshotPreviewModel'
    post:
      tags:
        - snapshots
        - search
        - repository
      description: Retrieve data for a table in a snapshot.
      operationId: querySnapshotDataById
      parameters:
        - $ref: '#/components/parameters/Id'
        - name: table
          in: path
          description: Name of table to get data from
          required: true
          schema:
            type: string
      requestBody:
        description: Parameters to filter results
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QueryDataRequestModel'
      responses:
        200:
          description: Returns the table data from a snapshot
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SnapshotPreviewModel'
  /api/repository/v1/snapshots/{id}/export:
    get:
      tags:
        - snapshots
        - repository
      description: Export a snapshot by id
      operationId: exportSnapshot
      parameters:
        - $ref: '#/components/parameters/Id'
        - in: query
          name: exportGsPaths
          schema:
            type: boolean
            default: false
            required: true
          description: Convert DRS urls to GS paths in the output parquet file. Note, GS paths could change over time.
        - in: query
          name: validatePrimaryKeyUniqueness
          schema:
            type: boolean
            default: true
            required: false
          description: Verify that primary keys are unique in all exported tables.
            Required for proper Terra workspace integration
        - in: query
          name: signUrls
          schema:
            type: boolean
            default: true
            required: false
          description: If true, then the export will generate signed URLs for the
            exported files and manifest. If false, then the export will return URLs native to
            the cloud backing the snapshot.  Note that this has no effect on Azure backed snapshots
      responses:
        202:
          description: Job status of snapshot export job & url for polling in the
            response header
          headers:
            location:
              description: url for the job polling
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobModel'
        400:
          description: Bad request - invalid id, badly formed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
        403:
          description: No permission to export snapshot
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
        404:
          description: Not found - snapshot id does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
  /api/repository/v1/snapshots/{id}/files:
    get:
      tags:
        - snapshots
        - repository
      description: List metadata for all files in a snapshot.
      operationId: listFiles
      parameters:
        - $ref: '#/components/parameters/Id'
        - name: offset
          in: query
          description: The number of items to skip before starting to collect the result
            set.
          schema:
            type: integer
            default: 0
        - name: limit
          in: query
          description: The numbers of items to return.
          schema:
            type: integer
            default: 10
      responses:
        200:
          description: List of files
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/FileModel'
        400:
          description: Bad request - not sure this will ever happen
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
        403:
          description: No permission
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
        404:
          description: Not found - file id does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
        409:
          description: No idea if we will generate this error code
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
  /api/repository/v1/snapshots/{id}/files/{fileid}:
    get:
      tags:
        - snapshots
        - repository
      description: Lookup metadata for one file
      operationId: lookupSnapshotFileById
      parameters:
        - $ref: '#/components/parameters/Id'
        - name: fileid
          in: path
          description: A file id
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/Depth'
      responses:
        200:
          description: File exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileModel'
        400:
          description: Bad request - not sure this will ever happen
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
        403:
          description: No permission
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
        404:
          description: Not found - file id does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
        409:
          description: No idea if we will generate this error code
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
  /api/repository/v1/snapshots/{id}/filesystem/objects:
    get:
      tags:
        - snapshots
        - repository
      description: Lookup metadata for one file
      operationId: lookupSnapshotFileByPath
      parameters:
        - $ref: '#/components/parameters/Id'
        - name: path
          in: query
          description: URL-encoded full path to a file or directory
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/Depth'
      responses:
        200:
          description: File exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileModel'
        400:
          description: Bad request - not sure this will ever happen
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
        403:
          description: No permission
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
        404:
          description: Not found - file id does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
        409:
          description: No idea if we will generate this error code
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
  /api/repository/v1/snapshots/{id}/authDomain:
    patch:
      tags:
        - snapshots
        - repository
      description: >
        Add data access control groups to the snapshot.  The provided user groups will be registered
        as a group constraint policy in Terra Policy Service, and as an auth domain in Sam.


        *** WARNING - Once this is set it cannot be modified ***


        If a snapshot has data access controls, a user must have access to the resource directly
        (via a policy) and belong to all of its data access control groups in order to view and
        export the data. For example, if a user is a steward of a snapshot but is not a member
        of its data access control groups, Sam will prevent that user from accessing the resource.
      operationId: addSnapshotAuthDomain
      parameters:
        - $ref: '#/components/parameters/Id'
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                description: A list of Sam user group names
                type: string
      responses:
        200:
          description: The snapshot's data access control groups
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AddAuthDomainResponseModel'
        400:
          description: Bad request - badly formed request body
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
        403:
          description: No permission to add data access control groups to this snapshot
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
        404:
          description: Not found - snapshot id does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
        500:
          description: An unexpected error occurred, or the Sam group was not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
  /api/repository/v1/snapshots/{id}/policies:
    get:
      tags:
        - snapshots
        - repository
      description: Retrieve the read and discover policies for the snapshot
      operationId: retrieveSnapshotPolicies
      parameters:
        - $ref: '#/components/parameters/Id'
      responses:
        200:
          description: Policy
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PolicyResponse'
        400:
          description: Bad request - invalid id, badly formed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
        403:
          description: No permission to see policies
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
        404:
          description: Not found - snapshot id does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
  /api/repository/v1/snapshots/{id}/policies/{policyName}/members:
    post:
      tags:
        - snapshots
        - repository
      description: Adds a member to the specified policy for the snapshot
      operationId: addSnapshotPolicyMember
      parameters:
        - $ref: '#/components/parameters/Id'
        - $ref: '#/components/parameters/SnapshotPolicyName'
      requestBody:
        description: Snapshot to change the policy of
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PolicyMemberRequest'
        required: false
      responses:
        201:
          description: PolicyResponse
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PolicyResponse'
        400:
          description: Bad request - invalid id, badly formed, or email not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
        403:
          description: No permission to update policies
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
        404:
          description: Not found - snapshot id does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
      x-codegen-request-body-name: policyMember
  /api/repository/v1/snapshots/{id}/policies/{policyName}/members/{memberEmail}:
    delete:
      tags:
        - snapshots
        - repository
      description: Removes a member from the specified policy for the snapshot
      operationId: deleteSnapshotPolicyMember
      parameters:
        - $ref: '#/components/parameters/Id'
        - $ref: '#/components/parameters/SnapshotPolicyName'
        - name: memberEmail
          in: path
          description: The email of the user to remove
          required: true
          schema:
            type: string
      responses:
        200:
          description: PolicyResponse
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PolicyResponse'
        400:
          description: Bad request - invalid id, badly formed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
        403:
          description: No permission to update policies
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
        404:
          description: Not found - snapshot id does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
  /api/repository/v1/snapshots/{id}/roles:
    get:
      tags:
        - snapshots
        - repository
      description: Retrieve the roles the calling user has on the snapshot
      operationId: retrieveUserSnapshotRoles
      parameters:
        - $ref: '#/components/parameters/Id'
      responses:
        200:
          description: Policy
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
        404:
          description: Not found - snapshot id does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
  /api/repository/v1/snapshots/{id}/linkDuosDataset/{duosId}:
    put:
      tags:
        - snapshots
        - repository
      description: >
        Link the DUOS dataset to the snapshot so that its authorized users are synced
        as snapshot readers.
        NOTE: This is an experimental feature and its response body may change.
      operationId: linkDuosDatasetToSnapshot
      parameters:
        - $ref: '#/components/parameters/Id'
        - name: duosId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/DuosId'
      responses:
        200:
          description: >
            The DUOS Firecloud group made a snapshot reader,
            and any previously linked DUOS Firecloud group removed as a snapshot reader.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SnapshotLinkDuosDatasetResponse'
        400:
          description: Bad request - malformed snapshot ID or DUOS dataset ID.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
        401:
          description: The request is unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
        403:
          description: >
            Unauthorized - snapshot does not exist
            or the caller is missing permissions to link it to a DUOS dataset.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
        404:
          description: Not found - a DUOS dataset with the specified ID does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
        500:
          description: An unexpected error occurred - snapshot was not updated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
  /api/repository/v1/snapshots/{id}/unlinkDuosDataset:
    delete:
      tags:
        - snapshots
        - repository
      description: >
        Unlink the DUOS dataset from the snapshot so that its authorized users are no longer synced
        as snapshot readers.
        NOTE: This is an experimental feature and its response body may change.
      operationId: unlinkDuosDatasetFromSnapshot
      parameters:
        - $ref: '#/components/parameters/Id'
      responses:
        200:
          description: >
            Any previously linked DUOS Firecloud group removed as a snapshot reader.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SnapshotLinkDuosDatasetResponse'
        400:
          description: Bad request - malformed snapshot ID.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
        401:
          description: The request is unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
        403:
          description: >
            Unauthorized - snapshot does not exist
            or the caller is missing permissions to unlink its DUOS dataset.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
        500:
          description: An unexpected error occurred - snapshot was not updated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
  /api/repository/v1/snapshots/{id}/tags:
    patch:
      tags:
        - snapshots
        - repository
      description: Update tags on snapshot
      operationId: updateSnapshotTags
      parameters:
        - $ref: '#/components/parameters/Id'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TagUpdateRequestModel'
      responses:
        200:
          description: Snapshot summary with updated tags
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SnapshotSummaryModel'
        401:
          description: The request is unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
        403:
          description: >
            Unauthorized - snapshot does not exist
            or the caller is missing permissions to modify its metadata.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
        500:
          description: An unexpected error occurred - snapshot was not updated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
  /api/repository/v1/duos:
    get:
      tags:
        - duos
        - repository
      description: >
        Returns a list of all DUOS Firecloud groups managed by TDR.
        NOTE: This is an experimental feature and its response body may change.
      operationId: retrieveDuosFirecloudGroups
      responses:
        200:
          description: List of DUOS Firecloud groups
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DuosFirecloudGroupModel'
        500:
          description: >
            An unexpected error occurred.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
  /api/repository/v1/duos/{duosId}:
    get:
      tags:
        - duos
        - repository
      description: >
        Returns a DUOS Firecloud group managed by TDR.
        NOTE: This is an experimental feature and its response body may change.
      operationId: retrieveDuosFirecloudGroup
      parameters:
        - name: duosId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/DuosId'
      responses:
        200:
          description: DUOS Firecloud group
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DuosFirecloudGroupModel'
        404:
          description: >
            Not found - TDR has no record of of a DUOS dataset with the specified ID.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
        500:
          description: >
            An unexpected error occurred.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
  /api/repository/v1/duos/syncAuthorizedUsers:
    put:
      tags:
        - duos
        - repository
      description: >
        Sync the members of all TDR-managed DUOS Firecloud groups with the authorized users of their
        corresponding DUOS datasets.  Any snapshots linked to a DUOS dataset have its Firecloud
        group as a reader, which means its members are also snapshot readers.
        NOTE: This is an experimental feature and its response body may change.
      operationId: syncDuosDatasetsAuthorizedUsers
      responses:
        200:
          description: Sync complete - see contents to gauge overall success.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DuosFirecloudGroupsSyncResponse'
        403:
          description: >
            Unauthorized - the caller must be a TDR Admin or TDR-DUOS Integration Admin
            to facilitate sync.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
        500:
          description: >
            An unexpected error occurred - Firecloud group contents may not have been updated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
  /api/repository/v1/duos/{duosId}/syncAuthorizedUsers:
    put:
      tags:
        - duos
        - repository
      description: >
        Sync the DUOS dataset's authorized users as members of their corresponding TDR-managed
        Firecloud group.  Any snapshots linked to the DUOS dataset have this Firecloud group
        as a reader, which means its members are also snapshot readers.
        NOTE: This is an experimental feature and its response body may change.
      operationId: syncDuosDatasetAuthorizedUsers
      parameters:
        - name: duosId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/DuosId'
      responses:
        200:
          description: Firecloud group contents successfully updated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DuosFirecloudGroupModel'
        403:
          description: >
            Unauthorized - the caller must be a TDR Admin or TDR-DUOS Integration Admin
            to facilitate sync.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
        404:
          description: >
            Not found - TDR has no record of of a DUOS dataset with the specified ID.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
        409:
          description: >
            Conflict - Firecloud group contents may have been updated, but TDR encountered a
            conflict when writing back to the database.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
        500:
          description: >
            An unexpected error occurred - Firecloud group contents may not have been updated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
  /api/repository/v1/datasets:
    get:
      tags:
        - datasets
        - repository
      description: >
        Returns a list of all of the datasets the caller has access to
      operationId: enumerateDatasets
      parameters:
        - name: offset
          in: query
          description: The number of datasets to skip before when retrieving the next
            page
          schema:
            type: integer
            default: 0
        - name: limit
          in: query
          description: The numbers datasets to retrieve and return.
          schema:
            type: integer
            default: 10
        - name: sort
          in: query
          description: The field to use for sorting.
          schema:
            $ref: '#/components/schemas/EnumerateSortByParam'
        - name: direction
          in: query
          description: The direction to sort.
          schema:
            $ref: '#/components/schemas/SqlSortDirectionAscDefault'
        - name: filter
          in: query
          description: Filter the results where this string is a case insensitive match
            in the name or description.
          schema:
            type: string
        - name: region
          in: query
          description: Filter the results where this string is a case insensitive match
            in any of the cloud storage regions used by the dataset.
          schema:
            type: string
        - name: tags
          in: query
          description: >
            Filter the results where these case sensitive tags are applied to the datasets
          required: false
          style: form
          explode: true
          schema:
            type: array
            items:
              $ref: '#/components/schemas/Tag'
      responses:
        200:
          description: List of datasets
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EnumerateDatasetModel'
    post:
      tags:
        - datasets
        - repository
      description: Create a new dataset asynchronously. The async result is DatasetSummaryModel.
      operationId: createDataset
      requestBody:
        description: Dataset to create
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DatasetRequestModel'
        required: false
      responses:
        200:
          description: Redirect for ingest complete
          headers:
            location:
              description: url for the job result
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobModel'
        202:
          description: Job status of ingest job & url for polling in the response
            header
          headers:
            location:
              description: url for the job polling
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobModel'
        400:
          description: Bad request - duplicate name, invalid name, badly formed schema
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
        403:
          description: No permission to create datasets
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
      x-codegen-request-body-name: dataset
  /api/repository/v1/datasets/tags:
    get:
      tags:
        - datasets
        - repository
      description: Get accessible dataset tags
      operationId: getDatasetTags
      parameters:
        - name: filter
          in: query
          description: Filter to tags with this string as a case-insensitive match.
          schema:
            type: string
        - name: limit
          in: query
          description: >
            The maximum number of tags to return, in descending order of occurrence count.
            All accessible tags will be returned if unspecified.
          schema:
            type: integer
      responses:
        200:
          description: Accessible dataset tags matching specified filters.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TagCountResultModel'
  /api/repository/v1/datasets/{id}:
    get:
      tags:
        - datasets
        - repository
      description: Retrieve a dataset by id
      operationId: retrieveDataset
      parameters:
        - $ref: '#/components/parameters/Id'
        - name: include
          in: query
          description: A list of what to include with the dataset object
          required: false
          schema:
            type: array
            default: "SCHEMA,PROFILE,DATA_PROJECT,STORAGE"
            items:
              $ref: '#/components/schemas/DatasetRequestAccessIncludeModel'
      responses:
        200:
          description: Dataset
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DatasetModel'
        400:
          description: Bad request - invalid id, badly formed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
        403:
          description: No permission to see dataset
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
        404:
          description: Not found - dataset id does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
    delete:
      tags:
        - datasets
        - repository
      description: Delete a dataset by id
      operationId: deleteDataset
      parameters:
        - $ref: '#/components/parameters/Id'
      responses:
        200:
          description: Redirect for dataset successful deletion
          headers:
            location:
              description: url for the job result
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobModel'
        202:
          description: Job status of dataset deletion job & url for polling in the
            response header
          headers:
            location:
              description: url for the job polling
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobModel'
        400:
          description: Bad request - invalid id, badly formed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
        403:
          description: No permission to delete dataset
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
        404:
          description: Not found - dataset id does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
        409:
          description: Dataset in use by at least one snapshot
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
    patch:
      tags:
        - datasets
        - repository
      description: Update supported fields of the specified dataset.
      operationId: patchDataset
      parameters:
        - $ref: '#/components/parameters/Id'
      requestBody:
        description: >-
          A 'lite' dataset definition (used to modify supported fields of a dataset).
          Null assignments will be ignored.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DatasetPatchRequestModel'
      responses:
        200:
          description: Summary of updated dataset.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DatasetSummaryModel'
        400:
          description: Bad request - invalid id, badly formed modification instructions.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
        401:
          description: Unauthorized - dataset does not exist, missing permissions to modify.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
        404:
          description: Not found - dataset does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
        500:
          description: An unexpected error occurred - dataset was not updated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
  /api/repository/v1/datasets/{id}/lock:
    put:
      tags:
        - datasets
        - repository
      description: >
        Add an exclusive lock to the dataset so that no update or delete operations can be performed on it.
      operationId: lockDataset
      parameters:
        - $ref: '#/components/parameters/Id'
      responses:
        200:
          description: >
            Lock successful. ResourceLocks object is returned with the locking job id as the
            exclusive lock value, showing that there is an exclusive lock this resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceLocks'
        400:
          description: Bad request - malformed dataset Id.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
        401:
          description: The request is unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
        403:
          description: >
            Unauthorized - dataset does not exist or the caller is missing permissions to lock the dataset.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
        404:
          description: Not found - a dataset with the specified Id does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
        500:
          description: An unexpected error occurred - dataset was not updated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
  /api/repository/v1/datasets/{id}/unlock:
    put:
      tags:
        - datasets
        - repository
      description: >
        Remove an exclusive or shared lock on the dataset.
      operationId: unlockDataset
      parameters:
        - $ref: '#/components/parameters/Id'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UnlockResourceRequest'
      responses:
        200:
          description: >
            Unlock successful. ResourceLocks object is returned with a "null" value
            if there are no locks on the resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceLocks'
        400:
          description: Bad request - malformed dataset Id.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
        401:
          description: The request is unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
        403:
          description: >
            Unauthorized - dataset does not exist or the caller is missing permissions to unlock the dataset.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
        404:
          description: Not found - a dataset with the specified Id does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
        409:
          description: >
            Conflict - the dataset is not locked or the provided lock name is not the locking flight id.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
        500:
          description: An unexpected error occurred - dataset was not updated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
  /api/repository/v1/datasets/{id}/data/{table}:
    get:
      tags:
        - datasets
        - search
        - repository
      deprecated: true
      description: Retrieve data for a table in a dataset. This endpoint is deprecated, please use the POST version.
      operationId: lookupDatasetDataById
      parameters:
        - $ref: '#/components/parameters/Id'
        - name: table
          in: path
          description: Name of table to get data from
          required: true
          schema:
            type: string
        - name: offset
          in: query
          description: The number of rows to skip when retrieving the next page
          schema:
            type: integer
            default: 0
            minimum: 0
        - name: limit
          in: query
          description: The number of rows to return for the data
          schema:
            type: integer
            default: 30
            minimum: 1
            maximum: 1000
        - name: sort
          in: query
          description: The table column to sort by
          schema:
            type: string
            default: "datarepo_row_id"
        - name: direction
          in: query
          description: The direction to sort.
          schema:
            $ref: '#/components/schemas/SqlSortDirectionAscDefault'
        - name: filter
          in: query
          description: A SQL WHERE clause to filter the table results.
          schema:
            type: string
      responses:
        200:
          description: Returns the table data from a dataset
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DatasetDataModel'
    post:
      tags:
        - datasets
        - search
        - repository
      description: Retrieve data for a table in a dataset.
      operationId: queryDatasetDataById
      parameters:
        - $ref: '#/components/parameters/Id'
        - name: table
          in: path
          description: Name of table to get data from
          required: true
          schema:
            type: string
      requestBody:
        description: Parameters to filter results
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QueryDataRequestModel'
        required: false
      responses:
        200:
          description: Returns the table data from a dataset
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DatasetDataModel'
  /api/repository/v1/datasets/{id}/data/{table}/statistics/{column}:
    get:
      tags:
        - datasets
      deprecated: true
      description: >-
        Retrieve statistics about data for a column in a table in a dataset. This endpoint is deprecated, please use the POST version.
      operationId: lookupDatasetColumnStatisticsById
      parameters:
        - $ref: '#/components/parameters/Id'
        - name: table
          in: path
          description: Name of table where column lives
          required: true
          schema:
            type: string
        - name: column
          in: path
          description: Name of column in the table to get statistics about
          required: true
          schema:
            type: string
        - name: filter
          in: query
          description: >-
            A SQL WHERE clause to filter results included in column statistics.


            For GCP array string columns, if you wanted to include all rows that contain 'value1' in column1,
            the filter clause would look like 'WHERE 'value1' IN UNNEST(column1)'. Note that "count" value
            includes all occurrences of a value including duplicates of the same value in a single array.
            i.e. if we had two rows in a table where the value for column1, row1 = ['value1', 'value1', 'value2']
            and column1, row2 = ['value1'] the count for 'value1' would be 3.
          schema:
            type: string
      responses:
        200:
          description: Returns the statistics about a column from a dataset's table
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ColumnStatisticsModel'
    post:
      tags:
        - datasets
      description: Retrieve statistics about data for a column in a table in a dataset.
      operationId: queryDatasetColumnStatisticsById
      parameters:
        - $ref: '#/components/parameters/Id'
        - name: table
          in: path
          description: Name of table where column lives
          required: true
          schema:
            type: string
        - name: column
          in: path
          description: Name of column in the table to get statistics about
          required: true
          schema:
            type: string
      requestBody:
        description: Parameters to filter results
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QueryColumnStatisticsRequestModel'
      responses:
        200:
          description: Returns the statistics about a column from a dataset's table
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ColumnStatisticsModel'
  /api/repository/v1/datasets/{id}/summary:
    get:
      tags:
        - datasets
        - repository
      description: >
        Retrieve a dataset summary by id.  If the caller has permission to list the dataset in an
        enumeration, they will have permission to retrieve its summary, whereas they may lack
        necessary permissions to retrieve the full dataset object.
      operationId: retrieveDatasetSummary
      parameters:
        - $ref: '#/components/parameters/Id'
      responses:
        200:
          description: Dataset summary
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DatasetSummaryModel'
        400:
          description: Bad request - invalid id, badly formed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
        403:
          description: No permission to see dataset summary
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
        404:
          description: Not found - dataset id does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
  /api/repository/v1/datasets/{id}/policies:
    get:
      tags:
        - datasets
        - repository
      description: Retrieve the read and discover policies for the dataset
      operationId: retrieveDatasetPolicies
      parameters:
        - $ref: '#/components/parameters/Id'
      responses:
        200:
          description: Policy
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PolicyResponse'
        400:
          description: Bad request - invalid id, badly formed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
        403:
          description: No permission to see policies
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
        404:
          description: Not found - dataset id does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
  /api/repository/v1/datasets/{id}/policies/{policyName}/members:
    post:
      tags:
        - datasets
        - repository
      description: Adds a member to the specified policy for the dataset
      operationId: addDatasetPolicyMember
      parameters:
        - $ref: '#/components/parameters/Id'
        - $ref: '#/components/parameters/DatasetPolicyName'
      requestBody:
        description: Dataset to change the policy of
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PolicyMemberRequest'
        required: false
      responses:
        201:
          description: PolicyResponse
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PolicyResponse'
        400:
          description: Bad request - invalid id, badly formed, or email not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
        403:
          description: No permission to update policies
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
        404:
          description: Not found - dataset id does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
      x-codegen-request-body-name: policyMember
  /api/repository/v1/datasets/{id}/policies/{policyName}/members/{memberEmail}:
    delete:
      tags:
        - datasets
        - repository
      description: Removes the member from the specified policy for the dataset
      operationId: deleteDatasetPolicyMember
      parameters:
        - $ref: '#/components/parameters/Id'
        - $ref: '#/components/parameters/DatasetPolicyName'
        - name: memberEmail
          in: path
          description: The email of the user to remove
          required: true
          schema:
            type: string
      responses:
        200:
          description: PolicyResponse
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PolicyResponse'
        400:
          description: Bad request - invalid id, badly formed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
        403:
          description: No permission to update policies
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
        404:
          description: Not found - snapshot id does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
  /api/repository/v1/datasets/{id}/roles:
    get:
      tags:
        - datasets
        - repository
      description: Retrieve the policies the calling user has on the dataset
      operationId: retrieveUserDatasetRoles
      parameters:
        - $ref: '#/components/parameters/Id'
      responses:
        200:
          description: Policy
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
        404:
          description: Not found - dataset id does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
  /api/repository/v1/datasets/{id}/ingest:
    post:
      tags:
        - datasets
        - repository
      description: Ingest data into a dataset table
      operationId: ingestDataset
      parameters:
        - $ref: '#/components/parameters/Id'
      requestBody:
        description: Ingest request
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IngestRequestModel'
        required: false
      responses:
        200:
          description: Redirect for ingest complete
          headers:
            location:
              description: url for the job result
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobModel'
        202:
          description: Job status of ingest job & url for polling in the response
            header
          headers:
            location:
              description: url for the job polling
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobModel'
        400:
          description: Bad request - invalid ingest request, badly formed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
        403:
          description: No permission to ingest
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
        409:
          description: No idea if we will generate this error code
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
      x-codegen-request-body-name: ingest
  /api/repository/v1/datasets/{id}/updateSchema:
    post:
      tags:
        - datasets
        - repository
      description:
        Modify a dataset's schema with additive changes
      operationId: updateSchema
      parameters:
        - $ref: '#/components/parameters/Id'
      requestBody:
        description: Update dataset schema
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DatasetSchemaUpdateModel'
        required: true
      responses:
        200:
          description: Redirect for schema update complete
          headers:
            location:
              description: url for the job result
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobModel'
        202:
          description: Job status of schema update job & url for polling in the response
            header
          headers:
            location:
              description: url for the job polling
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobModel'
        400:
          description: Bad request - invalid schema update request, badly formed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
        403:
          description: No permission to update schema
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
        404:
          description: Not found - dataset id does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
  /api/repository/v1/datasets/{id}/transactions:
    post:
      tags:
        - datasets
        - repository
      description: Create a transaction to be used for ingesting if you are chaining ingests together
      operationId: openTransaction
      parameters:
        - $ref: '#/components/parameters/Id'
      requestBody:
        description: Open transaction request
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TransactionCreateModel'
        required: true
      responses:
        200:
          description: Redirect for transaction open complete
          headers:
            location:
              description: url for the job result
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobModel'
        202:
          description: Job status of transaction open job & url for polling in the response
            header
          headers:
            location:
              description: url for the job polling
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobModel'
        400:
          description: Bad request - invalid transaction creation request, badly formed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
        403:
          description: No permission to create transaction
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
        404:
          description: Not found - dataset id does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
      x-codegen-request-body-name: transaction
    get:
      tags:
        - datasets
        - repository
      description: Lists transactions on the dataset
      operationId: enumerateTransactions
      parameters:
        - $ref: '#/components/parameters/Id'
        - name: offset
          in: query
          description: The number of items to skip before starting to collect the result
            set.
          schema:
            type: integer
            default: 0
        - name: limit
          in: query
          description: The numbers of items to return.
          schema:
            type: integer
            default: 10
      responses:
        200:
          description: List of transactions
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TransactionModel'
        400:
          description: Bad request - invalid parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
        403:
          description: No permission to list transactions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
        404:
          description: Not found - dataset id does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
  /api/repository/v1/datasets/{id}/transactions/{transactionId}:
    get:
      tags:
        - datasets
        - repository
      description: Retrieve a given transaction
      operationId: retrieveTransaction
      parameters:
        - $ref: '#/components/parameters/Id'
        - $ref: '#/components/parameters/TransactionId'
      responses:
        200:
          description: Information on a given transaction
            header
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionModel'
        400:
          description: Bad request - invalid query parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
        403:
          description: No permission to read transaction from this dataset
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
        404:
          description: Not found - dataset id or transaction id does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
    post:
      tags:
        - datasets
        - repository
      description: Close a given transaction
      operationId: closeTransaction
      parameters:
        - $ref: '#/components/parameters/Id'
        - $ref: '#/components/parameters/TransactionId'
      requestBody:
        description: Close transaction request
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TransactionCloseModel'
      responses:
        200:
          description: Redirect for transaction terminate complete
          headers:
            location:
              description: url for the job result
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobModel'
        202:
          description: Job status of transaction commit job & url for polling in the response
            header
          headers:
            location:
              description: url for the job polling
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobModel'
        400:
          description: Bad request - invalid transaction terminate request, badly formed or unrecognized state
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
        403:
          description: No permission to terminate the transaction for this dataset
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
        404:
          description: Not found - dataset id or transaction id does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
  /api/repository/v1/datasets/{id}/assets:
    post:
      tags:
        - datasets
        - repository
      description: Add an asset definition to a dataset
      operationId: addDatasetAssetSpecifications
      parameters:
        - $ref: '#/components/parameters/Id'
      requestBody:
        description: Asset definition to add to the dataset
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AssetModel'
        required: false
      responses:
        200:
          description: Redirect for ingest complete
          headers:
            location:
              description: url for the job result
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobModel'
        202:
          description: Job status of ingest job & url for polling in the response
            header
          headers:
            location:
              description: url for the job polling
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobModel'
        400:
          description: Bad request - invalid ingest request, badly formed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
        403:
          description: No permission to add an asset to a dataset
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
      x-codegen-request-body-name: assetModel
  /api/repository/v1/datasets/{id}/assets/{assetid}:
    delete:
      tags:
        - datasets
        - repository
      description: Remove an asset definition from a dataset
      operationId: removeDatasetAssetSpecifications
      parameters:
        - $ref: '#/components/parameters/Id'
        - $ref: '#/components/parameters/AssetId'
      responses:
        200:
          description: Redirect for ingest complete
          headers:
            location:
              description: url for the job result
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobModel'
        202:
          description: Add new assets to a dataset
          headers:
            location:
              description: url for the job polling
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobModel'
        400:
          description: Bad request - invalid ingest request, badly formed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
        403:
          description: No permission to remove an asset from a dataset
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
  /api/repository/v1/datasets/{id}/deletes:
    post:
      tags:
        - datasets
        - repository
      description: Applies deletes to primary tabular data in a dataset
      operationId: applyDatasetDataDeletion
      parameters:
        - $ref: '#/components/parameters/Id'
      requestBody:
        description: Description of the data in the dataset to delete
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DataDeletionRequest'
        required: false
      responses:
        201:
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobModel'
        400:
          description: Bad request - invalid tableName, bad row ids, badly formed,
            etc.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
        403:
          description: No permission to delete data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
        404:
          description: Not found - dataset id does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
      x-codegen-request-body-name: dataDeletionRequest
  /api/repository/v1/datasets/{id}/tags:
    patch:
      tags:
        - datasets
        - repository
      description: Update tags on dataset
      operationId: updateDatasetTags
      parameters:
        - $ref: '#/components/parameters/Id'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TagUpdateRequestModel'
      responses:
        200:
          description: Dataset summary with updated tags
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DatasetSummaryModel'
        401:
          description: The request is unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
        403:
          description: >
            Unauthorized - dataset does not exist
            or the caller is missing permissions to modify its metadata.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
        500:
          description: An unexpected error occurred - dataset was not updated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
  /api/repository/v1/snapshotAccessRequests:
    get:
      tags:
        - SnapshotAccessRequest
      description: As an admin for this dataset, view all snapshot requests for this dataset.
      operationId: enumerateSnapshotAccessRequests
      responses:
        200:
          description: The snapshot requests have been retrieved.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EnumerateSnapshotAccessRequest'
        400:
          description: Bad request - invalid id, or badly formed IamResourceType.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
        401:
          description: Unauthorized - dataset does not exist or missing permissions to view.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
        403:
          description: Unauthorized - missing permissions to view snapshot requests.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
        404:
          description: No dataset found that meets the request parameter.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
        500:
          description: An unexpected error occurred.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
    post:
      tags:
        - SnapshotAccessRequest
      description: As a researcher, create a snapshot request for a dataset, given a set of criteria
        and required concept sets and values.
      operationId: createSnapshotAccessRequest
      requestBody:
        description: Description of the snapshot being requested.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SnapshotAccessRequest'
      responses:
        200:
          description: The request has been made.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SnapshotAccessRequestResponse'
        400:
          description: Bad request - invalid id, snapshotRequest, or badly formed IamResourceType.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
        401:
          description: Unauthorized - dataset does not exist or missing permissions to view.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
        403:
          description: Unauthorized - missing permissions to request snapshot.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
        404:
          description: No dataset found that meets the request parameters.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
        500:
          description: An unexpected error occurred.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
  /api/repository/v1/snapshotAccessRequests/{id}/reject:
    put:
      tags:
        - SnapshotAccessRequest
      description: As a custodian, reject a snapshot access request.
      operationId: rejectSnapshotAccessRequest
      parameters:
        - $ref: '#/components/parameters/Id'
      responses:
        200:
          description: The request has been rejected.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SnapshotAccessRequestResponse'
        400:
          description: Bad request - invalid id.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
        401:
          description: Unauthorized - snapshot request does not exist or missing permissions to view.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
        403:
          description: Unauthorized - missing permissions to reject snapshot request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
        404:
          description: No snapshot request found that meets the request parameters.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
        500:
          description: An unexpected error occurred.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
  /api/repository/v1/snapshotAccessRequests/{id}/approve:
    put:
      tags:
        - SnapshotAccessRequest
      description: As a custodian, approve a snapshot access request.
      operationId: approveSnapshotAccessRequest
      parameters:
        - $ref: '#/components/parameters/Id'
      responses:
        200:
          description: The request has been approved.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SnapshotAccessRequestResponse'
        400:
          description: Bad request - invalid id.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
        401:
          description: Unauthorized - snapshot request does not exist or missing permissions to view.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
        403:
          description: Unauthorized - missing permissions to approve snapshot request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
        404:
          description: No snapshot request found that meets the request parameters.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
        500:
          description: An unexpected error occurred.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
  /api/repository/v1/register/user:
    get:
      tags:
        - register
        - repository
      description: >
        Returns whether the user is registered with terra
      operationId: user
      responses:
        200:
          description: User Info
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserStatusInfo'
  /api/repository/v1/datasets/{id}/files:
    get:
      tags:
        - datasets
        - repository
      description: List metadata for all files in a dataset.
      operationId: listFiles
      parameters:
        - $ref: '#/components/parameters/Id'
        - name: offset
          in: query
          description: The number of items to skip before starting to collect the result
            set.
          schema:
            type: integer
            default: 0
        - name: limit
          in: query
          description: The numbers of items to return.
          schema:
            type: integer
            default: 10
      responses:
        200:
          description: List of files
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/FileModel'
        400:
          description: Bad request - not sure this will ever happen
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
        403:
          description: No permission
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
        404:
          description: Not found - file id does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
        409:
          description: No idea if we will generate this error code
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
    post:
      tags:
        - datasets
        - repository
      description: Ingest one file into the dataset file system; async returns a FileModel
      operationId: ingestFile
      parameters:
        - $ref: '#/components/parameters/Id'
      requestBody:
        description: Ingest file request
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FileLoadModel'
        required: false
      responses:
        200:
          description: Redirect for ingest complete
          headers:
            location:
              description: url for the job result
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobModel'
        202:
          description: Job status of ingest job & url for polling in the response
            header
          headers:
            location:
              description: url for the job polling
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobModel'
        400:
          description: Bad request - invalid ingest request, badly formed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
        403:
          description: No permission to ingest
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
        409:
          description: No idea if we will generate this error code
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
      x-codegen-request-body-name: ingestFile
  /api/repository/v1/datasets/{id}/files/bulk:
    post:
      tags:
        - datasets
        - repository
      description: >-
        Load many files into the dataset file system; async returns a BulkLoadResultModel
        Note that this endpoint is not a single transaction. Some files may be loaded and
        others may fail. Each file load is atomic; the file will either be loaded into the
        dataset file system or it will not exist.
      operationId: bulkFileLoad
      parameters:
        - $ref: '#/components/parameters/Id'
      requestBody:
        description: >-
          Bulk file load request with file list in an external file. Load summary results
          are returned in the async response.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BulkLoadRequestModel'
        required: false
      responses:
        200:
          description: Redirect for bulk load complete
          headers:
            location:
              description: url for the job result
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobModel'
        202:
          description: Job status of bulk load job & url for polling in the response
            header
          headers:
            location:
              description: url for the job polling
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobModel'
        400:
          description: Bad request - invalid ingest request, badly formed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
        403:
          description: No permission to ingest
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
        409:
          description: Someone else is using the load tag
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
      x-codegen-request-body-name: bulkFileLoad
  /api/repository/v1/datasets/{id}/files/bulk/{loadTag}:
    get:
      tags:
        - datasets
        - repository
      description: >-
        Retrieve the results of a bulk file load. The results of each bulk load are stored
        in the dataset. They can be queried directly or retrieved with this paginated
        interface.
      operationId: getLoadHistoryForLoadTag
      parameters:
        - $ref: '#/components/parameters/Id'
        - $ref: '#/components/parameters/LoadTag'
        - name: offset
          in: query
          description: The number of items to skip before starting to collect the result
            set.
          schema:
            type: integer
            default: 0
        - name: limit
          in: query
          description: The numbers of items to return.
          schema:
            type: integer
            default: 10
      responses:
        200:
          description: Redirect for bulk load result retrieval complete
          headers:
            location:
              description: url for the job result
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BulkLoadHistoryModelList'
        202:
          description: Job status of bulk load result retrieval
          headers:
            location:
              description: url for the job polling
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobModel'
        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
        403:
          description: No permission to access bulk file results
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
    delete:
      tags:
        - datasets
        - repository
      description: >-
        Delete results from the bulk file load table of the dataset.
        If jobId is specified, then only the results for the loadTag plus that jobId are
        deleted. Otherwise, all results associated with the loadTag are deleted.
      operationId: bulkFileResultsDelete
      parameters:
        - $ref: '#/components/parameters/Id'
        - $ref: '#/components/parameters/LoadTag'
        - name: jobId
          in: query
          description: The job id associated with the load
          schema:
            type: string
      responses:
        200:
          description: Redirect for bulk load result deletion complete
          headers:
            location:
              description: url for the job result
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobModel'
        202:
          description: Job status of bulk load result deletion
          headers:
            location:
              description: url for the job polling
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobModel'
        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
        403:
          description: No permission to access bulk file results
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
  /api/repository/v1/datasets/{id}/files/bulk/array:
    post:
      tags:
        - datasets
        - repository
      description: >-
        Load many files into the dataset file system; async returns a BulkLoadArrayResultModel
        Note that this endpoint is not a single transaction. Some files may be loaded and
        others may fail. Each file load is atomic; the file will either be loaded into the
        dataset file system or it will not exist.
      operationId: bulkFileLoadArray
      parameters:
        - $ref: '#/components/parameters/Id'
      requestBody:
        description: >-
          Bulk file load request with file list in the body of the request and load
          results returned in the async response.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BulkLoadArrayRequestModel'
        required: false
      responses:
        200:
          description: Redirect for bulk load complete
          headers:
            location:
              description: url for the job result
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobModel'
        202:
          description: Job status of bulk load job & url for polling in the response
            header
          headers:
            location:
              description: url for the job polling
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobModel'
        400:
          description: Bad request - invalid ingest request, badly formed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
        403:
          description: No permission to ingest
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
        409:
          description: Someone else is using the load tag
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
      x-codegen-request-body-name: bulkFileLoadArray
  /api/repository/v1/datasets/{id}/files/{fileid}:
    get:
      tags:
        - datasets
        - repository
      description: Lookup metadata for one file
      operationId: lookupFileById
      parameters:
        - $ref: '#/components/parameters/Id'
        - name: fileid
          in: path
          description: A file id
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/Depth'
      responses:
        200:
          description: File exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileModel'
        400:
          description: Bad request - not sure this will ever happen
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
        403:
          description: No permission
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
        404:
          description: Not found - file id does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
        409:
          description: No idea if we will generate this error code
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
    delete:
      tags:
        - datasets
        - repository
      description: >
        Hard delete of a file by id. The file is deleted even if it is in use by
        a dataset. Subsequent lookups will give not found errors.
      operationId: deleteFile
      parameters:
        - $ref: '#/components/parameters/Id'
        - name: fileid
          in: path
          description: A file id
          required: true
          schema:
            type: string
      responses:
        200:
          description: Redirect for snapshot successful creation
          headers:
            location:
              description: url for the job result
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobModel'
        202:
          description: Job status of snapshot creation job & url for polling in the
            response header
          headers:
            location:
              description: url for the job polling
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobModel'
        400:
          description: Bad request - invalid id, badly formed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
        403:
          description: No permission to delete file
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
        404:
          description: Not found - dataset id or file id does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
  /api/repository/v1/datasets/{id}/filesystem/objects:
    get:
      tags:
        - datasets
        - repository
      description: Lookup metadata for one file
      operationId: lookupFileByPath
      parameters:
        - $ref: '#/components/parameters/Id'
        - name: path
          in: query
          description: URL-encoded full path to a file or directory
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/Depth'
      responses:
        200:
          description: File exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileModel'
        400:
          description: Bad request - not sure this will ever happen
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
        403:
          description: No permission
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
        404:
          description: Not found - file id does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
        409:
          description: No idea if we will generate this error code
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
  /api/repository/v1/jobs:
    get:
      tags:
        - jobs
        - repository
      description: >
        Returns a list of all recently submitted jobs that the caller has access to
      operationId: enumerateJobs
      parameters:
        - name: offset
          in: query
          description: The number of items to skip before starting to collect the result
            set.
          schema:
            type: integer
            default: 0
        - name: limit
          in: query
          description: The numbers of items to return.
          schema:
            type: integer
            default: 10
        - name: direction
          in: query
          description: The direction to sort based on job creation time (default is descending).
          schema:
            $ref: '#/components/schemas/SqlSortDirectionDescDefault'
        - name: className
          in: query
          description: Filter by the flight's class
          schema:
            type: string
      responses:
        200:
          description: List of jobs
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/JobModel'
  /api/repository/v1/jobs/{id}:
    get:
      tags:
        - jobs
        - repository
      description: Retrieve a job's status by id
      operationId: retrieveJob
      parameters:
        - name: id
          in: path
          description: A UUID to used to identify an object in the repository
          required: true
          schema:
            type: string
      responses:
        200:
          description: Redirect for object successful creation
          headers:
            location:
              description: url for the job result
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobModel'
        202:
          description: Job status
          headers:
            location:
              description: url for the job polling
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobModel'
        400:
          description: Bad request - invalid id, badly formed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
        403:
          description: No permission to see job
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
        404:
          description: Not found - job id does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
  /api/repository/v1/jobs/{id}/result:
    get:
      tags:
        - jobs
        - repository
      description: Retrieve a job's result by id
      operationId: retrieveJobResult
      parameters:
        - name: id
          in: path
          description: A UUID to used to identify an object in the repository
          required: true
          schema:
            type: string
      responses:
        default:
          description: Successful responses return the type of model specified by
            the job; otherwise, ErrorModel
          content:
            application/json:
              schema:
                type: object
        202:
          description: The job is currently running
          content:
            application/json:
              schema:
                type: object
  /api/repository/v1/admin/register-drs-aliases:
    post:
      tags:
        - admin
        - repository
      description: >
        Load Drs Aliases into TDR.  It is possible to have an alias to a DRS ID that does not exist
        in TDR.
      operationId: registerDrsAliases
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/DrsAliasModel'
      responses:
        200:
          description: Drs alias registration job submitted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobModel'
        500:
          description: An unexpected error occurred.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
  /api/repository/v1/configs/{name}:
    get:
      tags:
        - configs
        - repository
      description: Get one configuration
      operationId: getConfig
      parameters:
        - name: name
          in: path
          description: name of the configuration to get
          required: true
          schema:
            type: string
      responses:
        200:
          description: current configuration
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConfigModel'
        404:
          description: unknown configuration name
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
    put:
      tags:
        - configs
        - repository
      description: >
        Enable or disable the named fault. Performing the put on a config that
        is not a fault is an error.
      operationId: setFault
      parameters:
        - name: name
          in: path
          description: name of the configuration to
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConfigEnableModel'
        required: false
      responses:
        204:
          description: fault was en/dis-abled successfully - no content
          content: {}
        400:
          description: configuration name is not a fault
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
        404:
          description: unknown configuration name
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
      x-codegen-request-body-name: configEnable
  /api/repository/v1/configs:
    get:
      tags:
        - configs
        - repository
      description: Get all configurations
      operationId: getConfigList
      responses:
        200:
          description: all configurations
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConfigListModel'
    put:
      tags:
        - configs
        - repository
      description: Set the a group of configurations
      operationId: setConfigList
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConfigGroupModel'
        required: false
      responses:
        200:
          description: previous settings
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConfigListModel'
        400:
          description: invalid configuration model
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
        404:
          description: unknown configuration name(s) - see errorDetails
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
      x-codegen-request-body-name: configModel
  /api/repository/v1/configs/reset:
    put:
      tags:
        - configs
        - repository
      description: Reset the configuration to original settings
      operationId: resetConfig
      responses:
        204:
          description: configuration reset
          content: {}

  /api/repository/v1/upgrade:
    post:
      tags:
        - upgrade
        - repository
      description: >-
        Extensible endpoint for triggering upgrade tasks in the data repository.
        The asynchronous result is UpgradeResponseModel
      operationId: upgrade
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpgradeModel'
        required: true
      responses:
        200:
          description: Redirect for upgrade complete
          headers:
            location:
              description: url for the job result
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobModel'
        202:
          description: Job status of upgrade job & url for polling in the response
            header
          headers:
            location:
              description: url for the job polling
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobModel'
        400:
          description: Bad request - invalid upgrade request, badly formed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
        403:
          description: No permission to upgrade
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
      x-codegen-request-body-name: upgrade

  ##############################################################################
  ## DRS STANDARD ENDPOINTS
  ##############################################################################
  /ga4gh/drs/v1/service-info:
    get:
      tags:
        - DataRepositoryService
      summary: Get information about this implementation.
      description: 'May return service version and other information. [dd]NOTE: technically,
        this has been removed from DRS V1.0. It will be added back when there is a
        common service_info across ga4gh. I don''t expect it to be too different,
        so just leaving this info call in place.'
      operationId: GetServiceInfo
      responses:
        200:
          description: Service information returned successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DRSServiceInfo'
  /ga4gh/drs/v1/objects/{object_id}:
    options:
      tags:
        - DataRepositoryService
      summary: Get Authorization info about a DRS Object.
      description: >
        Returns `DRSAuthorizations` that can be used to determine
        how to authorize requests to GET or POST a `DRSObject`.

        NOTE: Changes to the object's dataset or snapshot may take up to 15 minutes
        to be reflected in this response.
      operationId: OptionsObject
      parameters:
        - name: object_id
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: "`DRSAuthorizations` were found successfully"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DRSAuthorizations'
        204:
          description: "`DRSAuthorizations` are not supported for this object. Default to `None`."
        400:
          description: The request is malformed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DRSError'
        404:
          description: The requested `Object` wasn't found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DRSError'
        405:
          description: "`DRSAuthorizations` are not supported for this object. Default to `None`."
        500:
          description: An unexpected error occurred.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DRSError'
    get:
      tags:
        - DataRepositoryService
      summary: Get info about an `Object`.
      description: >
        Returns object metadata, and a list of access methods that can
        be used to fetch object bytes.

        NOTE: Changes to the object's dataset or snapshot may take up to 15 minutes
        to be reflected in this response.
      operationId: GetObject
      parameters:
        - name: object_id
          in: path
          required: true
          schema:
            type: string
        - name: expand
          in: query
          description: >-
            If false and the object_id refers to a bundle, then the ContentsObject array contains only those objects directly contained in the bundle. That is, if the bundle contains other bundles, those other bundles are not recursively included in the result.
            If true and the object_id refers to a bundle, then the entire set of objects in the bundle is expanded. That is, if the bundle contains another bundles, then those other bundles are recursively expanded and included in the result. Recursion continues through the entire sub-tree of the bundle.
            If the object_id refers to a blob, then the query parameter is ignored.
          schema:
            type: boolean
            default: false
      responses:
        200:
          description: The `Object` was found successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DRSObject'
        202:
          description: >
            The operation is delayed and will continue asynchronously. The client should retry this same request after the delay specified by Retry-After header.
          headers:
            Retry-After:
              description: >
                Delay in seconds. The client should retry this same request after waiting for this duration. To simplify client response processing, this must be an integral relative time in seconds. This value SHOULD represent the minimum duration the client should wait before attempting the operation again with a reasonable expectation of success. When it is not feasible for the server to determine the actual expected delay, the server may return a brief, fixed value instead.
              schema:
                type: integer
                format: int64
          content: {}
        400:
          description: The request is malformed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DRSError'
        401:
          description: The request is unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DRSError'
        403:
          description: The requester is not authorized to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DRSError'
        404:
          description: The requested `Object` wasn't found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DRSError'
        500:
          description: An unexpected error occurred.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DRSError'
    post:
      tags:
        - DataRepositoryService
      summary:  Get info about a DrsObject through POST'ing a Passport.
      description:  >
        Returns object metadata, and a list of access methods that can be used to fetch object bytes.
        Method is a POST to accommodate a JWT GA4GH Passport sent in the formData in order to authorize access.

        NOTE: Changes to the object's dataset or snapshot may take up to 15 minutes
        to be reflected in this response.
      operationId: PostObject
      parameters:
        - name: object_id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DRSPassportRequestModel'
        required: true
      responses:
        200:
          description: The `Object` was found successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DRSObject'
        202:
          description: >
            The operation is delayed and will continue asynchronously. The client should retry this same request after the delay specified by Retry-After header.
          headers:
            Retry-After:
              description: >
                Delay in seconds. The client should retry this same request after waiting for this duration. To simplify client response processing, this must be an integral relative time in seconds. This value SHOULD represent the minimum duration the client should wait before attempting the operation again with a reasonable expectation of success. When it is not feasible for the server to determine the actual expected delay, the server may return a brief, fixed value instead.
              schema:
                type: integer
                format: int64
          content: { }
        400:
          description: The request is malformed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DRSError'
        401:
          description: The request is unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DRSError'
        403:
          description: The requester is not authorized to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DRSError'
        404:
          description: The requested `Object` wasn't found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DRSError'
        500:
          description: An unexpected error occurred.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DRSError'

  /ga4gh/drs/v1/objects/{object_id}/access/{access_id}:
    get:
      tags:
        - DataRepositoryService
      summary: Get a URL for fetching bytes.
      description: >
        Returns a URL that can be used to fetch the object bytes. This
        method only needs to be called when using an `AccessMethod` that contains
        an `access_id` (e.g., for servers that use signed URLs for fetching object
        bytes).

        NOTE: Changes to the object's dataset or snapshot may take up to 15 minutes
        to be reflected in this response.
      operationId: GetAccessURL
      parameters:
        - name: object_id
          in: path
          description: An `id` of a Data Object
          required: true
          schema:
            type: string
        - name: access_id
          in: path
          description: An `access_id` from the `access_methods` list of a Data Object
          required: true
          schema:
            type: string
        - name: x-user-project
          in: header
          description: >
            For GCP hosted files, this will indicate the user project to bill when accessing the
            signed url.  This value must be a valid Terra billing project ID that the caller has
            access to and only applies to GCP hosted data.
          required: false
          schema:
            type: string
      responses:
        200:
          description: The access URL was found successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DRSAccessURL'
        202:
          description: >
            The operation is delayed and will continue asynchronously. The client should retry this same request after the delay specified by Retry-After header.
          headers:
            Retry-After:
              description: >
                Delay in seconds. The client should retry this same request after waiting for this duration. To simplify client response processing, this must be an integral relative time in seconds. This value SHOULD represent the minimum duration the client should wait before attempting the operation again with a reasonable expectation of success. When it is not feasible for the server to determine the actual expected delay, the server may return a brief, fixed value instead.
              schema:
                type: integer
                format: int64
          content: {}
        400:
          description: The request is malformed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DRSError'
        401:
          description: The request is unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DRSError'
        403:
          description: The requester is not authorized to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DRSError'
        404:
          description: The requested access URL wasn't found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DRSError'
        500:
          description: An unexpected error occurred.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DRSError'
    post:
      tags:
        - DataRepositoryService
      summary: Get a URL for fetching bytes through POST'ing a Passport
      description: >
        Returns a URL that can be used to fetch the bytes of a `DrsObject`.

        This method only needs to be called when using an `AccessMethod` that contains an `access_id`
        (e.g., for servers that use signed URLs for fetching object bytes).

        Method is a POST to accommodate a JWT GA4GH Passport sent in the formData in order to authorize access.

        NOTE: Changes to the object's dataset or snapshot may take up to 15 minutes
        to be reflected in this response.
      operationId: PostAccessURL
      parameters:
        - name: object_id
          in: path
          description: An `id` of a Data Object
          required: true
          schema:
            type: string
        - name: access_id
          in: path
          description: An `access_id` from the `access_methods` list of a Data Object
          required: true
          schema:
            type: string
        - name: x-user-project
          in: header
          description: >
            For GCP hosted files, this will indicate the user project to bill when accessing the
            signed url.  This value must be a valid Terra billing project ID that the caller has
            access to and only applies to GCP hosted data.
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DRSPassportRequestModel'
        required: true
      responses:
        200:
          description: The access URL was found successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DRSAccessURL'
        202:
          description: >
            The operation is delayed and will continue asynchronously. The client should retry this same request after the delay specified by Retry-After header.
          headers:
            Retry-After:
              description: >
                Delay in seconds. The client should retry this same request after waiting for this duration. To simplify client response processing, this must be an integral relative time in seconds. This value SHOULD represent the minimum duration the client should wait before attempting the operation again with a reasonable expectation of success. When it is not feasible for the server to determine the actual expected delay, the server may return a brief, fixed value instead.
              schema:
                type: integer
                format: int64
          content: {}
        400:
          description: The request is malformed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DRSError'
        401:
          description: The request is unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DRSError'
        403:
          description: The requester is not authorized to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DRSError'
        404:
          description: The requested access URL wasn't found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DRSError'
        500:
          description: An unexpected error occurred.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DRSError'
  #################################################################
  #####                  JOURNAL                              #####
  #################################################################
  /api/repository/v1/journal/{resourceKey}:
    get:
      tags:
        - journal
      description: >
        Returns a list of journal entries for an object the caller has access to, in descending
        order of entry creation.
      operationId: retrieveJournalEntries
      parameters:
        - in: path
          description: The UUID of the journaled resource.
          name: resourceKey
          required: true
          schema:
            type: string
            format: uuid
        - name: resourceType
          in: query
          required: true
          description: The IamResource type of the journaled resource.
          schema:
            $ref: '#/components/schemas/IamResourceTypeEnum'
        - name: offset
          in: query
          description: The number of entries to skip before when retrieving the next
            page
          schema:
            type: integer
            default: 0
        - name: limit
          in: query
          description: The number of entries to retrieve and return.
          schema:
            type: integer
            default: 10
      responses:
        200:
          description: List of journal entries
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/JournalEntryModel'
        400:
          description: Bad request - invalid id, badly formed IamResourceType.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
        401:
          description: Unauthorized - journal entry does not exist or missing permissions to view.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
        403:
          description: Unauthorized - journal entry does not exist or missing permissions to view.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
        404:
          description: No journal entries found that meet the request parameters.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
        500:
          description: An unexpected error occurred.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
  ##############################################################################
  ## SNAPSHOT BUILDER API ENDPOINTS
  ## ⚠️ NOTE: ALL SNAPSHOT APIS ARE SUBJECT TO CHANGE
  ##############################################################################
  /api/repository/v1/snapshots/{id}/snapshotBuilder/settings:
    get:
      tags:
        - snapshots
        - repository
      description: >
        Get the snapshot builder settings for a snapshot.
      operationId: getSnapshotSnapshotBuilderSettings
      parameters:
        - in: path
          description: The UUID of the snapshot.
          name: id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        200:
          description: The snapshot builder settings
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SnapshotBuilderSettings'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
    put:
      tags:
        - snapshots
        - repository
      description: >
        Updates the snapshot builder settings for a snapshot.
      operationId: updateSnapshotSnapshotBuilderSettings
      parameters:
        - in: path
          description: The UUID of the snapshot.
          name: id
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: New settings for the snapshot to use for snapshot building
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SnapshotBuilderSettings'
        required: true
      responses:
        200:
          description: The updated settings
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SnapshotBuilderSettings'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
    delete:
      tags:
        - snapshots
        - repository
      description: >
        Removes the snapshot builder settings for a snapshot.
      operationId: deleteSnapshotSnapshotBuilderSettings
      parameters:
        - in: path
          description: The UUID of the snapshot.
          name: id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        200:
          description: Settings were deleted
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
  /api/repository/v1/snapshots/{id}/snapshotBuilder/concepts/{conceptId}/children:
    get:
      tags:
        - snapshots
        - repository
      description: >
        Gets all concepts with the specified concept as their parent.
      operationId: getConceptChildren
      parameters:
        - in: path
          description: The UUID of the snapshot.
          name: id
          required: true
          schema:
            type: string
            format: uuid
        - in: path
          description: A snapshot concept id.
          name: conceptId
          required: true
          schema:
            type: integer
      responses:
        200:
          description: The concepts with the specified concept as their parent
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SnapshotBuilderConceptsResponse'
        400:
          description: Bad request - invalid id, badly formed IamResourceType.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
        401:
          description: Unauthorized - snapshot does not exist or missing permissions to view.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
        403:
          description: Unauthorized - missing permissions to view snapshot builder settings.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
        404:
          description: No snapshot found that meets the request parameters.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
        500:
          description: An unexpected error occurred.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
  /api/repository/v1/snapshots/{id}/snapshotBuilder/concepts:
    get:
      tags:
        - snapshots
        - repository
      description: >
        Retrieves concepts of the specified domain and enables filtering concepts given by the searchText.
      operationId: enumerateConcepts
      parameters:
        - in: path
          description: The UUID of the snapshot.
          name: id
          required: true
          schema:
            type: string
            format: uuid
        - in: query
          description: The concept ID of the domain
          name: domainId
          required: true
          schema:
            type: integer
        - in: query
          description: User specified text to search concepts for.
          name: filterText
          schema:
            type: string
      responses:
        200:
          description: The concepts of the specified domain that match the given text.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SnapshotBuilderConceptsResponse'
        400:
          description: Bad request - invalid id, badly formed IamResourceType.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
        401:
          description: Unauthorized - snapshot does not exist or missing permissions to view.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
        403:
          description: Unauthorized - missing permissions to update snapshot builder settings.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
        404:
          description: No snapshot or domain found that meets the request parameters.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
        500:
          description: An unexpected error occurred.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'

  /api/repository/v1/snapshots/{id}/snapshotBuilder/concepts/{conceptId}/hierarchy:
    get:
      tags:
        - snapshots
        - repository
      description: >
        Given a concept ID, return the tree of concepts that contain this concept. A tree
        is represented as a list of parent IDs and their children, which are concepts.
      operationId: getConceptHierarchy
      parameters:
        - in: path
          description: The UUID of the snapshot.
          name: id
          required: true
          schema:
            type: string
            format: uuid
        - in: path
          description: A snapshot concept id.
          name: conceptId
          required: true
          schema:
            type: integer
      responses:
        200:
          description: The concepts that define the hierarchy that contain this concept.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SnapshotBuilderGetConceptHierarchyResponse'
        400:
          description: Bad request - invalid id, badly formed IamResourceType.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
        401:
          description: Unauthorized - snapshot does not exist or missing permissions to view.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
        403:
          description: Unauthorized - missing permissions to view snapshot builder settings.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
        404:
          description: No snapshot found that meets the request parameters.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
        500:
          description: An unexpected error occurred.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'

  /api/repository/v1/snapshots/{id}/snapshotBuilder/count:
    post:
      tags:
        - snapshots
        - repository
      description: >
        Given a list of snapshot builder cohorts, return the unique participant count for this snapshot.
      operationId: getSnapshotBuilderCount
      parameters:
        - in: path
          description: The UUID of the snapshot.
          name: id
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: The cohorts to count participants in
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SnapshotBuilderCountRequest'
        required: true
      responses:
        200:
          description: The concepts with the specified concept as their parent
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SnapshotBuilderCountResponse'
        401:
          description: Unauthorized - missing permissions to compute count.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
        403:
          description: Unauthorized - missing permissions to compute count.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
        404:
          description: No snapshot found that meets the request parameters.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
        500:
          description: An unexpected error occurred.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
components:
  schemas:
    TableDataType:
      type: string
      enum: [ string, boolean, bytes, date, datetime, dirref, fileref, float, float64, integer, int64, numeric, record, text, time, timestamp ]
      description: >
        The type of a column in a table.
    SqlSortDirectionAscDefault:
      type: string
      enum: [ asc, desc ]
      default: asc
      description: >
        The sort direction of a query result
    SqlSortDirectionDescDefault:
      type: string
      enum: [ asc, desc ]
      default: desc
      description: >
        The sort direction of a query result
    EnumerateSortByParam:
      type: string
      enum: [ name, description, created_date ]
      default: created_date
      description: >
        Fields datasets and snapshots can be sorted by.
    ObjectNameProperty:
      maxLength: 63
      minLength: 1
      pattern: ^[a-zA-Z0-9][_a-zA-Z0-9]*$
      type: string
      description: >
        Table names follow this pattern. This should be used for the name of any non-column object in the
        system. It enforces BigQuery naming rules except it disallows a leading underscore so we avoid collisions with
        any extra tables the DR adds. For table names, this is shorter than what BigQuery allows.
    DatasetSnapshotNameProperty:
      maxLength: 511
      minLength: 1
      pattern: ^[a-zA-Z0-9][_a-zA-Z0-9]*$
      type: string
      description: >
        Dataset and snapshot names follow this pattern. It is the same as ObjectNameProperty, but has
        a greater maxLength.
    ColumnNameProperty:
      maxLength: 63
      minLength: 1
      pattern: ^[a-zA-Z][_a-zA-Z0-9]*$
      type: string
      description: >
        Column names follow this pattern. This should be used for the name of any column in the
        system. It enforces BigQuery naming rules except it disallows a leading underscore so we avoid collisions with
        any extra columns the DR adds. This is shorter than what BigQuery allows.
    UniqueIdProperty:
      type: string
      format: uuid
      description: >
        Unique identifier for a dataset, snapshot, etc.
    ShortIdProperty:
      pattern: '[A-Za-z0-9_\\-]{22}'
      type: string
      description: >
        Unique identifier for flights, jobs, etc.
    BillingProfileRequestModel:
      required:
        - biller
        - profileName
      type: object
      properties:
        billingAccountId:
          type: string
          description: unique identifier of the billing account from Google
        profileName:
          type: string
          description: display name to be used for the profile;
        biller:
          type: string
          description: either “direct” or the reseller of the sub-account that sends
            the bill (like “on_spend”)
        description:
          type: string
          description: Free text that describes the profile
        cloudPlatform:
          $ref: '#/components/schemas/CloudPlatform'
        tenantId:
          $ref: '#/components/schemas/UniqueIdProperty'
        subscriptionId:
          $ref: '#/components/schemas/UniqueIdProperty'
        resourceGroupName:
          type: string
          description: an optional resource group name for Azure
        applicationDeploymentName:
          type: string
          description: an optional name for an application deployment for Azure
        id:
          deprecated: true
          type: string
          format: uuid
          description: >
            Deprecated: allowed for backwards compatibility.
            Recommendation: leave this unset for TDR to generate a universally unique identifier
            for your new billing profile.
    BillingProfileUpdateModel:
      required:
        - id
        - billingAccountId
        - description
      type: object
      properties:
        id:
          $ref: '#/components/schemas/UniqueIdProperty'
        billingAccountId:
          type: string
          description: Unique identifier of the billing account from Google
        description:
          type: string
          description: Free text that describes the profile
    BillingProfileModel:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/UniqueIdProperty'
        billingAccountId:
          type: string
          description: unique identifier of the billing account from Google
        profileName:
          type: string
          description: display name to be used for the profile;
        biller:
          type: string
          description: either “direct” or the reseller of the sub-account that sends
            the bill (like “on_spend”)
        description:
          type: string
          description: Free text that describes the profile
        cloudPlatform:
          $ref: '#/components/schemas/CloudPlatform'
        tenantId:
          $ref: '#/components/schemas/UniqueIdProperty'
        subscriptionId:
          $ref: '#/components/schemas/UniqueIdProperty'
        resourceGroupName:
          type: string
          description: an optional resource group name for Azure
        applicationDeploymentName:
          type: string
          description: an optional name for an application deployment for Azure
        createdDate:
          type: string
          description: Date the profile was created
        createdBy:
          type: string
          description: Identity of the user who originally created the profile
    EnumerateBillingProfileModel:
      type: object
      properties:
        total:
          type: integer
          description: Total number of billing profiles
        items:
          type: array
          items:
            $ref: '#/components/schemas/BillingProfileModel'
      description: >
        The total number of billing profiles available and a page of profiles
    DatasetModel:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/UniqueIdProperty'
        name:
          $ref: '#/components/schemas/DatasetSnapshotNameProperty'
        description:
          type: string
          description: Description of the dataset
        defaultProfileId:
          $ref: '#/components/schemas/UniqueIdProperty'
        dataProject:
          type: string
          description: Project id of the project where tabular data in BigQuery lives
        defaultSnapshotId:
          type: string
          description: Id of the auto-generated default passthru snapshot
        schema:
          $ref: '#/components/schemas/DatasetSpecificationModel'
        createdDate:
          type: string
          description: Date the dataset was created
        storage:
          type: array
          items:
            $ref: '#/components/schemas/StorageResourceModel'
        secureMonitoringEnabled:
          type: boolean
          default: false
        phsId:
          $ref: '#/components/schemas/PhsId'
        accessInformation:
          $ref: '#/components/schemas/AccessInfoModel'
        cloudPlatform:
          $ref: '#/components/schemas/CloudPlatform'
        selfHosted:
          type: boolean
          default: false
          description: denotes whether data files in the dataset are self-hosted or not
        properties:
          type: object
          description: Additional JSON metadata about the dataset (this does not need to adhere to a particular schema)
        ingestServiceAccount:
          type: string
          description: >
            Google service account which must be granted `storage.objects.get` permissions on any
            source buckets that TDR will ingest data from.
        predictableFileIds:
          type: boolean
          default: false
          description: >
            If false, random ids will be created. If true, full target path (e.g. path + name), size and md5 hash will be used

            Note: this only applies to files.  Directories still have random ids regardless of this value
        tags:
          type: array
          items:
            $ref: '#/components/schemas/Tag'
        resourceLocks:
          $ref: '#/components/schemas/ResourceLocks'
        snapshotBuilderSettings:
          $ref: '#/components/schemas/SnapshotBuilderSettings'
      description: >
        Complete definition of a dataset.
    DatasetSummaryModel:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/UniqueIdProperty'
        name:
          $ref: '#/components/schemas/DatasetSnapshotNameProperty'
        description:
          type: string
          description: Description of the dataset
        defaultProfileId:
          $ref: '#/components/schemas/UniqueIdProperty'
        createdDate:
          type: string
          description: Date the dataset was created
        storage:
          type: array
          items:
            $ref: '#/components/schemas/StorageResourceModel'
        secureMonitoringEnabled:
          type: boolean
          default: false
        cloudPlatform:
          $ref: '#/components/schemas/CloudPlatform'
        dataProject:
          type: string
          description: The google project of this dataset
        storageAccount:
          type: string
          description: The azure storage account of this dataset
        phsId:
          $ref: '#/components/schemas/PhsId'
        selfHosted:
          type: boolean
          default: false
          description: denotes whether data files in the dataset are self-hosted or not
        predictableFileIds:
          type: boolean
          default: false
          description: >
            If false, random ids will be created. If true, full target path (e.g. path + name), size and md5 hash will be used

            Note: this only applies to files.  Directories still have random ids regardless of this value
        tags:
          type: array
          items:
            $ref: '#/components/schemas/Tag'
        resourceLocks:
          $ref: '#/components/schemas/ResourceLocks'
      description: >
        Summary of a dataset.
    DatasetRequestModel:
      required:
        - defaultProfileId
        - name
        - schema
      type: object
      properties:
        name:
          $ref: '#/components/schemas/DatasetSnapshotNameProperty'
        description:
          type: string
          description: Description of the dataset
        defaultProfileId:
          $ref: '#/components/schemas/UniqueIdProperty'
        schema:
          $ref: '#/components/schemas/DatasetSpecificationModel'
        region:
          type: string
        cloudPlatform:
          $ref: '#/components/schemas/CloudPlatform'
        enableSecureMonitoring:
          type: boolean
          default: false
        phsId:
          $ref: '#/components/schemas/PhsId'
        experimentalSelfHosted:
          type: boolean
          default: false
          description: Create the dataset in self-hosted mode, where TDR does not ingest files, but rather points to
            files in their original location.
        properties:
          type: object
          description: Additional JSON metadata about the dataset (this does not need to adhere to a particular schema)
        dedicatedIngestServiceAccount:
          type: boolean
          default: true
          description: >
            This field is only relevant for GCP-backed datasets. If true, a unique service account
            will be created in the dataset's primary GCP project, registered in Terra, and used to
            facilitate ingests. If false, TDR's general service account will be used.


            The dataset's service account can be found when retrieving the dataset.  Whether it is
            dedicated or general, it must be granted `storage.objects.get` permissions on any source
            buckets that TDR will ingest data from.
            This can be done by giving the service account the "Storage Object Viewer", "Storage
            Legacy Object Reader", or "Storage Legacy Object Owner" role on the source buckets.


            TDR recommends that this be set to true:


            - A dedicated account that explicitly does not have access to other buckets is more
              secure and isolated from issues that could impact the general account.
            - Up to 2.5x speed improvements when ingesting files. TDR can bypass the costly
              permission checking of all user-specified GCP files to ingest if the dataset has a
              dedicated service account. Such accounts are unique to the dataset and ingests will
              correctly fail if they lack needed permission on the files. Otherwise, we must
              perform this check to ensure that a user cannot ingest files inaccessible to them, but
              accessible to the general TDR service account.
            - Only the dataset's dedicated account must be granted permissions on source ingest
              buckets.  When using the general account, you must also grant permissions to the Terra
              proxy user groups for any users triggering ingests.
            - A dedicated service account is less likely to encounter Google group membership quota
              violations, which is relevant if you need to authorize a large number of buckets.
        experimentalPredictableFileIds:
          type: boolean
          default: false
          description: >
            If false, random ids will be created. If true, full target path (e.g. path + name), size and md5 hash will be used

            Note: this only applies to files.  Directories still have random ids regardless of this value
        policies:
          description: User emails to add as dataset policy members.
          type: object
          properties:
            stewards:
              type: array
              items:
                type: string
            custodians:
              type: array
              items:
                type: string
            snapshotCreators:
              type: array
              items:
                type: string
        tags:
          $ref: '#/components/schemas/ResourceCreateTags'
      description: >
        Complete definition of a dataset without the id (used to create a dataset)
    DatasetPatchRequestModel:
      type: object
      properties:
        phsId:
          $ref: '#/components/schemas/PhsId'
        properties:
          type: object
          description: Additional JSON metadata about the dataset (this does not need to adhere to a particular schema)
        description:
          type: string
          description: Description of the dataset
      description: >
        A 'lite' dataset definition (used to modify supported fields of a dataset).
        Null assignments will be ignored.
    DatasetRequestAccessIncludeModel:
      type: string
      description: >
        Type of information to include in the response
      enum: [ NONE, SCHEMA, ACCESS_INFORMATION, PROFILE, PROPERTIES, DATA_PROJECT, STORAGE, SNAPSHOT_BUILDER_SETTINGS ]
    EnumerateDatasetModel:
      type: object
      properties:
        total:
          type: integer
          description: Total number of datasets
        filteredTotal:
          type: integer
          description: The number of datasets included in this enumeration
        items:
          type: array
          items:
            $ref: '#/components/schemas/DatasetSummaryModel'
        roleMap:
          type: object
          description: >
            Map of datasets to the calling user's roles.
            The key is the dataset ID and the value is a list of role names.
          additionalProperties:
            type: array
            items:
              type: string
      description: >
        The total number of datasets available that match the filter criteria and a page of summaries
    ColumnModel:
      required:
        - datatype
        - name
      type: object
      properties:
        name:
          $ref: '#/components/schemas/ColumnNameProperty'
        datatype:
          $ref: '#/components/schemas/TableDataType'
        array_of:
          type: boolean
          description: if true, make this column an array of type datatype.
          default: false
        required:
          type: boolean
          description: if true, mark this column as required
      description: one column of a table
    TableModel:
      required:
        - columns
        - name
      type: object
      properties:
        name:
          $ref: '#/components/schemas/ObjectNameProperty'
        columns:
          type: array
          items:
            $ref: '#/components/schemas/ColumnModel'
        primaryKey:
          type: array
          items:
            $ref: '#/components/schemas/ColumnNameProperty'
          description: >
            Primary key column names. Any columns listed as a primary key will be marked as required by default.
        partitionMode:
          type: string
          default: none
          enum:
            - none
            - date
            - int
        datePartitionOptions:
          $ref: '#/components/schemas/DatePartitionOptionsModel'
        intPartitionOptions:
          $ref: '#/components/schemas/IntPartitionOptionsModel'
        rowCount:
          type: integer
      description: one table in a schema
    DatePartitionOptionsModel:
      required:
        - column
      type: object
      properties:
        column:
          $ref: '#/components/schemas/ColumnNameProperty'
      description: Describes how a date partition should be configured.
    IntPartitionOptionsModel:
      required:
        - column
        - interval
        - max
        - min
      type: object
      properties:
        column:
          $ref: '#/components/schemas/ColumnNameProperty'
        min:
          type: integer
          description: >
            The smallest value to partition within the target column. Any rows with a value smaller than this will be unpartitioned.
          format: int64
        max:
          type: integer
          description: >
            The largest value to partition within the target column. Any rows with a value larger than this will be unpartitioned.
          format: int64
        interval:
          type: integer
          description: >
            The size to use when dividing the partitioning range into "buckets". (max - min) / (this value) cannot be larger than 4,000.
          format: int64
      description: Describes how an int partition should be configured.
    RelationshipTermModel:
      required:
        - column
        - table
      type: object
      properties:
        table:
          $ref: '#/components/schemas/ObjectNameProperty'
        column:
          $ref: '#/components/schemas/ColumnNameProperty'
      description: Describes a table and columns for a relationship
    RelationshipModel:
      required:
        - from
        - name
        - to
      type: object
      properties:
        name:
          minLength: 1
          type: string
        from:
          $ref: '#/components/schemas/RelationshipTermModel'
        to:
          $ref: '#/components/schemas/RelationshipTermModel'
      description: >
        One relationship between two tables. Captures a specific relationship between two tables. By naming the
        relationships, we can define assets.
    AssetTableModel:
      required:
        - columns
        - name
      type: object
      properties:
        name:
          $ref: '#/components/schemas/ObjectNameProperty'
        columns:
          type: array
          items:
            $ref: '#/components/schemas/ColumnNameProperty'
      description: >
        Used in the asset definition to describe a table that is included in the asset. This is used to define
        the view of the asset table in the snapshot. Columns can be an empty array indicating that all columns
        should be included.
    AssetModel:
      required:
        - name
        - rootColumn
        - rootTable
        - tables
      type: object
      properties:
        name:
          minLength: 1
          type: string
        tables:
          type: array
          items:
            $ref: '#/components/schemas/AssetTableModel'
        rootTable:
          $ref: '#/components/schemas/ObjectNameProperty'
        rootColumn:
          $ref: '#/components/schemas/ColumnNameProperty'
        follow:
          type: array
          items:
            $ref: '#/components/schemas/ObjectNameProperty'
      description: One asset in the data model. The table list identifies the tables
        in the asset. The rootTable and rootColumn indicate which value will be used
        as the unique identifier. The list of relationships provides the instructions
        for how to connect the tables. Asset tables have to be connected in a relationship
        hierarchy. So there cannot be two paths to the same table from the root.
    StorageResourceModel:
      type: object
      properties:
        region:
          type: string
        cloudResource:
          type: string
        cloudPlatform:
          $ref: '#/components/schemas/CloudPlatform'
      description: A model representing the cloud platform, region, and resource of a dataset's
        infrastructure asset. This is only ever returned to the user, and at this point, is not
        parsed or pased in as a post body.
    DatasetSpecificationModel:
      required:
        - tables
      type: object
      properties:
        tables:
          type: array
          items:
            $ref: '#/components/schemas/TableModel'
        relationships:
          type: array
          items:
            $ref: '#/components/schemas/RelationshipModel'
        assets:
          type: array
          items:
            $ref: '#/components/schemas/AssetModel'
      description: data model definition
    DatasetSchemaUpdateModel:
      type: object
      properties:
        description:
          type: string
        changes:
          nullable: false
          type: object
          properties:
            addTables:
              type: array
              nullable: false
              items:
                $ref: '#/components/schemas/TableModel'
            addColumns:
              type: array
              nullable: false
              items:
                $ref: '#/components/schemas/DatasetSchemaColumnUpdateModel'
            addRelationships:
              type: array
              nullable: false
              items:
                $ref: '#/components/schemas/RelationshipModel'
    DatasetSchemaColumnUpdateModel:
      type: object
      properties:
        tableName:
          type: string
          nullable: false
        columns:
          type: array
          nullable: false
          items:
            $ref: '#/components/schemas/ColumnModel'
    IngestRequestModel:
      required:
        - format
        - table
        - max_bad_records
        - max_failed_file_loads
      type: object
      properties:
        table:
          $ref: '#/components/schemas/ObjectNameProperty'
        path:
          type: string
          description: >
            cloud path to a file in a bucket accessible to data repo (e.g. gs path for GCP
            datasets or https path for Azure datasets).  Required if the format is `csv` or `json`.
            Do not specify if the ingest format is `array`
        records:
          type: array
          items:
            type: object
            description: >
              a representation of a record to ingest in the form of `{"sColumn":"string value", "nColumn":123, "lValue":["a","b"]...}`
          description: >
            an array of json metadata records to ingest
        format:
          type: string
          description: >
            format of the data to ingest.  Currently supported formats are `csv`, `json`, and `array`
            `array` indicates loading from a JSON object payload in the records field.

            Note: when ingesting from a CSV file into an Azure dataset, no string or text field may be
            larger than 8000 bytes
          enum:
            - csv
            - json
            - array
        load_tag:
          $ref: '#/components/schemas/LoadTagModel'
        profile_id:
          $ref: '#/components/schemas/UniqueIdProperty'
        max_bad_records:
          type: integer
          default: 0
          description: max number of bad records to skip; applies to all ingest formats
        max_failed_file_loads:
          type: integer
          default: 0
          description: max number of failed file loads before stopping; if -1, allow any number of errors
        ignore_unknown_values:
          type: boolean
          description: skip extra data; applies to all ingest formats
          default: true
        csv_field_delimiter:
          type: string
          description: field separator
          default: ','
        csv_quote:
          type: string
          description: quoting character
          default: '"'
        csv_skip_leading_rows:
          type: integer
          description: number of header rows to skip
        csv_allow_quoted_newlines:
          type: boolean
          default: true
        csv_null_marker:
          type: string
          default: ""
        csv_generate_row_ids:
          type: boolean
          description: Whether the data repo should generate datarepo_row_ids on CSV ingest. Defaults to true.
          default: true
        resolve_existing_files:
          type: boolean
          default: false
          description: >
            When true, the combined ingest will look for files that already exist and substitute their
            fileIds in instead of ingesting duplicate files.
        transactionId:
          type: string
          format: uuid
          description: >
            If specified, the ingested data will remain invisible to users and snapshot creation until
            the transaction in question is committed. If the transaction is rolled back, then the changes
            from this ingest and any other operations using this transaction will be undone.
        updateStrategy:
          type: string
          enum:
            - append
            - replace
            - merge
          description: >
            Approach for how to treat updates to the target table:
             * `append` (GCP, Azure) - Default: only ever insert rows, regardless of whether or not the primary key value exists
             * `replace` (GCP only) - If a primary key is present on the table, treat rows with matching primary keys
                         as updates. If duplicate IDs are found in your ingest, the ingest job
                         will fail. If your rows specify `datarepo_row_id`, it will be ignored and
                         TDR will generate new row IDs for your new records. Note: the full new
                         record must be specified.
             * `merge` (GCP only) - If a primary key is present on the table, treat rows with matching primary keys
                         as partial updates. Any fields specified will overwrite their current values
                         in the matching table row. If your rows specify `datarepo_row_id`, it will
                         be ignored and TDR will generate new row IDs for your new records. Each
                         ingest row must match exactly one table row, and no duplicate IDs should be
                         found in your ingest, otherwise the ingest job will fail.
        bulkMode:
          type: boolean
          default: false
          description: >
            If true, file ingest will be performed in bulk mode.  The tradeoff for the performance
            improvements are that:
            - the dataset will be locked exclusively
            - some safeguards can not be enforced during loads.  Given that, it's recommended that
              you use a max_failed_file_loads value of 0
            - the assumption is that file metadata must all fit into memory so configure the
              deployment accordingly
      description: >
        Request to ingest data from a file in GCS into a table in a dataset.
        The ingest source must be readable by the DR manager.
        TODO: other input forms
    IngestResponseModel:
      required:
        - path
        - row_count
        - table
      type: object
      properties:
        dataset_id:
          $ref: '#/components/schemas/UniqueIdProperty'
        dataset:
          $ref: '#/components/schemas/DatasetSnapshotNameProperty'
        table:
          $ref: '#/components/schemas/ObjectNameProperty'
        path:
          type: string
        load_tag:
          $ref: '#/components/schemas/LoadTagModel'
        row_count:
          type: integer
          description: number of rows successfully ingested
          format: int64
        bad_row_count:
          type: integer
          description: number of bad rows skipped
          format: int64
        load_result:
          $ref: '#/components/schemas/BulkLoadArrayResultModel'
      description: >
        Response from performing an ingest.
    TransactionCreateModel:
      type: object
      properties:
        description:
          type: string
          description: optional description to give your transaction
    TransactionModel:
      required:
        - id
        - created_at
        - created_by
      type: object
      properties:
        id:
          $ref: '#/components/schemas/UniqueIdProperty'
        status:
          type: string
          enum:
            - active
            - committed
            - rolled_back
        lock:
          type: string
          description: the id of the flight that is locking the transaction or empty if the transaction is not locked
        description:
          type: string
          description: the transaction's description, if one was specified
        created_at:
          type: string
          description: timestamp of transaction creation in RFC3339
        created_by:
          type: string
          description: the creator of the transaction
        terminated_at:
          type: string
          description: timestamp of transaction creation in RFC3339
        terminated_by:
          type: string
          description: the creator of the transaction
    TransactionCloseModel:
      type: object
      properties:
        mode:
          type: string
          enum:
            - commit
            - rollback
    FileLoadModel:
      required:
        - source_path
        - target_path
      type: object
      properties:
        source_path:
          type: string
          description: gs URL of the source file to load
        target_path:
          type: string
          description: >
            Full path within the dataset where the file should be placed.
            The path must start with /.
        mime_type:
          type: string
          description: >-
            A string providing the mime-type of the Data Object.
            For example, "application/json".
        profileId:
          $ref: '#/components/schemas/UniqueIdProperty'
        loadTag:
          $ref: '#/components/schemas/LoadTagModel'
        description:
          type: string
          description: A human readable description of the contents of the Data Object.
        md5:
          $ref: '#/components/schemas/Md5OverrideModel'
      description: >
        Information needed to copy a file from a source bucket into the
        dataset bucket.
        Eventually, this will include attributes of the storage including
        billing, temperature, geography, etc. But for now...
    QueryDataRequestModel:
      type: object
      properties:
        offset:
          description: The number of rows to skip when retrieving the next page
          type: integer
          default: 0
          minimum: 0
        limit:
          description: The number of rows to return for the data
          type: integer
          default: 30
          minimum: 1
          maximum: 1000
        sort:
          description: The table column to sort by
          type: string
          default: "datarepo_row_id"
        direction:
          $ref: '#/components/schemas/SqlSortDirectionAscDefault'
        filter:
          description: A SQL WHERE clause to filter the table results.
          type: string
          default: ""
    QueryColumnStatisticsRequestModel:
      type: object
      properties:
        filter:
          description: >-
            A SQL WHERE clause to filter results included in column statistics.


            For GCP array string columns, if you wanted to include all rows that contain 'value1' in column1,
            the filter clause would look like 'WHERE 'value1' IN UNNEST(column1)'. Note that "count" value
            includes all occurrences of a value including duplicates of the same value in a single array.
            i.e. if we had two rows in a table where the value for column1, row1 = ['value1', 'value1', 'value2']
            and column1, row2 = ['value1'] the count for 'value1' would be 3.
          type: string
    DatasetDataModel:
      type: object
      properties:
        result:
          type: array
          items:
            type: object
          description: Data from a dataset table
        totalRowCount:
          type: integer
        filteredRowCount:
          type: integer
      description: >
        Data from a dataset table
    SnapshotPreviewModel:
      type: object
      properties:
        result:
          type: array
          items:
            type: object
          description: Preview data of a snapshot table
        totalRowCount:
          type: integer
        filteredRowCount:
          type: integer
      description: >
        A preview of a snapshot table
    ColumnStatisticsTextModel:
      allOf:
        - $ref: '#/components/schemas/ColumnStatisticsModel'
        - type: object
          required:
            - values
          properties:
            values:
              type: array
              items:
                $ref: '#/components/schemas/ColumnStatisticsTextValue'
    ColumnStatisticsTextValue:
      type: object
      properties:
        value:
          type: string
        count:
          type: integer
    ColumnStatisticsIntModel:
      allOf:
        - $ref: '#/components/schemas/ColumnStatisticsModel'
        - type: object
          properties:
            minValue:
              type: integer
            maxValue:
              type: integer
    ColumnStatisticsDoubleModel:
      allOf:
        - $ref: '#/components/schemas/ColumnStatisticsModel'
        - type: object
          properties:
            minValue:
              type: number
              format: double
            maxValue:
              type: number
              format: double
    ColumnStatisticsModel:
      type: object
      required:
        - dataType
      properties:
        dataType:
          type: string
          description: Data type of column
    UnlockResourceRequest:
      type: object
      required:
        - lockName
      properties:
        lockName:
          description: >
            The lock id to remove. The lock name is the locking flight id.
          type: string
        forceUnlock:
          description: >
            If false, the unlock operation will fail if the locking job is still running.
            If true, the unlock operation will succeed even if the locking job is still running. Use caution with this option, as deleting a lock from a running flight could have unintended consequences.
          type: boolean
          default: false
    FileModel:
      type: object
      properties:
        fileId:
          type: string
          description: Unique id of the filesystem object within the dataset
        collectionId:
          type: string
          description: Id of the dataset or snapshot directory describing the object
        path:
          type: string
          description: full path of the file in the dataset
        size:
          type: integer
          description: >
            Always present for files - the file size in bytes
            Present for directories in snapshots - sum of sizes of objects in a directory
          format: int64
        checksums:
          type: array
          description: >
            Always present for files - checksums; May include md5 and/or crc32c.
            Present for directories in snapshots - see DRS spec for algorithm for combining checksums of
            underlying directory contents.
          items:
            $ref: '#/components/schemas/DRSChecksum'
        created:
          type: string
          description: timestamp of object creation in RFC3339
        description:
          type: string
          description: Human readable description of the file
        fileType:
          $ref: '#/components/schemas/FileModelType'
        fileDetail:
          $ref: '#/components/schemas/FileDetailModel'
        directoryDetail:
          $ref: '#/components/schemas/DirectoryDetailModel'
      description: A file or directory in the data repository
    FileModelType:
      type: string
      enum:
        - file
        - directory
    FileDetailModel:
      type: object
      properties:
        datasetId:
          type: string
          description: Id of the dataset that holds the file
        mimeType:
          type: string
        accessUrl:
          type: string
          description: URL of the file in cloud storage
        loadTag:
          $ref: '#/components/schemas/LoadTagModel'
      description: File in the data repository
    DirectoryDetailModel:
      type: object
      properties:
        enumerated:
          type: boolean
          description: >
            Indicates whether or not the directory has been enumerated. True means the directory has been enumerated.
            The contents property describes the contents. An empty array indicates and empty directory. False means
            the directory has not been enumerated. If the contents property is present, it should be ignored.
        contents:
          type: array
          description: Array of directory contents
          items:
            $ref: '#/components/schemas/FileModel'
      description: Directory in the data repository
    LoadTagModel:
      type: string
      description: >
        client-specified tag for a data or file load. If no id is specified, we use the
        string form of the job create time as the tag.
    Md5OverrideModel:
      type: string
      description: >
        A hex representation of the  md5 for the file.  If an md5 exists for the file being
        ingested, it will be validated against this value and the file's ingest will fail if the
        values do not match.  If no md5 hash is present on the file being ingested, this value
        will be stored for the file.  If this value is not specified, then the md5 from the file
        being ingested (from the cloud provider) will be used
    BulkLoadRequestModel:
      required:
        - loadControlFile
        - loadTag
        - profileId
        - maxFailedFileLoads
      type: object
      properties:
        profileId:
          $ref: '#/components/schemas/UniqueIdProperty'
        loadTag:
          $ref: '#/components/schemas/LoadTagModel'
        maxFailedFileLoads:
          type: integer
          default: 0
          description: max number of failed file loads before stopping; if -1, allow any number of errors
        loadControlFile:
          type: string
          description: >-
            gs:// path to a text file in a bucket. The file must be accessible to the DR
            Manager. Each line of the file is interpreted as the JSON form of one
            BulkLoadFileModel. For example, one line might look like
              '{ "sourcePath":"gs:/bucket/path/file", "targetPath":"/target/path/file" }'
        bulkMode:
          type: boolean
          default: false
          description: >
            If true, file ingest will be performed in bulk mode.  The tradeoff for the performance
            improvements are that:
            - the dataset will be locked exclusively
            - some safeguards can not be enforced during loads.  Given that, it's recommended that
              you use a maxFailedFileLoads value of 0
            - the assumption is that file metadata must all fit into memory so configure the
              deployment accordingly
      description: >-
        Body of a bulk file load request. This variant of a bulk load provides the set of
        files to be loaded in a file containing the JSON form of a BulkLoadFileModel.
        A summary of the load results is returned in the async response (BulkLoadResponseModel)
        Per-file details of a bulk load are always stored into the dataset tabular data store
        and can be retrieved directly from there, or via the GET .../bulk/{loadTag}
        They can be cleaned up with the DELETE .../bulk/{loadTag}
    BulkLoadArrayRequestModel:
      required:
        - loadArray
        - loadTag
        - profileId
        - maxFailedFileLoads
      type: object
      properties:
        profileId:
          $ref: '#/components/schemas/UniqueIdProperty'
        loadTag:
          $ref: '#/components/schemas/LoadTagModel'
        maxFailedFileLoads:
          type: integer
          default: 0
          description: max number of failed file loads before stopping; if -1, allow any number of errors
        loadArray:
          type: array
          description: Array files to load
          items:
            $ref: '#/components/schemas/BulkLoadFileModel'
        bulkMode:
          type: boolean
          default: false
          description: >
            If true, file ingest will be performed in bulk mode.  The tradeoff for the performance
            improvements are that:
            - the dataset will be locked exclusively
            - some safeguards can not be enforced during loads.  Given that, it's recommended that
              you use a maxFailedFileLoads value of 0
            - the assumption is that file metadata must all fit into memory so configure the
              deployment accordingly
      description: >-
        Body of a bulk file load request. This variant of a bulk load provides the set of
        files to be loaded in the body of the request. Both the summary of the load and the
        per-file details of the bulk load returned in the async response (BulkLoadArrayResponseModel)
        Per-file details of a bulk load are also stored into the dataset tabular data store
        and can be retrieved directly from there, or via the GET .../bulk/{loadTag}
        They can be cleaned up with the DELETE .../bulk/{loadTag}
    BulkLoadFileModel:
      required:
        - sourcePath
        - targetPath
      type: object
      properties:
        sourcePath:
          type: string
          description: gs URL of the source file to load
        targetPath:
          type: string
          description: >
            Full path within the dataset where the file should be placed.
            The path must start with /.
        mimeType:
          type: string
          description: >-
            A string providing the mime-type of the Data Object.
            For example, "application/json".
        description:
          type: string
          description: A human readable description of the contents of the Data Object.
        md5:
          $ref: '#/components/schemas/Md5OverrideModel'
      description: Describes one file within a bulk file load
    BulkLoadResultModel:
      type: object
      properties:
        loadTag:
          $ref: '#/components/schemas/LoadTagModel'
        jobId:
          type: string
        totalFiles:
          type: integer
        succeededFiles:
          type: integer
        failedFiles:
          type: integer
        notTriedFiles:
          type: integer
      description: Returned when the bulk file load job finishes.
    BulkLoadArrayResultModel:
      type: object
      properties:
        loadSummary:
          $ref: '#/components/schemas/BulkLoadResultModel'
        loadFileResults:
          type: array
          items:
            $ref: '#/components/schemas/BulkLoadFileResultModel'
      description: Returned when the bulk file load job finishes.
    BulkLoadFileResultModel:
      required:
        - sourcePath
        - targetPath
      type: object
      properties:
        sourcePath:
          type: string
          description: gs URL of the source file to load
        targetPath:
          type: string
          description: >
            Full path within the dataset where the file should be placed.
            The path must start with /.
        state:
          $ref: '#/components/schemas/BulkLoadFileState'
        fileId:
          type: string
          description: The fileId of the loaded file; non-null if state is SUCCEEDED
        error:
          type: string
          description: The error message if state is FAILED
      description: Describes the status result of one file within a bulk file load
    BulkLoadHistoryModel:
      required:
        - sourcePath
        - targetPath
      type: object
      properties:
        sourcePath:
          type: string
          description: gs URL of the source file to load
        targetPath:
          type: string
          description: >
            Full path within the dataset where the file should be placed.
            The path must start with /.
        state:
          $ref: '#/components/schemas/BulkLoadFileState'
        fileId:
          type: string
          description: The fileId of the loaded file; non-null if state is SUCCEEDED
        checksumCRC:
          type: string
          description: The checksum crc of the loaded file; non-null if state is SUCCEEDED
        checksumMD5:
          type: string
          description: The checksum md5 of the loaded file; non-null if state is SUCCEEDED
        error:
          type: string
          description: The error message if state is FAILED
      description: Describes metadata about a file during a bulk load
    BulkLoadHistoryModelList:
      type: object
      properties:
        total:
          type: integer
          description: Total number of results
        items:
          type: array
          items:
            $ref: '#/components/schemas/BulkLoadHistoryModel'
    BulkLoadFileState:
      type: string
      enum:
        - succeeded
        - failed
        - not_tried
        - running
    SnapshotRequestModel:
      required:
        - contents
        - name
      type: object
      properties:
        name:
          $ref: '#/components/schemas/DatasetSnapshotNameProperty'
        description:
          type: string
          description: Description of the snapshot
        consentCode:
          $ref: '#/components/schemas/ConsentCode'
        duosId:
          $ref: '#/components/schemas/DuosId'
        dataAccessControlGroups:
          type: array
          items:
            type: string
          description: >
            Add data access control groups to the snapshot. The provided user groups will be registered as a group constraint policy in Terra Policy Service, and as an auth domain in Sam.
            *** WARNING - Once this is set it cannot be modified ***
            If a snapshot has data access controls, a user must have access to the resource directly (via a policy) and belong to all of its data access control groups in order to view and export the data.
            For example, if a user is a steward of a snapshot but is not a member of its data access control groups, Sam will prevent that user from accessing the resource.
        contents:
          type: array
          items:
            $ref: '#/components/schemas/SnapshotRequestContentsModel'
        readers:
          description: >
            Deprecated -- use `policies.readers` instead. Any readers specified here will supplement
            those set in `policies.readers`.
          deprecated: true
          type: array
          items:
            type: string
        profileId:
          $ref: '#/components/schemas/UniqueIdProperty'
        properties:
          type: object
          description: Additional JSON metadata about the snapshot (this does not need to adhere to a particular schema)
        policies:
          description: User emails to add as snapshot policy members.
          type: object
          properties:
            stewards:
              type: array
              items:
                type: string
            readers:
              type: array
              items:
                type: string
            discoverers:
              type: array
              items:
                type: string
            aggregateDataReaders:
              type: array
              items:
                type: string
        globalFileIds:
          type: boolean
          default: false
          description: >
            if false, the drs ids will be in the format: v1_<snapshotid>_<fileid>
            if true, drs ids will be in the format: v2_<fileid>
        compactIdPrefix:
          $ref: '#/components/schemas/CompactIdPrefix'
        tags:
          $ref: '#/components/schemas/ResourceCreateTags'
      description: >
        Request for creating a snapshot.
        For now, the API only supports snapshots defined as a single dataset asset and
        row ids for the root table of that asset. The snapshot has exactly the tables
        and columns of the asset. An optional list of users can be provided to set as
        readers on the snapshot.
        In the future, we will need to extend this to handle cross-dataset snapshots
        from disparate assets, so we will need to support column and datatype
        mapping from asset tables to the target snapshot tables.
    SnapshotRequestContentsModel:
      required:
        - datasetName
        - mode
      type: object
      properties:
        datasetName:
          $ref: '#/components/schemas/DatasetSnapshotNameProperty'
        mode:
          type: string
          enum:
            - byAsset
            - byFullView
            - byQuery
            - byRowId
            - byRequestId
        assetSpec:
          $ref: '#/components/schemas/SnapshotRequestAssetModel'
        querySpec:
          $ref: '#/components/schemas/SnapshotRequestQueryModel'
        rowIdSpec:
          $ref: '#/components/schemas/SnapshotRequestRowIdModel'
        requestIdSpec:
          $ref: '#/components/schemas/SnapshotRequestIdModel'
      description: >
        The contents specifies the source of the data (dataset and asset)
        and the rows to include (field and rootValues).
        TODO: field will move the asset object; it is here as a stepping stone
    SnapshotRequestAssetModel:
      required:
        - assetName
        - rootValues
      type: object
      properties:
        assetName:
          $ref: '#/components/schemas/ObjectNameProperty'
        rootValues:
          type: array
          items:
            type: string
      description: >
        The datasource identifies the dataset and asset from which to source the data.
    SnapshotRequestQueryModel:
      required:
        - assetName
        - query
      type: object
      properties:
        assetName:
          $ref: '#/components/schemas/ObjectNameProperty'
        query:
          type: string
      description: >
        A specification of the query to go into a snapshot.
    SnapshotRequestRowIdModel:
      required:
        - tables
      type: object
      properties:
        tables:
          type: array
          items:
            $ref: '#/components/schemas/SnapshotRequestRowIdTableModel'
      description: >
        Identifies the list of tables + columns along with the row ids to be included in the snapshot
    SnapshotRequestRowIdTableModel:
      required:
        - columns
        - rowIds
        - tableName
      type: object
      properties:
        tableName:
          $ref: '#/components/schemas/ObjectNameProperty'
        columns:
          type: array
          items:
            $ref: '#/components/schemas/ColumnNameProperty'
        rowIds:
          type: array
          items:
            $ref: '#/components/schemas/UniqueIdProperty'
      description: >
        A specification of a table, columns, and row ids to go into a snapshot.
    SnapshotRequestIdModel:
      required:
        - snapshotRequestId
      type: object
      properties:
        snapshotRequestId:
          $ref: '#/components/schemas/UniqueIdProperty'
      description: >
        A reference to a SnapshotAccessRequest which contains a snapshot specification.
    SnapshotPatchRequestModel:
      type: object
      properties:
        consentCode:
          $ref: '#/components/schemas/ConsentCode'
        description:
          type: string
          description: Description of the snapshot
        properties:
          type: object
          description: Additional JSON metadata about the snapshot (this does not need to adhere to a particular schema)
      description: >
        A 'lite' snapshot definition (used to modify supported fields of a snapshot).
        Null assignments will be ignored.
    SnapshotRetrieveIncludeModel:
      type: string
      description: >
        Type of information to include in the response
      enum:
        - NONE
        - SOURCES
        - TABLES
        - RELATIONSHIPS
        - ACCESS_INFORMATION
        - PROFILE
        - PROPERTIES
        - DATA_PROJECT
        - CREATION_INFORMATION
        - DUOS
    SnapshotSummaryModel:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/UniqueIdProperty'
        name:
          $ref: '#/components/schemas/DatasetSnapshotNameProperty'
        description:
          type: string
          description: Description of the snapshot
        createdDate:
          type: string
          description: Date the snapshot was created
        profileId:
          $ref: '#/components/schemas/UniqueIdProperty'
        storage:
          type: array
          items:
            $ref: '#/components/schemas/StorageResourceModel'
        secureMonitoringEnabled:
          type: boolean
          default: false
        consentCode:
          $ref: '#/components/schemas/ConsentCode'
        phsId:
          $ref: '#/components/schemas/PhsId'
        cloudPlatform:
          $ref: '#/components/schemas/CloudPlatform'
        dataProject:
          type: string
          description: The google project of this snapshot
        storageAccount:
          type: string
          description: The azure storage account of this snapshot
        selfHosted:
          type: boolean
          description: Denotes whether the data files in this snapshot are self hosted or not
        globalFileIds:
          type: boolean
          default: false
          description: >
            if false, the drs ids will be in the format: v1_<snapshotid>_<fileid>
            if true, drs ids will be in the format: v2_<fileid>
        tags:
          type: array
          items:
            $ref: '#/components/schemas/Tag'
        resourceLocks:
          $ref: '#/components/schemas/ResourceLocks'
        duosId:
          $ref: '#/components/schemas/DuosId'
      description: >
        summary of snapshot
    EnumerateSnapshotModel:
      type: object
      properties:
        total:
          type: integer
          description: Total number of snapshots
        filteredTotal:
          type: integer
          description: The number of snapshots included in this enumeration
        items:
          type: array
          items:
            $ref: '#/components/schemas/SnapshotSummaryModel'
        roleMap:
          type: object
          description: >
            Map of snapshots to the calling user's roles.
            The key is the snapshot ID and the value is a list of role names.
          additionalProperties:
            type: array
            items:
              type: string
        errors:
          type: array
          description: Errors encountered which may result in a partial enumeration returned.
          items:
            $ref: '#/components/schemas/ErrorModel'
      description: >
        The total number of snapshots available that match the criteria and a page of summaries
    SnapshotIdsAndRolesModel:
      type: object
      properties:
        roleMap:
          type: object
          description: >
            Map of snapshot IDs to the calling user's roles.
            The key is the snapshot ID and the value is a list of role names.
          additionalProperties:
            type: array
            items:
              type: string
        errors:
          type: array
          description: Errors encountered which may result in a partial role map returned.
          items:
            $ref: '#/components/schemas/ErrorModel'
    TagCountResultModel:
      type: object
      properties:
        tags:
          type: array
          items:
            $ref: '#/components/schemas/TagCount'
        errors:
          type: array
          description: Errors encountered which may result in a partial tag list returned.
          items:
            $ref: '#/components/schemas/ErrorModel'
    SnapshotModel:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/UniqueIdProperty'
        name:
          $ref: '#/components/schemas/DatasetSnapshotNameProperty'
        description:
          type: string
          description: Description of the snapshot
        createdDate:
          type: string
          description: Date the snapshot was created
        consentCode:
          $ref: '#/components/schemas/ConsentCode'
        source:
          type: array
          description: >
            A singleton collection whose sole element represents the snapshot's source dataset.
          items:
            $ref: '#/components/schemas/SnapshotSourceModel'
        tables:
          type: array
          items:
            $ref: '#/components/schemas/TableModel'
        relationships:
          type: array
          items:
            $ref: '#/components/schemas/RelationshipModel'
        profileId:
          $ref: '#/components/schemas/UniqueIdProperty'
        dataProject:
          type: string
          description: Project id of the snapshot data project
        accessInformation:
          $ref: '#/components/schemas/AccessInfoModel'
        creationInformation:
          $ref: '#/components/schemas/SnapshotRequestContentsModel'
        cloudPlatform:
          $ref: '#/components/schemas/CloudPlatform'
        properties:
          type: object
          description: Additional JSON metadata about the snapshot (this does not need to adhere to a particular schema)
        duosFirecloudGroup:
          $ref: '#/components/schemas/DuosFirecloudGroupModel'
        globalFileIds:
          type: boolean
          default: false
          description: >
            if false, the drs ids will be in the format: v1_<snapshotid>_<fileid>
            if true, drs ids will be in the format: v2_<fileid>
        compactIdPrefix:
          $ref: '#/components/schemas/CompactIdPrefix'
        tags:
          type: array
          items:
            $ref: '#/components/schemas/Tag'
        resourceLocks:
          $ref: '#/components/schemas/ResourceLocks'
      description: >
        SnapshotModel returns detailed data about an existing snapshot.
    SnapshotExportResponseModel:
      type: object
      properties:
        snapshot:
          $ref: '#/components/schemas/SnapshotModel'
        validatedPrimaryKeys:
          type: boolean
        format:
          type: object
          properties:
            parquet:
              type: object
              properties:
                location:
                  type: object
                  properties:
                    tables:
                      type: array
                      items:
                        type: object
                        properties:
                          name:
                            type: string
                            description: "Name of the table exported"
                          paths:
                            type: array
                            items:
                              type: string
                              description: "path to a parquet file for a table"
                manifest:
                  type: string
                  description: "path to manifest file detailing paths to parquet files"
            workspace:
              type: object
              properties:
                namespace:
                  type: string
                  description: "Workspace namespace the snapshot was exported to"
                name:
                  type: string
                  description: "Workspace name the snapshot was exported to"
                link:
                  type: string
                  description: "Link to the workspace the snapshot was exported to"
    AccessInfoModel:
      type: object
      description: >
        How to access the metadata for a snapshot or dataset
      properties:
        bigQuery:
          $ref: '#/components/schemas/AccessInfoBigQueryModel'
        parquet:
          $ref: '#/components/schemas/AccessInfoParquetModel'
    AccessInfoBigQueryModel:
      description: >
        General information on where snapshot or dataset tabular data lives in BigQuery
      type: object
      required:
        - datasetName
        - datasetId
        - projectId
        - link
        - tables
      properties:
        datasetName:
          type: string
          description: >
            Name of the BigQuery dataset where snapshot or dataset tabular data lives
        datasetId:
          type: string
          description: >
            Unique ID of the BigQuery dataset where snapshot or dataset tabular data lives
        projectId:
          type: string
          description: >
            Project id of the project where tabular data in BigQuery lives
        link:
          type: string
          description: >
            The link to access the BigQuery dataset UI in Google Cloud console
        tables:
          type: array
          description: >
            Information on each table in the BigQuery dataset
          items:
            $ref: '#/components/schemas/AccessInfoBigQueryModelTable'
    AccessInfoBigQueryModelTable:
      type: object
      description: >
        Information on a snapshot or dataset table in a BigQuery dataset
      required:
        - name
        - id
        - sampleQuery
        - qualifiedName
      properties:
        name:
          type: string
          description: >
            The name of the BigQuery table
        id:
          type: string
          description: >
            The unique id of the BigQuery table
        qualifiedName:
          type: string
          description: >
            The fully qualified name of the BigQuery table
        link:
          type: string
          description: >
            The link to access the BigQuery table UI in Google Cloud console
        sampleQuery:
          type: string
          description: >
            An example query that can be used to select data from this table
    AccessInfoParquetModel:
      description: >
        General information on where snapshot or dataset tabular data lives in Azure
      type: object
      required:
        - datasetName
        - datasetId
        - storageAccountId
        - url
        - sasToken
        - tables
      properties:
        datasetName:
          type: string
          description: >
            Name of the Azure dataset where snapshot or dataset tabular data lives
        datasetId:
          type: string
          description: >
            Unique ID of the Azure dataset where snapshot or dataset tabular data lives
        storageAccountId:
          type: string
          description: >
            Project id of the project where tabular data in Azure lives
        url:
          type: string
          description: >
            The link to access all of the tabular data for this dataset or snapshot
        sasToken:
          type: string
          description: >
            A short lived SAS token to access all of the tabular data for this dataset
        tables:
          type: array
          description: >
            Information on each table in the Azure dataset
          items:
            $ref: '#/components/schemas/AccessInfoParquetModelTable'
    AccessInfoParquetModelTable:
      type: object
      description: >
        Information on a snapshot or dataset table in a Azure dataset
      required:
        - name
        - url
        - sasToken
      properties:
        name:
          type: string
          description: >
            The name of the dataset table
        url:
          type: string
          description: >
            The link to access the container that stores parquet files for this table
        sasToken:
          type: string
          description: >
            A short lived SAS token to access the parquet files for this table
    SnapshotSourceModel:
      required:
        - dataset
      type: object
      properties:
        dataset:
          $ref: '#/components/schemas/DatasetSummaryModel'
        datasetProperties:
          type: object
          description: Additional JSON metadata about the source dataset
        asset:
          $ref: '#/components/schemas/ObjectNameProperty'
      description: >
        SnapshotSourceModel returns data about the source for an existing snapshot
    JobModel:
      required:
        - id
        - job_status
        - status_code
      type: object
      properties:
        id:
          $ref: '#/components/schemas/ShortIdProperty'
        description:
          type: string
          description: Description of the job's flight from description flight input
            parameter
        job_status:
          type: string
          description: Status of job
          enum:
            - running
            - succeeded
            - failed
        status_code:
          type: integer
          description: HTTP code
        submitted:
          type: string
          description: Timestamp when the flight was created
        completed:
          type: string
          description: Timestamp when the flight was completed; not present if not
            complete
        class_name:
          type: string
          description: Class name of the flight
      description: >
        Status of job
    ErrorModel:
      required:
        - message
      type: object
      properties:
        message:
          type: string
        errorDetail:
          type: array
          items:
            type: string
      description: >
        Representation of an error that occurred while processing a request.
        Some errors provide error details. For example, validation of input may report several problems.
        Each of those are reported in a separate error detail.
    DeleteResponseModel:
      type: object
      properties:
        objectState:
          type: string
          enum:
            - deleted
            - not_found
      description: >
        Returns the state of the object of the deletion
    PolicyMemberRequest:
      required:
        - email
      type: object
      properties:
        email:
          type: string
      description: >
        email of user or group to add to policy
    SamPolicyModel:
      type: object
      properties:
        name:
          type: string
        members:
          type: array
          items:
            type: string
        memberPolicies:
          type: array
          items:
            $ref: '#/components/schemas/ResourcePolicyModel'
      description: >
        Describes a policy from Sam, with member policies
    PolicyModel:
      type: object
      properties:
        name:
          type: string
        members:
          type: array
          items:
            type: string
      description: >
        Describes a policy
    ResourcePolicyModel:
      type: object
      properties:
        policyEmail:
          type: string
        policyName:
          type: string
        resourceId:
          $ref: '#/components/schemas/UniqueIdProperty'
        resourceTypeName:
          type: string
    WorkspacePolicyModel:
      type: object
      properties:
        workspaceId:
          $ref: '#/components/schemas/UniqueIdProperty'
        workspaceName:
          type: string
        workspaceNamespace:
          type: string
        workspaceLink:
          type: string
        workspacePolicies:
          type: array
          items:
            $ref: '#/components/schemas/PolicyModel'
    InaccessibleWorkspacePolicyModel:
      type: object
      properties:
        workspaceId:
          $ref: '#/components/schemas/UniqueIdProperty'
        workspacePolicies:
          type: array
          items:
            $ref: '#/components/schemas/PolicyModel'
        error:
          $ref: "#/components/schemas/ErrorModel"
    AddAuthDomainResponseModel:
      type: object
      properties:
        authDomain:
          type: array
          items:
            description: The Sam user groups that define this auth domain
            type: string
    PolicyResponse:
      type: object
      properties:
        policies:
          type: array
          items:
            $ref: '#/components/schemas/PolicyModel'
        authDomain:
          type: array
          items:
            description: The Sam user groups that define this auth domain
            type: string
        workspaces:
          type: array
          items:
            $ref: '#/components/schemas/WorkspacePolicyModel'
        inaccessibleWorkspaces:
          type: array
          items:
            $ref: '#/components/schemas/InaccessibleWorkspacePolicyModel'
      description: >
        email of user or group to add to policy
    DataDeletionRequest:
      required:
        - deleteType
        - specType
      type: object
      properties:
        deleteType:
          type: string
          enum:
            - soft
        transactionId:
          type: string
          format: uuid
          description: >
            If specified, the deleted data will remain visible to users and snapshot creation until
            the transaction in question is committed. If the transaction is rolled back, then the changes
            from this delete and any other operations using this transaction will be undone.
        specType:
          type: string
          enum:
            - gcsFile
            - jsonArray
        tables:
          type: array
          items:
            $ref: '#/components/schemas/DataDeletionTableModel'
      description: >
        a container holding a specification for how to delete tabular data in one or more tables
    DataDeletionTableModel:
      required:
        - tableName
      type: object
      properties:
        tableName:
          type: string
          description: the name of a table in the dataset
        gcsFileSpec:
          $ref: '#/components/schemas/DataDeletionGcsFileModel'
        jsonArraySpec:
          $ref: '#/components/schemas/DataDeletionJsonArrayModel'
      description: >
        a specification for how to delete tabular data in one table
    DataDeletionGcsFileModel:
      required:
        - fileType
        - path
      type: object
      properties:
        fileType:
          type: string
          enum:
            - csv
        path:
          type: string
          description: a gs://path/to/a/file that can include a wildcard (*)
      description: >
        a specification of a gcs file containing row ids to delete
    DataDeletionJsonArrayModel:
      required:
        - rowIds
      type: object
      properties:
        rowIds:
          type: array
          items:
            type: string
            format: uuid
      description: >
        a specification of row ids to delete
    UserStatusInfo:
      required:
        - enabled
        - userEmail
        - userSubjectId
      type: object
      properties:
        userSubjectId:
          type: string
          description: user id
        userEmail:
          type: string
          description: user email
        enabled:
          type: boolean
          description: true if the user is enabled in ldap
      description: ""
    RepositoryStatusModel:
      required:
        - ok
        - systems
      type: object
      properties:
        ok:
          type: boolean
          description: status of this service
        systems:
          type: object
          additionalProperties:
            type: object
            properties:
              ok:
                type: boolean
              critical:
                type: boolean
              message:
                type: string
      description: Returns the status of monitored subsystems.
    RepositoryConfigurationModel:
      type: object
      properties:
        clientId:
          type: string
          description: the Oauth client id for the repository
        oidcClientId:
          type: string
          description: the Oauth client id for the OpenID Connect config for the repository
        activeProfiles:
          type: array
          description: the active profiles for this instance
          items:
            type: string
        semVer:
          type: string
          description: the semantic version of the data repository
        gitHash:
          type: string
          description: the git hash of the data repository
        terraUrl:
          type: string
          description: the url to the corresponding terra environment
        samUrl:
          type: string
          format: uri
          description: the URI of Sam this instance uses
        authorityEndpoint:
          type: string
          format: uri
          description: the URI of oauth authority for the UI to use (e.g. .well-known/openid-configuration gets appended to it)
        duosUrl:
          type: string
          format: uri
          description: the URI of DUOS this instance uses
    DrsAliasModel:
      type: object
      properties:
        aliasDrsObjectId:
          type: string
          description: the alias to a TDR DRS object ID
        tdrDrsObjectId:
          type: string
          description: the TDR DRS object ID the alias references
      description: A mapping from a user provider DRS alias to a TDR DRS object ID
    ConfigModel:
      type: object
      properties:
        name:
          type: string
          description: name of the configuration
        configType:
          type: string
          enum:
            - fault
            - parameter
            - logging
        fault:
          $ref: '#/components/schemas/ConfigFaultModel'
        parameter:
          $ref: '#/components/schemas/ConfigParameterModel'
      description: >
        There are three types of configurations: faults, parameters, and logging.
        Due to the way swagger works, we make a property for each type, but only
        the property that matches the type enumeration will be processed.
    ConfigFaultModel:
      type: object
      properties:
        enabled:
          type: boolean
          description: >
            If the fault is enabled, then is in effect. Fault points cause insert
            faults. Typical usage is that faults are disabled on system start and explicitly
            enabled by test code or via the setFault endpoint.
        faultType:
          type: string
          description: >
            A simple fault has no parameters. It is just enabled or disabled. This type of
            fault is typically used when the desired behavior of the fault is too complex
            for expression in the fault types and custom code is needed to get the right
            failure behavior.

            A counted fault is used to insert some number of faults in a pattern. See the
            ConfigFaultCountedModel for details.
          enum:
            - simple
            - counted
        counted:
          $ref: '#/components/schemas/ConfigFaultCountedModel'
      description: Fault control parameters
    ConfigFaultCountedModel:
      type: object
      properties:
        skipFor:
          type: integer
          description: number of fault tests to skip before beginning fault insertion
        insert:
          type: integer
          description: total number of times to insert the fault; -1 means insert
            forever
        rate:
          type: integer
          description: >
            insert a fault rate percent of the time. If rate is 100, the
            fault will always be inserted regardless of rate.
        rateStyle:
          type: string
          description: >
            fixed style means insert the fault; skip for rate-1; ...
            random style means randomly insert the fault with probability of 1:<rate>
          enum:
            - fixed
            - random
      description: >
        Counted fault is used to insert a fixed number of faults. A "fault test" is one
        call to the fault manager for a named fault. The skipFor lets you get the system to
        a certain stable point where you want to begin inserting faults. Insert gives the
        total number of faults to trigger. The rate gives the percentage of the time to
        insert the fault. A value of 50 would insert the fault half
        the time. A value of 20 would insert the fault 20% of the time . The rateStyle
        describes whether the fault will be fixed or random. In our 20 example, if the rate style
        is fixed, the fault would be skipped 4 times, inserted once, skipped 4 times, inserted once, etc.
        It uses integer math - you've been warned. If the rate style is random, a random number
        is generated to determine whether the fault is inserted with a probability of 0.2.
    ConfigParameterModel:
      type: object
      properties:
        value:
          type: string
          description: >
            Configuration parameters are always passed as strings and converted within
            the service. That keeps the JSON simple. Sending in specific types doesn't
            help much, because there still might be a mismatch between the type passed in
            and the type required.
      description: The value of the parameter
    ConfigGroupModel:
      type: object
      properties:
        label:
          type: string
          description: string to be logged with the settings to identify this set
        group:
          type: array
          items:
            $ref: '#/components/schemas/ConfigModel'
      description: A group of ConfigModel with a label for logging
    ConfigListModel:
      type: object
      properties:
        total:
          type: integer
          description: Total number of configs
        items:
          type: array
          items:
            $ref: '#/components/schemas/ConfigModel'
      description: Result list of configuration settings
    ConfigEnableModel:
      type: object
      properties:
        enabled:
          type: boolean
          description: whether to enable (default) or disable the fault
          default: true
      description: Control whether a fault is enabled

    UpgradeModel:
      required:
        - upgradeName
        - upgradeType
      type: object
      properties:
        upgradeName:
          type: string
          description: Unique name for the upgrade
        upgradeType:
          type: string
          description: Enumeration to allow different kinds upgrades
          enum:
            - custom
        customName:
          type: string
          description: >-
            Name of custom upgrade to launch. Only used when upgradeType is custom.
        customArgs:
          description: >-
            Array of string arguments to the custom upgrade. Only used when upgradeType is custom.
          type: array
          items:
            type: string

    UpgradeResponseModel:
      type: object
      properties:
        upgradeName:
          type: string
          description: Unique name for the upgrade
        startTime:
          type: string
          description: Timestamp the upgrade was started
        endTime:
          type: string
          description: Timestamp the upgrade completed

    CloudPlatform:
      type: string
      enum: [ gcp, azure ]
      default: gcp
      description: Cloud platforms supported by TDR.

    CompactIdPrefix:
      type: string
      description: >
        if present, the drs URIs will be rendered using the compact id format (drs://<compactIdPrefix>:<drsId>)
        instead of the original format (drs://<hostname>/<drsId>).  The format is [A-Za-z0-9._] and the prefix
        must be registered at identifiers.org
      example: drs.42

    PhsId:
      type: string
      description: PHS ID (DbGap Phenotype Study Identifer) associated with dataset
      example: phs123456

    ConsentCode:
      type: string
      description: Consent code together with PHS ID that will determine user access

    DuosId:
      type: string
      description: DUOS dataset identifier
      example: DUOS-123456

    Tag:
      type: string
      description: >
        A tag associated with a TDR resource (dataset, snapshot)
      example: a-resource-tag

    ResourceCreateTags:
      type: array
      items:
        $ref: '#/components/schemas/Tag'
      description: >
        Tags to add to the resource on its creation.  User-inputted tags will be stripped of leading
        and trailing whitespace, filtered of empty elements, and deduplicated.

    TagUpdateRequestModel:
      type: object
      properties:
        add:
          type: array
          items:
            $ref: '#/components/schemas/Tag'
          required: false
          description: >
            Tags to add to the resource.  User-inputted tags will be stripped of leading and
            trailing whitespace, filtered of empty elements, and deduplicated.  Adding tags already
            present on the resource will have no effect.
        remove:
          type: array
          items:
            $ref: '#/components/schemas/Tag'
          required: false
          description: >
            Tags to remove from the resource.  User-inputted tags will be stripped of leading and
            trailing whitespace, filtered of empty elements, and deduplicated.  Removing tags not
            present on the resource will have no effect.

    TagCount:
      type: object
      properties:
        tag:
          $ref: '#/components/schemas/Tag'
        count:
          type: integer
          description: Number of occurrences of this tag across accessible same-typed resources

    ResourceLocks:
      type: object
      description: >
        An exclusive lock on a resource may prevent other resource modifications from running
        concurrently.
      properties:
        exclusive:
          $ref: '#/components/schemas/ShortIdProperty'
        shared:
          type: array
          items:
            $ref: '#/components/schemas/ShortIdProperty'

    ##############################################################################
    ## SNAPSHOT BUILDER API STANDARD MODELS
    ## ⚠️ NOTE: ALL SNAPSHOT API MODELS ARE SUBJECT TO CHANGE
    ##############################################################################
    SnapshotBuilderSettings:
      type: object
      description: >
        ⚠️ The configuration describing how select criteria for issuing a snapshot builder request is generated
      required:
        - domainOptions
        - programDataOptions
        - featureValueGroups
        - datasetConceptSets
      properties:
        domainOptions:
          type: array
          items:
            $ref: '#/components/schemas/SnapshotBuilderDomainOption'
        programDataOptions:
          type: array
          items:
            $ref: '#/components/schemas/SnapshotBuilderProgramDataOption'
        datasetConceptSets:
          type: array
          items:
            $ref:
              '#/components/schemas/SnapshotBuilderDatasetConceptSet'

    SnapshotBuilderOption:
      type: object
      required:
        - kind
        - id
        - name
        - tableName
        - columnName
      properties:
        kind:
          type: string
          enum: [ list, range, domain ]
        name:
          type: string
        id:
          description: the ID of either the domain or program data entry
          type: integer
        tableName:
          type: string
        columnName:
          type: string
      discriminator:
        propertyName: kind
        mapping:
          list: '#/components/schemas/SnapshotBuilderProgramDataOption'
          range: '#/components/schemas/SnapshotBuilderProgramDataOption'
          domain: '#/components/schemas/SnapshotBuilderDomainOption'

    SnapshotBuilderProgramDataOption:
      allOf:
        - $ref: '#/components/schemas/SnapshotBuilderOption'
        - type: object
          properties:
            kind:
              type: string
              enum: [ list, range ]
      discriminator:
        propertyName: kind
        mapping:
          list: 'SnapshotBuilderProgramDataListOption'
          range: 'SnapshotBuilderProgramDataRangeOption'

    SnapshotBuilderProgramDataListOption:
      allOf:
        - $ref: '#/components/schemas/SnapshotBuilderProgramDataOption'
        - type: object
          properties:
            values:
              type: array
              items:
                $ref: '#/components/schemas/SnapshotBuilderProgramDataListItem'
      description: List format program data, part of a CriteriaGroup.

    SnapshotBuilderProgramDataListItem:
      type: object
      required:
        - name
        - id
      properties:
        name:
          type: string
        id:
          description: the ID of the list item in the specified table
          type: integer

    SnapshotBuilderProgramDataRangeOption:
      allOf:
        - $ref: '#/components/schemas/SnapshotBuilderProgramDataOption'
        - type: object
          properties:
            min:
              type: integer
            max:
              type: integer
      description: List format program data, part of a CriteriaGroup.

    SnapshotBuilderDatasetConceptSet:
      type: object
      description: >
        ⚠️ A concept set provided for the dataset, usually used to access tables that are not searchable as domains
      required:
        - name
      properties:
        name:
          type: string
        table:
          $ref: '#/components/schemas/SnapshotBuilderTable'

    SnapshotBuilderDomainOption:
      allOf:
        - $ref: '#/components/schemas/SnapshotBuilderOption'
        - type: object
          required:
            - root
            - conceptCount
            - participantCount
            - enumerate
          properties:
            root:
              $ref: '#/components/schemas/SnapshotBuilderConcept'
            conceptCount:
              type: integer
            participantCount:
              type: integer
            enumerate:
              $ref: '#/components/schemas/SnapshotBuilderEnumerateModel'
            rows:
              $ref: '#/components/schemas/SnapshotBuilderRowsModel'
      description: >
        ⚠️ An object describing high level information about a domain for use in the snapshot builder

    SnapshotBuilderEnumerateModel:
      type: object
      properties:
        startsWith:
          $ref: '#/components/schemas/SnapshotBuilderPrimaryTable'
        joinTables:
          description: an ordered list of tables to join to
          type: array
          items:
            $ref: '#/components/schemas/SnapshotBuilderJoinModel'

    SnapshotBuilderRowsModel:
      type: object
      properties:
        startsWith:
          $ref: '#/components/schemas/SnapshotBuilderPrimaryTable'
        joinTables:
          description: an ordered list of tables to join to
          type: array
          items:
            $ref: '#/components/schemas/SnapshotBuilderJoinModel'

    SnapshotBuilderPrimaryTable:
      type: object
      properties:
        name:
          type: string
        columnsUsed:
          type: array
          items:
            $ref: '#/components/schemas/SnapshotBuilderColumn'

    SnapshotBuilderColumn:
      type: object
      required:
        - name
      properties:
        name:
          type: string
        selectDetails:
          $ref: '#/components/schemas/SnapshotBuilderColumnSelectDetails'
        orderByDetails:
          $ref: '#/components/schemas/SnapshotBuilderColumnOrderByDirection'
        isGroupBy:
          type: boolean
        filterDetails:
          type: array
          items:
            $ref: '#/components/schemas/SnapshotBuilderColumnFilterDetails'

    SnapshotBuilderColumnSelectDetails:
      type: object
      properties:
        functionWrapper:
          type: string
        alias:
          type: string
        isDistinct:
          type: boolean

    SnapshotBuilderColumnFilterDetails:
      type: object
      required:
        - type
      properties:
        type:
          $ref: '#/components/schemas/SnapshotBuilderColumnFilterType'
        literal:
          type: string

    SnapshotBuilderColumnFilterType:
      type: string
      enum: [ LITERAL, SEARCH_TERM ]

    SnapshotBuilderColumnOrderByDirection:
      type: string
      enum: [ ASCENDING, DESCENDING ]

    SnapshotBuilderJoinModel:
      type: object
      properties:
        from:
          $ref: '#/components/schemas/SnapshotBuilderJoinTable'
        to:
          $ref: '#/components/schemas/SnapshotBuilderJoinToTable'
        leftJoin:
          type: boolean

    SnapshotBuilderJoinTable:
      type: object
      properties:
        table:
          type: string
        column:
          type: string

    SnapshotBuilderJoinToTable:
      allOf:
        - $ref: '#/components/schemas/SnapshotBuilderJoinTable'
        - type: object
          properties:
            columnsUsed:
              type: array
              items:
                $ref: '#/components/schemas/SnapshotBuilderColumn'

    SnapshotBuilderRollupModel:
      type: object
      properties:
        column:
          type: string
        join:
          $ref: '#/components/schemas/SnapshotBuilderJoinModel'

    SnapshotBuilderConceptsResponse:
      type: object
      description: >
        ⚠️ The response object for the getConcepts endpoint
      required:
        - result
      properties:
        result:
          type: array
          items:
            $ref: '#/components/schemas/SnapshotBuilderConcept'
        sql:
          type: string

    SnapshotBuilderParentConcept:
      type: object
      description: >
        ⚠️ An object describing a parent concept in the Snapshot Builder
      properties:
        parentId:
          type: integer
        children:
          type: array
          items:
            $ref: '#/components/schemas/SnapshotBuilderConcept'

    SnapshotBuilderConcept:
      type: object
      description: >
        ⚠️ An object describing a concept in the Snapshot Builder
      required:
        - id
        - name
        - hasChildren
      properties:
        id:
          type: integer
        code:
          type: string
        name:
          type: string
        count:
          type: integer
        hasChildren:
          type: boolean

    SnapshotBuilderGetConceptHierarchyResponse:
      type: object
      description: >
        ⚠️ The response object for the getConceptHierarchy endpoint
      properties:
        result:
          type: array
          items:
            $ref: '#/components/schemas/SnapshotBuilderParentConcept'

    SnapshotBuilderOutputTable:
      type: object
      description: >
        ⚠️ Describes a set of columns for a table with given name
      required:
        - name
        - columns
      properties:
        name:
          type: string
        columns:
          type: array
          items:
            type: string

    SnapshotBuilderTable:
      type: object
      description: >
        ⚠️ Describes the underlying table for a concept/value set
      required:
        - datasetTableName
        - columns
      properties:
        datasetTableName:
          type: string
        columns:
          type: array
          items:
            type: string
        primaryTableRelationship:
          type: string
        secondaryTableRelationships:
          type: array
          items:
            type: string

    EnumerateSnapshotAccessRequest:
      type: object
      description: The model for enumerated SnapshotAccessRequests.
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/SnapshotAccessRequestResponse'

    SnapshotAccessRequestResponse:
      type: object
      description: The response object for a submitted SnapshotAccessRequest.
      properties:
        id:
          $ref: '#/components/schemas/UniqueIdProperty'
        datasetId:
          $ref: '#/components/schemas/UniqueIdProperty'
        sourceSnapshotId:
          $ref: '#/components/schemas/UniqueIdProperty'
        snapshotName:
          type: string
        snapshotResearchPurpose:
          type: string
        snapshotSpecification:
          $ref: '#/components/schemas/SnapshotBuilderRequest'
        createdBy:
          type: string
        status:
          $ref: '#/components/schemas/SnapshotAccessRequestStatus'
        createdDate:
          type: string
        statusUpdatedDate:
          type: string
        flightid:
          $ref: '#/components/schemas/ShortIdProperty'
        createdSnapshotId:
          $ref: '#/components/schemas/UniqueIdProperty'


    SnapshotAccessRequestStatus:
      type: string
      enum: [ SUBMITTED, APPROVED, REJECTED ]

    SnapshotBuilderCountRequest:
      type: object
      properties:
        cohorts:
          type: array
          items:
            $ref: '#/components/schemas/SnapshotBuilderCohort'

    SnapshotBuilderCountResponse:
      type: object
      properties:
        result:
          type: object
          properties:
            total:
              type: integer
        sql:
          type: string

    SnapshotAccessRequest:
      type: object
      properties:
        sourceSnapshotId:
          type: string
          format: uuid
        name:
          type: string
        researchPurposeStatement:
          type: string
        snapshotBuilderRequest:
          $ref: '#/components/schemas/SnapshotBuilderRequest'
      description: Request for access to a snapshot.

    SnapshotBuilderRequest:
      type: object
      properties:
        cohorts:
          type: array
          items:
            $ref: '#/components/schemas/SnapshotBuilderCohort'
        outputTables:
          type: array
          items:
            $ref: '#/components/schemas/SnapshotBuilderOutputTable'
      description: Specification of cohort and participant data for a requested snapshot.

    SnapshotBuilderCohort:
      type: object
      required: [ criteriaGroups ]
      properties:
        name:
          type: string
        criteriaGroups:
          type: array
          items:
            $ref: '#/components/schemas/SnapshotBuilderCriteriaGroup'
      description: Selection of participants.

    SnapshotBuilderCriteriaGroup:
      type: object
      required: [ criteria, mustMeet, meetAll ]
      properties:
        name:
          type: string
        criteria:
          type: array
          items:
            $ref: '#/components/schemas/SnapshotBuilderCriteria'
        mustMeet:
          type: boolean
        meetAll:
          type: boolean
      description: Criteria Group specifying a Cohort.

    SnapshotBuilderCriteria:
      type: object
      required:
        - kind
        - id
      properties:
        kind:
          type: string
          enum: [ list, range, domain ]
        id:
          description: the ID of either the domain or program data entry
          type: integer
      discriminator:
        propertyName: kind
        mapping:
          list: '#/components/schemas/SnapshotBuilderProgramDataListCriteria'
          range: '#/components/schemas/SnapshotBuilderProgramDataRangeCriteria'
          domain: '#/components/schemas/SnapshotBuilderDomainCriteria'

    SnapshotBuilderProgramDataListCriteria:
      allOf:
        - $ref: '#/components/schemas/SnapshotBuilderCriteria'
        - type: object
          required:
            - values
          properties:
            values:
              type: array
              items:
                type: integer
      description: List format program data, part of a CriteriaGroup.

    SnapshotBuilderProgramDataRangeCriteria:
      allOf:
        - $ref: '#/components/schemas/SnapshotBuilderCriteria'
        - type: object
          required:
            - low
            - high
          properties:
            low:
              type: integer
            high:
              type: integer
      description: Range format program data, part of a CriteriaGroup.

    SnapshotBuilderDomainCriteria:
      allOf:
        - $ref: '#/components/schemas/SnapshotBuilderCriteria'
        - type: object
          required:
            - conceptId
          properties:
            conceptId:
              type: integer
      description: Selection of a domain concept id, part of a CriteriaGroup.

    DuosFirecloudGroupModel:
      type: object
      description: >
        A Firecloud managed group for the authorized users of a DUOS dataset.
        This group has a TDR service account as its sole administrator.
        Only those DUOS datasets known to TDR will have Firecloud groups for their users.
      properties:
        id:
          $ref: '#/components/schemas/UniqueIdProperty'
        duosId:
          $ref: '#/components/schemas/DuosId'
        firecloudGroupName:
          description: Name of Firecloud managed group
          type: string
          example: DUOS-123456-users
        firecloudGroupEmail:
          description: Email of Firecloud managed group
          type: string
          example: DUOS-123456-users@dev.test.firecloud.org
        createdBy:
          description: The TDR service account which created this group
          type: string
          example: jade-k8-sa@broad-jade-dev.iam.gserviceaccount.com
        created:
          description: Time when TDR created this group
          type: string
        lastSynced:
          description: Last time TDR queried DUOS for its dataset's authorized users
          type: string
    SnapshotLinkDuosDatasetResponse:
      type: object
      description: >
        The DUOS Firecloud groups unlinked from and/or linked to the snapshot.
      properties:
        unlinked:
          $ref: '#/components/schemas/DuosFirecloudGroupModel'
        linked:
          $ref: '#/components/schemas/DuosFirecloudGroupModel'
    DuosFirecloudGroupsSyncResponse:
      type: object
      description: >
        The outcome of a batch sync of all DUOS Firecloud groups.
      properties:
        synced:
          description: >
            The Firecloud groups whose contents were successfully updated.
          type: array
          items:
            $ref: '#/components/schemas/DuosFirecloudGroupModel'
        errors:
          description: >
            Errors which may have interfered in the syncing for select DUOS Firecloud groups.
          type: array
          items:
            $ref: '#/components/schemas/ErrorModel'

    ##############################################################################
    ## DRS STANDARD MODELS
    ##############################################################################
    DRSChecksum:
      required:
        - checksum
      type: object
      properties:
        checksum:
          type: string
          description: The hex-string encoded checksum for the data
        type:
          type: string
          description: >-
            The digest method used to create the checksum. If left unspecified md5
            will be assumed.

            possible values:
            md5                # most blob stores provide a checksum using this
            etag               # multipart uploads to blob stores
            sha256
            sha512
    DRSObject:
      required:
        - checksums
        - id
        - self_uri
        - size
      type: object
      properties:
        id:
          type: string
          description: An identifier unique to this `Object`.
        name:
          type: string
          description: >-
            A string that can be used to name an `Object`.
            This string is made up of uppercase and lowercase letters, decimal digits, hypen, period, and underscore [A-Za-z0-9.-_].
            See http://pubs.opengroup.org/onlinepubs/9699919799/basedefs/V1_chap03.html#tag_03_282[portable filenames].
        self_uri:
          type: string
          description: >-
            A drs:// URI, as defined in the DRS documentation, that tells clients how to access this object.
            The intent of this field is to make DRS objects self-contained, and therefore easier for clients to store and pass around.
          example: drs://drs.example.org/314159
        size:
          type: integer
          description: >-
            For blobs, the blob size in bytes.
            For bundles, the cumulative size, in bytes, of items in the `contents` field.
          format: int64
        created_time:
          type: string
          description: Timestamp of object creation in RFC3339.
        updated_time:
          type: string
          description: Timestamp of `Object` update in RFC3339, identical to create
            timestamp in systems that do not support updates.
        version:
          type: string
          description: >-
            A string representing a version.
            (Some systems may use checksum, a RFC3339 timestamp, or an incrementing version number.)
        mime_type:
          type: string
          description: A string providing the mime-type of the `Object`.
          example: application/json
        checksums:
          minItems: 1
          type: array
          description: >-
            The checksum of the `Object`. At least one checksum must be provided.
            For blobs, the checksum is computed over the bytes in the blob.

            For bundles, the checksum is computed over a sorted concatenation of the checksums of its top-level contained objects (not recursive, names not included). The list of checksums is sorted alphabetically (hex-code) before concatenation and a further checksum is performed on the concatenated checksum value.

            For example, if a bundle contains blobs with the following checksums:
            md5(blob1) = 72794b6d
            md5(blob2) = 5e089d29

            Then the checksum of the bundle is:
            md5( concat( sort( md5(blob1), md5(blob2) ) ) )
            = md5( concat( sort( 72794b6d, 5e089d29 ) ) )
            = md5( concat( 5e089d29, 72794b6d ) )
            = md5( 5e089d2972794b6d )
            = f7a29a04
          items:
            $ref: '#/components/schemas/DRSChecksum'
        access_methods:
          minItems: 1
          type: array
          description: >-
            The list of access methods that can be used to fetch the `Object`.
            Required for single blobs; optional for bundles.
          items:
            $ref: '#/components/schemas/DRSAccessMethod'
        contents:
          type: array
          description: >-
            If not set, this `Object` is a single blob.
            If set, this `Object` is a bundle containing the listed `ContentsObject` s (some of which may be further nested).
          items:
            $ref: '#/components/schemas/DRSContentsObject'
        description:
          type: string
          description: A human readable description of the `Object`.
        aliases:
          type: array
          description: A list of strings that can be used to find other metadata about
            this `Object` from external metadata sources. These aliases can be used
            to represent secondary accession numbers or external GUIDs.
          items:
            type: string
    DRSAccessURL:
      required:
        - url
      type: object
      properties:
        url:
          type: string
          description: A fully resolvable URL that can be used to fetch the actual
            object bytes.
        headers:
          type: array
          description: An optional list of headers to include in the HTTP request
            to `url`. These headers can be used to provide auth tokens required to
            fetch the object bytes.
          example:
            Authorization: Basic Z2E0Z2g6ZHJz
          items:
            type: string
    DRSAccessMethod:
      required:
        - type
      type: object
      properties:
        type:
          type: string
          description: Type of the access method.
          enum:
            - s3
            - gs
            - ftp
            - gsiftp
            - globus
            - htsget
            - https
            - file
        access_url:
          $ref: '#/components/schemas/DRSAccessURL'
        access_id:
          type: string
          description: >-
            An arbitrary string to be passed to the `/access` path to get an `AccessURL`.
            This must be unique per object. Note that at least one of `access_url` and `access_id` must be provided.
        region:
          type: string
          description: Name of the region in the cloud service provider that the object
            belongs to.
          example: us-east-1
        authorizations:
          $ref: '#/components/schemas/DRSAuthorizations'
    DRSError:
      type: object
      properties:
        msg:
          type: string
          description: A detailed error message.
        status_code:
          type: integer
          description: The integer representing the HTTP status code (e.g. 200, 404).
      description: An object that can optionally include information about the error.
    DRSServiceInfo:
      required:
        - version
      type: object
      properties:
        version:
          type: string
          description: Service version
        title:
          type: string
          description: Service name
        description:
          type: string
          description: Service description
        contact:
          type: object
          properties: {}
          description: Maintainer contact info
        license:
          type: object
          properties: {}
          description: License information for the exposed API
      description: Useful information about the running service.
    DRSContentsObject:
      required:
        - name
      type: object
      properties:
        name:
          type: string
          description: A name declared by the bundle author that must be used when
            materialising this object, overriding any name directly associated with
            the object itself. The name must be unique with the containing bundle.
            This string is made up of uppercase and lowercase letters, decimal digits,
            hypen, period, and underscore [A-Za-z0-9.-_]. See http://pubs.opengroup.org/onlinepubs/9699919799/basedefs/V1_chap03.html#tag_03_282[portable
            filenames].
        id:
          type: string
          description: A DRS identifier of an `Object` (either a single blob or a
            nested bundle). If this ContentsObject is an object within a nested bundle,
            then the id is optional. Otherwise, the id is required.
        drs_uri:
          type: array
          description: A list of full DRS identifier URI paths that may be used to
            obtain the object. These URIs may be external to this DRS instance.
          example: drs://example.com/ga4gh/drs/v1/objects/{object_id}
          items:
            type: string
        contents:
          type: array
          description: If this ContentsObject describes a nested bundle and the caller
            specified "?expand=true" on the request, then this contents array must
            be present and describe the objects within the nested bundle.
          items:
            $ref: '#/components/schemas/DRSContentsObject'
    DRSPassportRequestModel:
      required:
        - passports
      type: object
      properties:
        expand:
          type: boolean
          example: false
          default: false
          description: >-
            If false and the object_id refers to a bundle, then the ContentsObject array
            contains only those objects directly contained in the bundle. That is, if the
            bundle contains other bundles, those other bundles are not recursively
            included in the result.

            If true and the object_id refers to a bundle, then the entire set of objects
            in the bundle is expanded. That is, if the bundle contains other bundles,
            then those other bundles are recursively expanded and included in the result.
            Recursion continues through the entire sub-tree of the bundle.

            If the object_id refers to a blob, then the query parameter is ignored.
        passports:
          type: array
          items:
            type: string
            example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJnYTRnaF9wYXNzcG9ydF92MSI6W119.JJ5rN0ktP0qwyZmIPpxmF_p7JsxAZH6L6brUxtad3CM
          description: the encoded JWT GA4GH Passport that contains embedded Visas.  The overall JWT is signed as are the individual Passport Visas.
    DRSAuthorizations:
      type: object
      properties:
        supported_types:
          type: array
          items:
            type: string
            enum:
              - None
              - BasicAuth
              - BearerAuth
              - PassportAuth
          description: >-
            An Optional list of supported authorization types. More than one can be supported and tried in sequence.
            Defaults to `None` if empty or missing.
        passport_auth_issuers:
          type: array
          items:
            type: string
          description: >-
            If authorizations contain `PassportAuth`, this is a required list of visa issuers
            (as found in a visa's `iss` claim) that may authorize access to this object. The caller must
            only provide passports that contain visas from this list. It is strongly recommended that the caller
            validate that it is appropriate to send the requested passport/visa to the DRS server to mitigate attacks
            by malicious DRS servers requesting credentials they should not have.
        bearer_auth_issuers:
          type: array
          items:
            type: string
          description: >-
            If authorizations contain `BearerAuth`, this is an optional list of issuers that may authorize access to this object.
            The caller must provide a token from one of these issuers. If this is empty or missing it is assumed that the caller knows
            which token to send via other means. It is strongly recommended that the caller
            validate that it is appropriate to send the requested token to the DRS server to mitigate attacks
            by malicious DRS servers requesting credentials they should not have.
    #################################################################
    #####                  JOURNAL MODELS
    #################################################################
    JournalEntryModel:
      required:
        - id
        - resourceKey
        - user
        - entryType
        - resourceType
        - className
        - methodName
        - when
      type: object
      properties:
        id:
          $ref: '#/components/schemas/UniqueIdProperty'
        resourceKey:
          $ref: '#/components/schemas/UniqueIdProperty'
        user:
          type: string
          description: the email address of the user who performed this action
        resourceType:
          $ref: '#/components/schemas/IamResourceTypeEnum'
        className:
          type: string
          description: the class name that made this journal entry
        methodName:
          type: string
          description: the method name that made this journal entry
        entryType:
          type: string
          enum: [ CREATE, UPDATE, DELETE ]
          description: the type of journal entry created
        when:
          type: string
          description: timestamp of journal entry creation
        mutation:
          type: object
          description: An optional map included with the journal entry.  Entries in the map ending with .json are entries that likely contain JSON encoded strings.
        note:
          type: string
          description: A note about the journal entry
    IamResourceTypeEnum:
      type: string
      enum: [ DATASET, DATASNAPSHOT, SPEND_PROFILE, DATAREPO, WORKSPACE, SNAPSHOT_BUILDER_REQUEST ]
      description: >
        The type of journal entries to return.  DATASET maps to Dataset, DATASNAPSHOT maps to Snapshot, SPEND_PROFILE maps to Profile.  DATAREPO and WORKSPACE are not implemented at this time but are included in the list for completeness.
  parameters:
    Id:
      name: id
      in: path
      description: A UUID to used to identify an object in the repository
      required: true
      schema:
        type: string
        format: uuid
    SnapshotPolicyName:
      name: policyName
      in: path
      description: The relevant policy
      required: true
      schema:
        type: string
        enum:
          - steward
          - reader
          - discoverer
          - aggregateDataReader
    DatasetPolicyName:
      name: policyName
      in: path
      description: The relevant policy
      required: true
      schema:
        type: string
        enum:
          - steward
          - custodian
          - snapshot_creator
    ProfilePolicyName:
      name: policyName
      in: path
      description: The relevant policy
      required: true
      schema:
        type: string
        enum:
          - owner
          - user
    FileId:
      name: fileid
      in: path
      description: A file id
      required: true
      schema:
        type: string
    Path:
      name: path
      in: query
      description: URL-encoded full path to a file or directory
      required: true
      schema:
        type: string
    Depth:
      name: depth
      in: query
      description: Enumeration depth; -1 means fully expand; 0 means no expansion;
        1..N expands that many subdirectories
      schema:
        type: integer
        default: 0
    LoadTag:
      name: loadTag
      in: path
      description: a load tag
      required: true
      schema:
        type: string
    AssetId:
      name: assetid
      in: path
      description: An asset name
      required: true
      schema:
        type: string
    TransactionId:
      name: transactionId
      in: path
      description: A UUID to used to identify a transaction in a dataset
      required: true
      schema:
        type: string
        format: uuid
  securitySchemes:
    oidc:
      type: oauth2
      flows:
        authorizationCode:
          authorizationUrl: /oauth2/authorize
          tokenUrl: /oauth2/token
          scopes:
            openid: open id authorization
            email: email authorization
            profile: profile authorization
