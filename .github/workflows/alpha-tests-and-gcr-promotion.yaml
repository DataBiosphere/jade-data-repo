name: DataRepo Alpha Tests
env:
  K8_CLUSTER: jade-master-us-central1
  GOOGLE_APPLICATION_CREDENTIALS: /tmp/alpha-test-runner.json
  GOOGLE_CLOUD_PROJECT: terra-datarepo-alpha
  GOOGLE_CLOUD_DATA_PROJECT: terra-datarepo-alpha-data
  JADE_USER_EMAIL: alpha-tdr-user@notarealemail.org
  TDR_LOG_APPENDER: Console-Standard
on:
  # Jenkins will kick this job off manually after Alpha is deployed
  workflow_dispatch: {}
jobs:
  alpha-tests:
    runs-on: ubuntu-latest
    steps:
    - name: "Checkout jade-data-repo and latest tags"
      uses: actions/checkout@v3
      with:
        fetch-depth: 0
    - name: "Setup Java 17"
      uses: actions/setup-java@v3
      with:
        distribution: 'temurin'
        java-version: '17'
        cache: 'gradle'
    - name: "Fetch current alpha version from /configuration endpoint"
      id: configuration
      run: |
        alpha_version_api=$(curl -s -X GET "https://data.alpha.envs-terra.bio/configuration" -H "accept: application/json" | jq -r '.semVer|rtrimstr("-SNAPSHOT")')
        echo "alpha_version_api=${alpha_version_api}" >> $GITHUB_OUTPUT
        echo "Alpha Version: $alpha_version_api"
    - name: "Checkout tag for DataBiosphere/jade-data-repo"
      if: github.ref == 'refs/heads/develop'
      run: |
        git checkout ${{ steps.configuration.outputs.alpha_version_api }}
        echo "Current branch is ${{ github.ref }}"
    - name: "Import Vault Secrets for Alpha Test Runner Service Account"
      uses: hashicorp/vault-action@v2.5.0
      with:
        url: ${{ secrets.VAULT_ADDR }}
        method: approle
        roleId: ${{ secrets.ALPHA_ROLE_ID }}
        secretId: ${{ secrets.ALPHA_SECRET_ID }}
        secrets: |
          secret/dsde/datarepo/alpha/test-runner-sa key | B64_APPLICATION_CREDENTIALS ;
    - name: "Perform IAM policy cleanup for Alpha"
      run: |
        # write vault tokens
        base64 --decode <<< ${B64_APPLICATION_CREDENTIALS} > ${GOOGLE_APPLICATION_CREDENTIALS}

        gcloud auth activate-service-account --key-file ${GOOGLE_APPLICATION_CREDENTIALS}

        ./tools/cleanupPolicies.sh ${GOOGLE_CLOUD_DATA_PROJECT}
    - name: "Import Vault Secrets for Dev Service Account"
      uses: hashicorp/vault-action@v2.5.0
      with:
        url: ${{ secrets.VAULT_ADDR }}
        method: approle
        roleId: ${{ secrets.ROLE_ID }}
        secretId: ${{ secrets.SECRET_ID }}
        secrets: |
          secret/dsde/datarepo/dev/sa-key-b64 sa | B64_APPLICATION_CREDENTIALS ;
    - name: "Add jade-k8-sa credentials to run as Harry Potter test users"
      env:
        # note: hack to overwrite the env var to grab the dev credentials too
        GOOGLE_APPLICATION_CREDENTIALS: /tmp/jade-dev-account.json
      run: |
        # write vault tokens
        base64 --decode <<< ${B64_APPLICATION_CREDENTIALS} > ${GOOGLE_APPLICATION_CREDENTIALS}
    - name: "Build and run Test Runner"
      run: |
        cd ${GITHUB_WORKSPACE}/${workingDir}
        echo "Building Data Repo client library"
        export TEST_RUNNER_SERVER_SPECIFICATION_FILE="alpha.json"
        export TEST_RUNNER_BILLING_PROFILE_NAME="stest1"
        ENABLE_SUBPROJECT_TASKS=1 ./gradlew :datarepo-client:clean :datarepo-client:assemble
        cd ${GITHUB_WORKSPACE}/${workingDir}/datarepo-clienttests
        export ORG_GRADLE_PROJECT_datarepoclientjar=$(find .. -type f -name "datarepo-client*.jar")
        echo "ORG_GRADLE_PROJECT_datarepoclientjar = ${ORG_GRADLE_PROJECT_datarepoclientjar}"


        echo "[INFO] Running spotless and spotbugs"
        ./gradlew spotlessCheck
        ./gradlew spotbugsMain

        outputDir="/tmp/TestRunnerResults"
        echo "Output directory set to: $outputDir"

        echo "[INFO] Running tests"
        ./gradlew runTest --args="suites/AlphaSmokeTests.json $outputDir" ||
          (echo "Running tests FAILED" &&
          ./gradlew uploadResults --args="BroadJadeDev.json $outputDir" &&
          return 1)
        echo "[INFO] Running test suite SUCCEEDED"

        echo "[INFO] Collecting measurements"
        ./gradlew collectMeasurements --args="AlphaSmokeTests.json $outputDir" ||
          (echo "Collecting measurements FAILED" &&
          ./gradlew uploadResults --args="BroadJadeDev.json $outputDir" &&
          return 1)
        echo "[INFO] Collecting measurements SUCCEEDED"

        echo "[INFO] Uploading results"
        ./gradlew uploadResults --args="BroadJadeDev.json $outputDir"
        echo "[INFO] Uploading results SUCCEEDED"
        cd ${GITHUB_WORKSPACE}/${workingDir}
    - name: "Notify Slack"
      if: always()
      uses: broadinstitute/action-slack@v3.15.0
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      with:
        status: ${{ job.status }}
        fields: job,repo,message,author,took
        channel: "#jade-alerts"
        username: "Data Repo tests"
        text: "Alpha Tests"
    - name: "Notify QA Slack"
      if: always()
      uses: broadinstitute/action-slack@v3.15.0
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      with:
        status: ${{ job.status }}
        channel: "#dsde-qa"
        username: "Data Repo tests"
        text: "Alpha Tests"
        fields: job,repo,message,author,took
