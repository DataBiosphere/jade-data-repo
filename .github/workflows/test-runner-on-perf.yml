name: Update Perf Env and Run Nightly Test Runner Tests
env:
  GOOGLE_APPLICATION_CREDENTIALS: /tmp/jade-dev-account.json
  GOOGLE_SA_CERT: /tmp/jade-dev-account.pem
  GOOGLE_CLOUD_PROJECT: broad-jade-perf
  GOOGLE_CLOUD_DATA_PROJECT: broad-jade-perf-data2
  TEST_RUNNER_SERVER_SPECIFICATION_FILE: perf.json
  GOOGLE_ZONE: us-central1
  K8_CLUSTER: jade-master-us-central1
on:
  workflow_dispatch: {}
  #schedule:
  #  - cron: '0 4 * * *' # run at 4 AM UTC, 12PM EST.
jobs:
  test-runner-perf:
    runs-on: ubuntu-latest
    steps:
      - name: "Checkout jade-data-repo develop branch"
        uses: actions/checkout@v2
        with:
          ref: develop
      - name: "Hit perf and get githash"
        run: |
          CurrentVersion=$(curl -X GET "https://jade-perf.datarepo-perf.broadinstitute.org/configuration" -H "accept: application/json" | jq -r '.gitHash')
          echo "Current Version: $CurrentVersion"
          LatestVersion=$(curl -X GET "https://jade.datarepo-dev.broadinstitute.org/configuration" -H "accept: application/json" | jq -r '.gitHash')
          echo "Latest Version: $LatestVersion"
          echo ::set-env name=LATEST_GITHASH::"$NewVersion"
      - name: "Import Vault dev secrets"
        uses: hashicorp/vault-action@v2.0.1
        with:
          url: ${{ secrets.VAULT_ADDR }}
          method: approle
          roleId: ${{ secrets.ROLE_ID }}
          secretId: ${{ secrets.SECRET_ID }}
          secrets: |
            secret/dsde/datarepo/dev/sa-key-b64 sa | B64_APPLICATION_CREDENTIALS ;
      - name: "Configure credentials"
        run: |
          # write vault tokens
          base64 --decode <<< ${B64_APPLICATION_CREDENTIALS} > ${GOOGLE_APPLICATION_CREDENTIALS}
          jq -r .private_key ${GOOGLE_APPLICATION_CREDENTIALS} > ${GOOGLE_SA_CERT}

          gcloud auth activate-service-account --key-file ${GOOGLE_APPLICATION_CREDENTIALS}

          # configure integration prerequisites
          gcloud config set compute/zone ${GOOGLE_ZONE} --quiet
          gcloud config set project ${GOOGLE_CLOUD_PROJECT} --quiet
          gcloud auth configure-docker --quiet
          #echo 'Set google sdk to SA user'
          if [[ -n "${K8_CLUSTER}" ]]; then
            gcloud container clusters get-credentials ${K8_CLUSTER} --zone ${GOOGLE_ZONE}
          fi
      - name: "Whitelist Runner IP"
        run: |
          CUR_IPS=$(gcloud container clusters describe ${K8_CLUSTER} --format json | \
            jq -r '[.masterAuthorizedNetworksConfig.cidrBlocks[] | .cidrBlock]')
            RUNNER_IP=$(curl 'https://api.ipify.org/?format=text' | xargs printf '[ "%s/32" ]')
            NEW_IPS=$(printf '%s\n' $CUR_IPS $RUNNER_IP | jq -s -r 'add | unique | join(",")')
          for i in {1..5}; do
            if gcloud container clusters update ${K8_CLUSTER} \
              --enable-master-authorized-networks \
              --master-authorized-networks ${NEW_IPS}; then
              echo "Successful whitelist"
              break
            else
              echo "Failed to whitelist - Retrying"
              sleep 15
              if [ i == 5 ]; then
                echo "Failed to whitelist - Terminating"
                exit 1
              fi
            fi
          done
      - name: 'Checkout datarepo-helm-definitions repo'
        uses: actions/checkout@v2
        with:
          repository: 'broadinstitute/datarepo-helm-definitions'
          token: ${{ secrets.HELM_REPO_TOKEN }}
          path: datarepo-helm-definitions
      - name: "Update perf image tag with gitHash"
        uses: docker://mikefarah/yq:latest
        with:
          args: yq w -i datarepo-helm-definitions/perf/datarepo-api.yaml image.tag ${LATEST_GITHASH}
      - name: "Create datarepo-helm-definition pull request with updated perf image tag"
        uses: broadinstitute/create-pull-request@v3 # forked from peter-evans/create-pull-request
        id: perfTagPR
        with:
          token: ${{ secrets.HELM_REPO_TOKEN }}
          path: datarepo-helm-definitions
          commit-message: "Perf Datarepo version update: ${LATEST_GITHASH}"
          committer: datarepo-bot <noreply@github.com>
          author: ${{ github.actor }} <${{ github.actor }}@users.noreply.github.com>
          title: "Perf Datarepo version update: ${LATEST_GITHASH}"
          branch: "version-update-${LATEST_GITHASH}"
          body: |
            Update versions in perf env to reflect image tag ${LATEST_GITHASH}.
            *Note: This PR was opened by the [update-env GitHub Actions workflow](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}).*
          labels: "broadbot,datarepo,automerge"
      - name: "Merge datarepo-helm-definition pull request"
        run: |
          cd ${GITHUB_WORKSPACE}/${workingDir}/datarepo-helm-definitions
          git checkout master
          git config pull.rebase false
          if git rev-parse --verify origin/version-update-${LATEST_GITHASH}; then
            git merge origin/version-update-${LATEST_GITHASH}
            git branch -d version-update-${LATEST_GITHASH}
            git push
          else
            echo "Branch version-update-${LATEST_GITHASH} not found."
          fi
          cd ${GITHUB_WORKSPACE}/${workingDir}
      - name: "Setup helmfile"
        uses: broadinstitute/setup-helmfile@v0.5.0 #Forked from mamezou-tech/setup-helmfile
      - name: "Apply updates to Perf yaml"
        run: |
          helmfile --version
          cd ${GITHUB_WORKSPACE}/${workingDir}/datarepo-helm-definitions/perf
          helmfile apply
          cd ${GITHUB_WORKSPACE}/${workingDir}
      - name: "Wait for Perf Cluster to come back up with correct version"
        run: |
          PerfVersion=$(curl -X GET "https://jade-perf.datarepo-perf.broadinstitute.org/configuration" -H "accept: application/json" | jq -r '.gitHash')
          echo "Perf Version: $PerfVersion"
      - name: "Build and run Test Runner"
        run: |
          cd ${GITHUB_WORKSPACE}/${workingDir}
          echo "Building Data Repo client library"
          ENABLE_SUBPROJECT_TASKS=1 ./gradlew :datarepo-client:clean :datarepo-client:assemble
          cd ${GITHUB_WORKSPACE}/${workingDir}/datarepo-clienttests
          export ORG_GRADLE_PROJECT_datarepoclientjar=$(find .. -type f -name "datarepo-client*.jar")
          echo "ORG_GRADLE_PROJECT_datarepoclientjar = ${ORG_GRADLE_PROJECT_datarepoclientjar}"

          echo "Running test suite"
          ./gradlew runTest --args="suites/NightlyPerfWorkflow.json tmp/TestRunnerResults"

          echo "Collecting measurements"
          ./gradlew collectMeasurements --args="NightlyPerfWorkflow.json tmp/TestRunnerResults"

          echo "Uploading results"
          ./gradlew uploadResults --args="BroadJadeDev.json tmp/TestRunnerResults"

          cd ${GITHUB_WORKSPACE}/${workingDir}
      - name: "Clean whitelisted Runner IP"
        if: always()
        run: |
          # export the original IP list so it can be restored during cleanup
          CUR_IPS=$(gcloud container clusters describe ${K8_CLUSTER} --format json | \
            jq -r '[ .masterAuthorizedNetworksConfig.cidrBlocks[] | .cidrBlock ]')
          RUNNER_IP=$(curl 'https://api.ipify.org/?format=text' | xargs printf '[ "%s/32" ]')
          RUNNER_IP=$(echo ${RUNNER_IP}| jq -r '.[0]')
          RESTORE_IPS=$(printf '%s\n' $CUR_IPS | jq -r --arg RUNNER_IP "$RUNNER_IP" '. - [ $RUNNER_IP ] | unique | join(",")')
          # restore the original list of authorized IPs if they exist
          gcloud container clusters update ${K8_CLUSTER} \
            --enable-master-authorized-networks \
            --master-authorized-networks ${RESTORE_IPS}
