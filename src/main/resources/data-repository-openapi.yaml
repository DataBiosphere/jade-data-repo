# [dd] It seems like openapi 3.0 is released, but swagger-codegen does not yet support it.
# We should move to 3.0 when swagger-codegen is ready.

swagger: '2.0'
info:
  title: Data Repository API
  description: |
    This document defines the REST API for Data Repository.
    **Status: design in progress**

    There are three top-level endpoints (besides some used by swagger):
     * /       - generated by swagger: swagger API page that provides this documentation and a live UI for submitting REST requests
     * /status - provides the operational status of the service
     * /api    - is the authenticated and authorized Data Repository API

    The overall API (/api) currently supports one interface:
     * Repository - a general and default interface for initial setup

    The API endpoints are organized by interface. Each interface is separately versioned.

    ## Notes on Naming
    All of the reference items are suffixed with "Model". Those names are used as the class names in the generated Java code.
    It is helpful to distinguish these model classes from other related classes, like the DAO classes and the operation classes.

    ## Editing and debugging
    I have found it best to edit this file directly to make changes and then use the swagger-editor to validate. The errors
    out of swagger-codegen are not that helpful. In the swagger-editor, it gives you nice errors and links to the place in
    the YAML where the errors are.

    But... the swagger-editor has been a bit of a pain for me to run. I tried the online website and was not able to load my
    YAML. Instead, I run it locally in a docker container, like this:
    ```
    docker pull swaggerapi/swagger-editor
    docker run -p 9090:8080 swaggerapi/swagger-editor
    ```
    Then navigate to localhost:9090 in your browser.

    I have not been able to get the file upload to work. It is a bit of a PITA, but I copy-paste the source code,
    replacing what is in the editor. Then make any fixes. Then copy-paste the resulting, valid file back into our source
    code. Not elegant, but easier than playing detective with the swagger-codegen errors.

    This might be something about my browser or environment, so give it a try yourself and see how it goes.

  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html

  version: "0.1.0"

basePath: /
produces:
  - application/json

##########################################################################################
# AUTH
##########################################################################################
security:
  - googleoauth:
    - openid
    - email
    - profile

securityDefinitions:
  googleoauth:
    type: oauth2
    authorizationUrl: 'https://accounts.google.com/o/oauth2/auth'
    flow: implicit
    scopes:
      openid: open id authorization
      email: email authorization
      profile: profile authorization

##########################################################################################
# PATHS
##########################################################################################
paths:

  ## Unauthenticated endpoints

  '/status':
    get:
      description: |
        Returns the operational status of the service
      operationId: serviceStatus
      tags:
        - unauthenticated
      responses:
        200:
          description: service is fine
        500:
          description: service is broken
      security: []

  ## Repository Interface

  '/api/repository/v1/datasets':
    get:  ## enumerate
      description: |
        Returns a list of all of the datasets the caller has access to
      operationId: enumerateDatasets
      tags:
      - repository
      parameters:
      - in: query
        name: offset
        type: integer
        default: 0
        description: The number of items to skip before starting to collect the result set.
      - in: query
        name: limit
        type: integer
        description: The numbers of items to return.
        default: 10
      responses:
        200:
          description: List of datasets
          schema:
            type: array
            items:
              $ref: '#/definitions/DatasetSummaryModel'

    post:
      description: Create a new dataset
      operationId: createDataset
      tags:
      - repository
      consumes:
      - application/json
      parameters:
      - in: body
        name: dataset
        description: Dataset to create
        schema:
          $ref: '#/definitions/DatasetRequestModel'
      responses:
        202:
          description: Job status of dataset creation job & url for polling in the response header
          schema:
            $ref: '#/definitions/JobModel'
          headers:
            location:
              type: string
              description: url for the job polling
        200:
          description: Redirect for dataset suNccessful creation
          schema:
            $ref: '#/definitions/JobModel'
          headers:
            location:
              type: string
              description: url for the job result
        400:
          description: Bad request - invalid name, badly formed
          schema:
            $ref: '#/definitions/ErrorModel'
        403:
          description: No permission to create datasets
          schema:
            $ref: '#/definitions/ErrorModel'
        409:
          description: Dataset with this name already exists
          schema:
            $ref: '#/definitions/ErrorModel'


  '/api/repository/v1/datasets/{id}':
    get:  ## retrieve
      description: Retrieve a dataset by id
      operationId: retrieveDataset
      tags:
      - repository
      parameters:
        - $ref: '#/parameters/Id'
      responses:
        200:
          description: Dataset
          schema:
            $ref: '#/definitions/DatasetModel'
        400:
          description: Bad request - invalid id, badly formed
          schema:
            $ref: '#/definitions/ErrorModel'
        403:
          description: No permission to see dataset
          schema:
            $ref: '#/definitions/ErrorModel'
        404:
          description: Not found - dataset id does not exist
          schema:
            $ref: '#/definitions/ErrorModel'

    delete: ## delete
      description: Delete a dataset by id
      operationId: deleteDataset
      tags:
      - repository
      parameters:
        - $ref: '#/parameters/Id'
      responses:
        202:
          description: Job status of dataset creation job & url for polling in the response header
          schema:
            $ref: '#/definitions/JobModel'
          headers:
            location:
              type: string
              description: url for the job polling
        200:
          description: Redirect for dataset successful creation
          schema:
            $ref: '#/definitions/JobModel'
          headers:
            location:
              type: string
              description: url for the job result
        400:
          description: Bad request - invalid id, badly formed
          schema:
            $ref: '#/definitions/ErrorModel'
        403:
          description: No permission to delete dataset
          schema:
            $ref: '#/definitions/ErrorModel'
        404:
          description: Not found - dataset id does not exist
          schema:
            $ref: '#/definitions/ErrorModel'
        409:
          description: Dataset in use?
          schema:
            $ref: '#/definitions/ErrorModel'

  '/api/repository/v1/datasets/{id}/policies':
    get:  ## retrieve
      description: Retrieve the read and discover policies for the dataset
      operationId: retrieveDatasetPolicies
      tags:
      - repository
      parameters:
      - $ref: '#/parameters/Id'
      responses:
        200:
          description: Policy
          schema:
            $ref: '#/definitions/PolicyResponse'
        400:
          description: Bad request - invalid id, badly formed
          schema:
            $ref: '#/definitions/ErrorModel'
        403:
          description: No permission to see policies
          schema:
            $ref: '#/definitions/ErrorModel'
        404:
          description: Not found - dataset id does not exist
          schema:
            $ref: '#/definitions/ErrorModel'


  '/api/repository/v1/datasets/{id}/policies/{policyName}/members':
    post:  ## retrieve
      description: Adds a member to the specified policy for the dataset
      operationId: addDatasetPolicyMember
      tags:
      - repository
      consumes:
      - application/json
      parameters:
      - in: body
        name: policyMember
        description: Dataset to create
        schema:
          $ref: '#/definitions/PolicyMemberRequest'
      - $ref: '#/parameters/Id'
      - $ref: '#/parameters/PolicyName'
      responses:
        200:
          description: PolicyResponse
          schema:
            $ref: '#/definitions/PolicyResponse'
        400:
          description: Bad request - invalid id, badly formed
          schema:
            $ref: '#/definitions/ErrorModel'
        403:
          description: No permission to update policies
          schema:
            $ref: '#/definitions/ErrorModel'
        404:
          description: Not found - dataset id does not exist
          schema:
            $ref: '#/definitions/ErrorModel'


  '/api/repository/v1/datasets/{id}/policies/{policyName}/members/{memberEmail}':
    delete:  ## retrieve
      description: Adds a member to the specified policy for the dataset
      operationId: deleteDatasetPolicyMember
      tags:
      - repository
      parameters:
      - $ref: '#/parameters/Id'
      - $ref: '#/parameters/PolicyName'
      - name: memberEmail
        description: The email of the user to remove
        required: true
        in: path
        type: string
      responses:
        200:
          description: PolicyResponse
          schema:
            $ref: '#/definitions/PolicyResponse'
        400:
          description: Bad request - invalid id, badly formed
          schema:
            $ref: '#/definitions/ErrorModel'
        403:
          description: No permission to update policies
          schema:
            $ref: '#/definitions/ErrorModel'
        404:
          description: Not found - dataset id does not exist
          schema:
            $ref: '#/definitions/ErrorModel'

  '/api/repository/v1/studies':
    get:  ## enumerate
      description: |
        Returns a list of all of the studies the caller has access to
      operationId: enumerateStudies
      tags:
      - repository
      parameters:
      - in: query
        name: offset
        type: integer
        default: 0
        description: The number of studies to skip before when retrieving the next page
      - in: query
        name: limit
        type: integer
        description: The numbers studies to retrieve and return.
        default: 10
      responses:
        200:
          description: List of studies
          schema:
            type: array
            items:
              $ref: '#/definitions/StudySummaryModel'

    post:
      description: Create a new study
      operationId: createStudy
      tags:
      - repository
      consumes:
      - application/json
      parameters:
      - in: body
        name: study
        description: Study to create
        schema:
          $ref: '#/definitions/StudyRequestModel'
      responses:
        201:
          description: Study created successfully and a summary is returned
          schema:
            $ref: '#/definitions/StudySummaryModel'
        400:
          description: Bad request - duplicate name, invalid name, badly formed schema
          schema:
            $ref: '#/definitions/ErrorModel'
        403:
          description: No permission to create studies
          schema:
            $ref: '#/definitions/ErrorModel'

  '/api/repository/v1/studies/{id}':
    get:  ## retrieve
      description: Retrieve a study by id
      operationId: retrieveStudy
      tags:
      - repository
      parameters:
      - $ref: '#/parameters/Id'
      responses:
        200:
          description: Study
          schema:
            $ref: '#/definitions/StudyModel'
        400:
          description: Bad request - invalid id, badly formed
          schema:
            $ref: '#/definitions/ErrorModel'
        403:
          description: No permission to see study
          schema:
            $ref: '#/definitions/ErrorModel'
        404:
          description: Not found - study id does not exist
          schema:
            $ref: '#/definitions/ErrorModel'

    delete: ## delete
      description: Delete a study by id
      operationId: deleteStudy
      tags:
      - repository
      parameters:
      - $ref: '#/parameters/Id'
      responses:
        200:
          description: Successful deletion
          schema:
            $ref: '#/definitions/DeleteResponseModel'
        400:
          description: Bad request - invalid id, badly formed
          schema:
            $ref: '#/definitions/ErrorModel'
        403:
          description: No permission to delete study
          schema:
            $ref: '#/definitions/ErrorModel'
        404:
          description: Not found - study id does not exist
          schema:
            $ref: '#/definitions/ErrorModel'
        409:
          description: Study in use by at least one dataset
          schema:
            $ref: '#/definitions/ErrorModel'

  '/api/repository/v1/studies/{id}/ingest':
    post:
      description: Ingest data into a study table
      operationId: ingestStudy
      tags:
      - repository
      consumes:
      - application/json
      parameters:
      - $ref: '#/parameters/Id'
      - in: body
        name: ingest
        description: Ingest request
        schema:
          $ref: '#/definitions/IngestRequestModel'
      responses:
        202:
          description: Job status of ingest job & url for polling in the response header
          schema:
            $ref: '#/definitions/JobModel'
          headers:
            location:
              type: string
              description: url for the job polling
        200:
          description: Redirect for ingest complete
          schema:
            $ref: '#/definitions/JobModel'
          headers:
            location:
              type: string
              description: url for the job result
        400:
          description: Bad request - invalid ingest request, badly formed
          schema:
            $ref: '#/definitions/ErrorModel'
        403:
          description: No permission to ingest
          schema:
            $ref: '#/definitions/ErrorModel'
        409:
          description: No idea if we will generate this error code
          schema:
            $ref: '#/definitions/ErrorModel'

  '/api/repository/v1/register/user':
    get:
      description: |
        Returns whether the user is registered with terra
      operationId: user
      tags:
      - repository
      responses:
        200:
          description: User Info
          schema:
            $ref: '#/definitions/UserStatusInfo'

  '/api/repository/v1/studies/{id}/file':
    post:
      description: Ingest one file into the study file system
      operationId: ingestFile
      tags:
      - repository
      consumes:
      - application/json
      parameters:
      - $ref: '#/parameters/Id'
      - in: body
        name: ingestFile
        description: Ingest file request
        schema:
          $ref: '#/definitions/FileLoadModel'
      responses:
        202:
          description: Job status of ingest job & url for polling in the response header
          schema:
            $ref: '#/definitions/JobModel'
          headers:
            location:
              type: string
              description: url for the job polling
        200:
          description: Redirect for ingest complete
          schema:
            $ref: '#/definitions/JobModel'
          headers:
            location:
              type: string
              description: url for the job result
        400:
          description: Bad request - invalid ingest request, badly formed
          schema:
            $ref: '#/definitions/ErrorModel'
        403:
          description: No permission to ingest
          schema:
            $ref: '#/definitions/ErrorModel'
        409:
          description: No idea if we will generate this error code
          schema:
            $ref: '#/definitions/ErrorModel'

  '/api/repository/v1/studies/{id}/file/{fileid}':
    get:
      description: Lookup metadata for one file
      operationId: lookupfile
      tags:
      - repository
      consumes:
      - application/json
      parameters:
      - $ref: '#/parameters/Id'
      - $ref: '#/parameters/FileId'
      responses:
        200:
          description: File exists
          schema:
            $ref: '#/definitions/FileModel'
        400:
          description: Bad request - not sure this will ever happen
          schema:
            $ref: '#/definitions/ErrorModel'
        403:
          description: No permission
          schema:
            $ref: '#/definitions/ErrorModel'
        404:
          description: Not found - file id does not exist
          schema:
            $ref: '#/definitions/ErrorModel'
        409:
          description: No idea if we will generate this error code
          schema:
            $ref: '#/definitions/ErrorModel'

    delete: ## delete
      description: |
        Hard delete of a file by id. The file is deleted even if it is in use by
        a study. Subsequent lookups will give not found errors.
      operationId: deleteFile
      tags:
      - repository
      parameters:
      - $ref: '#/parameters/Id'
      - $ref: '#/parameters/FileId'
      responses:
        202:
          description: Job status of dataset creation job & url for polling in the response header
          schema:
            $ref: '#/definitions/JobModel'
          headers:
            location:
              type: string
              description: url for the job polling
        200:
          description: Redirect for dataset successful creation
          schema:
            $ref: '#/definitions/JobModel'
          headers:
            location:
              type: string
              description: url for the job result
        400:
          description: Bad request - invalid id, badly formed
          schema:
            $ref: '#/definitions/ErrorModel'
        403:
          description: No permission to delete file
          schema:
            $ref: '#/definitions/ErrorModel'
        404:
          description: Not found - study id or file id does not exist
          schema:
            $ref: '#/definitions/ErrorModel'

  '/api/repository/v1/jobs':
    # '/api/repository/v1/jobs?offset=100&limit=50':
    get:  ## enumerate
      description: |
        Returns a list of all of the jobs the caller has access to
      operationId: enumerateJobs
      tags:
      - repository
      parameters:
      - in: query
        name: offset
        type: integer
        default: 0
        description: The number of items to skip before starting to collect the result set.
      - in: query
        name: limit
        type: integer
        description: The numbers of items to return.
        default: 10
      responses:
        200:
          description: List of jobs
          schema:
            type: array
            items:
              $ref: '#/definitions/JobModel'

  '/api/repository/v1/jobs/{id}':
    get:  ## retrieve
      description: Retrieve a job's status by id
      operationId: retrieveJob
      tags:
      - repository
      parameters:
      - $ref: '#/parameters/Id'
      responses:
        202:
          description: Job status
          schema:
            $ref: '#/definitions/JobModel'
          headers:
            location:
              type: string
              description: url for the job polling
        200:
          description: Redirect for object successful creation
          schema:
            $ref: '#/definitions/JobModel'
          headers:
            location:
              type: string
              description: url for the job result
        400:
          description: Bad request - invalid id, badly formed
          schema:
            $ref: '#/definitions/ErrorModel'
        403:
          description: No permission to see job
          schema:
            $ref: '#/definitions/ErrorModel'
        404:
          description: Not found - job id does not exist
          schema:
            $ref: '#/definitions/ErrorModel'


  '/api/repository/v1/jobs/{id}/result':
    get:  ## retrieve
      description: Retrieve a job's result by id
      operationId: retrieveJobResult
      tags:
      - repository
      parameters:
      - $ref: '#/parameters/Id'
      responses: ## successful responses return the type of model specified by the job
        default:
          description: Successful responses return the type of model specified by the job; otherwise, ErrorModel
          schema:
            type: object

##########################################################################################
# PARAMETERS
##########################################################################################
parameters:
  Id:
    name: id
    description: A study or dataset id
    required: true
    type: string
    in: path
  PolicyName:
    name: policyName
    in: path
    description: The relevant policy
    required: true
    type: string
    enum:
      - read
      - discover

  FileId:
    name: fileid
    description: A file id
    required: true
    type: string
    in: path

##########################################################################################
# DEFINITIONS
##########################################################################################
definitions:

  ## Identifiers ##

  ObjectNameProperty:
    description: |
      Table, column, and relationship names follow this pattern. This should be used for the name of any object in the
      system. It enforces BigQuery naming rules except it disallows a leading underscore so we avoid collisions with
      any extra columns the DR adds. For table names, this is shorter than what BigQuery allows.
    type: string
    pattern: '^[a-zA-Z0-9][_a-zA-Z0-9]*$' ## TODO this will support any unicode string
    minLength: 1
    maxLength: 63

  UniqueIdProperty:
    description: |
      Unique identifier for a study, dataset, etc.
    type: string
    pattern: '^[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}' ## eg:957117a6-79fd-4f2c-a63c-f6dc84a94d9c



  ## Study ##

  StudyModel:
    description: |
      Complete definition of a study.
    type: object
    required:
    - id
    - name
    - schema
    - createdDate
    properties:
      id:
        $ref: '#/definitions/UniqueIdProperty'
      name:
        $ref: '#/definitions/ObjectNameProperty'
      description:
        type: string
        description: Description of the study
      defaultDatasetId:
        type: string
        description: Id of the auto-generated default passthru dataset
      schema:
        $ref: '#/definitions/StudySpecificationModel'
      createdDate:
        type: string
        description: Date the study was created

  StudySummaryModel:
    description: |
      Summary of a study.
    type: object
    required:
    - id
    - name
    - createdDate
    properties:
      id:
        $ref: '#/definitions/UniqueIdProperty'
      name:
        $ref: '#/definitions/ObjectNameProperty'
      description:
        type: string
        description: Description of the study
      createdDate:
        type: string
        description: Date the study was created

  StudyRequestModel:
    description: |
      Complete definition of a study without the id (used to create a study)
    type: object
    required:
    - name
    - schema
    properties:
      name:
        $ref: '#/definitions/ObjectNameProperty'
      description:
        type: string
        description: Description of the study
      schema:
        $ref: '#/definitions/StudySpecificationModel'

  ## Schema Definitions ##

  ColumnModel:
    description: one column of a table
    type: object
    required:
      - name
      - datatype
    properties:
      name:
        $ref: '#/definitions/ObjectNameProperty'

      ## TODO: Use an enumeration for the datatype. We will probably want to support some kind of extended datatyping
      ## to process references to UCSC and/or UChicago schema parts. Whatever GA4GH standardizes.

      datatype:
        type: string
      array_of:
        type: boolean
        default: false
        description: if true, make this column an array of type datatype.

  TableModel:
    description: one table in a schema
    type: object
    required:
      - name
      - columns

    properties:
      name:
        $ref: '#/definitions/ObjectNameProperty'

      columns:
        type: array
        items:
          $ref: '#/definitions/ColumnModel'

  RelationshipTermModel:
    description: Describes a table, columns and cardinality for a relationship
    type: object
    required:
      - table
      - column
      - cardinality
    properties:
      table:
        $ref: '#/definitions/ObjectNameProperty'
      column:
        type: string
      cardinality:
        type: string
        enum:
          - one
          - many
          - zero_or_one
          - one_or_many
          - zero_or_many

  RelationshipModel:
    description: |
      One relationship between two tables. Captures a specific relationship between two tables. By naming the
      relationships, we can define assets. It should allow us to use the cardinality of the relationships to form
      proper views (INNER vs OUTER) and implement data validation.
    type: object
    required:
      - name
      - from
      - to
    properties:
      name:
        $ref: '#/definitions/ObjectNameProperty'
      from:
        $ref: '#/definitions/RelationshipTermModel'
      to:
        $ref: '#/definitions/RelationshipTermModel'

  AssetTableModel:
    description: |
      Used in the asset definition to describe a table that is included in the asset. This is used to define
      the view of the asset table in the dataset. Columns can be an empty array indicating that all columns
      should be included.
    type: object
    required:
      - name
      - columns
    properties:
      name:
        $ref: '#/definitions/ObjectNameProperty'
      columns:
        type: array
        items:
          $ref: '#/definitions/ObjectNameProperty'

  AssetModel:
    description: One asset in the data model. The table list identifies the tables in the asset.
          The rootTable and rootColumn indicate which value will be used as the unique identifier.
          The list of relationships provides the instructions for how to connect the tables.
          Asset tables have to be connected in a relationship hierarchy. So there cannot be
          two paths to the same table from the root.
    required:
      - name
      - tables
      - rootTable
      - rootColumn
    properties:
      name:
        $ref: '#/definitions/ObjectNameProperty'
      tables:
        type: array
        items:
          $ref: '#/definitions/AssetTableModel'
      rootTable:
        $ref: '#/definitions/ObjectNameProperty'
      rootColumn:
        $ref: '#/definitions/ObjectNameProperty'
      follow:
        type: array
        items:
          $ref: '#/definitions/ObjectNameProperty'

  StudySpecificationModel:
    description: data model definition
    type: object
    required:
      - tables
      - assets
    properties:
      tables:
        type: array
        items:
          $ref: '#/definitions/TableModel'
      relationships:
        type: array
        items:
          $ref: '#/definitions/RelationshipModel'
      assets:
        type: array
        items:
          $ref: '#/definitions/AssetModel'

  ## Study Ingest Definitions ##
  IngestRequestModel:
    description: |
      Request to ingest data from a file in GCS into a table in a study.
      The ingest source must be readable by the DR manager.
      TODO: other input forms
    type: object
    required:
      - table
      - path
      - format
    properties:
      table:
        $ref: '#/definitions/ObjectNameProperty'
        description: name of the target table for ingest
      path:
        type: string
        description: gs path to a file in a bucket accessible to data repo
      format:
        type: string
        enum:
          - csv
          - json
      load_tag:
        type: string
        description: |
          client-specified tag for this load. If no id is specified, we use the
          string form of the job create time as the tag.
      max_bad_records:
        type: integer
        default: 0
        description: max number of bad records to skip; applies to JSON and CSV
      ignore_unknown_values:
        type: boolean
        default: true
        description: skip extra data; applies to JSON and CSV
      csv_field_delimiter:
        type: string
        default: ','
        description: field separator
      csv_quote:
        type: string
        default: '"'
        description: quoting character
      csv_skip_leading_rows:
        type: integer
        default: 0
        description: number of header rows to skip
      csv_allow_quoted_newlines:
        type: boolean
        default: true
      csv_null_marker:
        type: string
        default: ''

  IngestResponseModel:
    description: |
      Response from performing an ingest.
    type: object
    required:
      - table
      - path
      - row_count
    properties:
      study_id:
        $ref: '#/definitions/UniqueIdProperty'
        description: unique id of the study
      study:
        $ref: '#/definitions/ObjectNameProperty'
        description: name of the study
      table:
        $ref: '#/definitions/ObjectNameProperty'
        description: name of the target table for ingest
      path:
        type: string
      load_tag:
        type: string
      row_count:
        type: integer
        format: int64
        description: number of rows successfully ingested
      bad_row_count:
        type: integer
        format: int64
        description: number of bad rows skipped

  ## File Definitions ##
  FileLoadModel:
    description: |
      Information needed to copy a file from a source bucket into the
      study bucket.
      Eventually, this will include attributes of the storage including
      billing, temperature, geography, etc. But for now...
    type: object
    required:
      - source_path
      - target_path
    properties:
      source_path:
        type: string
        description: gs URL of the source file to load
      target_path:
        type: string
        description: |
          Full path within the study where the file should be placed.
          The path must start with /.
      mime_type:
        type: string
        description: |-
          A string providing the mime-type of the Data Object.
          For example, "application/json".
      description:
        type: string
        description: |-
          A human readable description of the contents of the Data Object.

  # File, Checksum, and AccessMethod are cut and pasted from the DRS spec.
  FileModel:
      type: object
      required: ['id', 'size', 'created', 'checksums', 'access_methods']
      properties:
        id:
          type: string
          description: |-
            An identifier unique to this Data Object.
        name:
          type: string
          description: |-
            A string that can be optionally used to name a Data Object.
        size:
          type: integer
          format: int64
          description: |-
            The computed size in bytes.
        created:
          type: string
          format: date-time
          description: |-
            Timestamp of object creation in RFC3339.
        updated:
          type: string
          format: date-time
          description: |-
            Timestamp of update in RFC3339, identical to create timestamp in systems
            that do not support updates.
        version:
          type: string
          description: |-
            A string representing a version.
        mime_type:
          type: string
          description: |-
            A string providing the mime-type of the Data Object.
            For example, "application/json".
        checksums:
          type: array
          items:
            $ref: '#/definitions/Checksum'
          description: |-
            The checksum of the Data Object. At least one checksum must be provided.
        access_methods:
          type: array
          minItems: 1
          items:
            $ref: '#/definitions/AccessMethod'
          description: |-
            The list of access methods that can be used to access the Data Object.
        description:
          type: string
          description: |-
            A human readable description of the contents of the Data Object.
        aliases:
          type: array
          items:
            type: string
          description: |-
            A list of strings that can be used to find this Data Object.

  Checksum:
      type: object
      required: ['checksum']
      properties:
        checksum:
          type: string
          description: |-
            The hex-string encoded checksum for the Data.
        type:
          type: string
          description: |-
            The digest method used to create the checksum. If left unspecified md5
            will be assumed.
            possible values:
            md5                # most blob stores provide a checksum using this
            multipart-md5      # multipart uploads provide a specialized tag in S3
            sha256
            sha512

  AccessMethod:
      type: object
      required:
        - type
      properties:
        type:
          type: string
          enum:
          - s3
          - gs
          - ftp
          - sftp
          - http
          - https
          - nfs
          - globus
          - aspera
          - gsiftp
          - local
          description: >-
            Type of the access method.
        access_url:
          type: string
          description: >-
            A fully resolvable URL string that can be used to fetch the actual object bytes.
            Note that at least one of access_url and access_id must be provided.
        access_id:
          type: string
          description: >-
            An arbitrary string to be passed to the /access path to fetch an access_url.
            This must be unique per object.
            Note that at least one of access_url and access_id must be provided.
        region:
          type: string
          description: >-
            OPTIONAL
            Name of the region in the cloud service provider that the object belongs to.
          example:
            us-east-1

  ## Dataset Definitions ##

  DatasetRequestModel:
    description: |
      Request for creating a dataset.
      For now, the API only supports datasets defined as a single study asset and
      row ids for the root table of that asset. The dataset has exactly the tables
      and columns of the asset.
      In the future, we will need to extend this to handle cross-study datasets
      from disparate assets, so we will need to support column and datatype
      mapping from asset tables to the target dataset tables.
    type: object
    required:
      - name
      - contents
    properties:
      name:
        $ref: '#/definitions/ObjectNameProperty'
      description:
        type: string
        description: Description of the dataset
      contents:
        type: array
        items:
          $ref: '#/definitions/DatasetRequestContentsModel'

  DatasetRequestContentsModel:
    description: |
      The contents specifies the source of the data (study and asset)
      and the rows to include (field and rootValues).
      TODO: field will move the asset object; it is here as a stepping stone
    type: object
    required:
      - source
      - rootValues
    properties:
      source:
        $ref: '#/definitions/DatasetRequestSourceModel'
      rootValues:
        type: array
        items:
          type: string

  DatasetRequestSourceModel:
    description: |
      The datasource identifies the study and asset from which to source the data.
    type: object
    required:
      - studyName
      - assetName
    properties:
      studyName:
        $ref: '#/definitions/ObjectNameProperty'
      assetName:
        $ref: '#/definitions/ObjectNameProperty'

  DatasetSummaryModel:
    description: |
      summary of dataset
    type: object
    required:
    - name
    - createdDate
    properties:
      id:
        $ref: '#/definitions/UniqueIdProperty'
      name:
        $ref: '#/definitions/ObjectNameProperty'
      description:
        type: string
        description: Description of the dataset
      createdDate:
        type: string
        description: Date the dataset was created

  DatasetModel:
    description: |
      DatasetModel returns detailed data about an existing dataset.
    type: object
    required:
      - id
      - name
      - source
      - createdDate
    properties:
      id:
        $ref: '#/definitions/UniqueIdProperty'
      name:
        $ref: '#/definitions/ObjectNameProperty'
      description:
        type: string
        description: Description of the dataset
      createdDate:
        type: string
        description: Date the dataset was created
      source:
        type: array
        items:
          $ref: '#/definitions/DatasetSourceModel'
      tables:
        type: array
        items:
          $ref: '#/definitions/TableModel'

  DatasetSourceModel:
    description: |
      DatasetSourceModel returns data about the source for an existing dataset
    type: object
    required:
      - study
      - asset
    properties:
      study:
        $ref: '#/definitions/StudySummaryModel'
      asset:
        $ref: '#/definitions/ObjectNameProperty'

  JobModel:
    description: |
      Status of job
    type: object
    required:
    - id
    - job_status
    - status_code
    properties:
      id:
        $ref: '#/definitions/UniqueIdProperty'
      description:
        type: string
        description: Description of the job's flight from description flight input parameter
      job_status:
        description: Status of job
        type: string
        enum:
          - running
          - succeeded
          - failed
      status_code:
        description: HTTP code
        type: integer
      submitted:
        type: string
        description: Timestamp when the flight was created
      completed:
        type: string
        description: Timestamp when the flight was completed; not present if not complete

  ErrorModel:
    description: |
      representation of an error that occurred while processing a request
    type: object
    properties:
      message:
        type: string
      stackTrace:
        type: string

  DeleteResponseModel:
    description: |
      Returns the state of the object of the deletion
    type: object
    properties:
      objectState:
        type: string
        enum:
          - deleted
          - not_found

  PolicyMemberRequest:
    description: |
      email of user or group to add to policy
    type: object
    required:
      - email
    properties:
      email:
        type: string

  PolicyModel:
    description: |
      Describes a policy
    type: object
    properties:
      name:
        type: string
      members:
        type: array
        items:
          type: string

  PolicyResponse:
    description: |
      email of user or group to add to policy
    type: object
    properties:
      policies:
        type: array
        items:
          $ref: '#/definitions/PolicyModel'

  UserStatusInfo:
    description: ''
    required:
    - userSubjectId
    - userEmail
    - enabled
    properties:
      userSubjectId:
        type: string
        description: user id
      userEmail:
        type: string
        description: user email
      enabled:
        type: boolean
        description: true if the user is enabled in ldap

