/*
 * Data Repository API
 * This document defines the REST API for Data Repository. **Status: design in progress**  There are four top-level endpoints (besides some used by swagger):  * /swagger-ui.html - generated by swagger: swagger API page that provides this documentation and a live UI for      submitting REST requests  * /status - provides the operational status of the service  * /api    - is the authenticated and authorized Data Repository API  * /ga4gh/drs/v1 - is a transcription of the Data Repository Service API  The overall API (/api) currently supports two interfaces:  * Repository - a general and default interface for initial setup, managing ingest and repository metadata  * Resource - an interface for managing billing accounts and resources  The API endpoints are organized by interface. Each interface is separately versioned.  ## Notes on Naming All of the reference items are suffixed with \"Model\". Those names are used as the class names in the generated Java code. It is helpful to distinguish these model classes from other related classes, like the DAO classes and the operation classes.  ## Editing and debugging I have found it best to edit this file directly to make changes and then use the swagger-editor to validate. The errors out of swagger-codegen are not that helpful. In the swagger-editor, it gives you nice errors and links to the place in the YAML where the errors are.  But... the swagger-editor has been a bit of a pain for me to run. I tried the online website and was not able to load my YAML. Instead, I run it locally in a docker container, like this: ``` docker pull swaggerapi/swagger-editor docker run -p 9090:8080 swaggerapi/swagger-editor ``` Then navigate to localhost:9090 in your browser.  I have not been able to get the file upload to work. It is a bit of a PITA, but I copy-paste the source code, replacing what is in the editor. Then make any fixes. Then copy-paste the resulting, valid file back into our source code. Not elegant, but easier than playing detective with the swagger-codegen errors.  This might be something about my browser or environment, so give it a try yourself and see how it goes.  ## Merging the DRS standard swagger into this swagger ##  The merging is done in three sections:  1. Merging the security definitions into our security definitions  2. This section of paths. We make all paths explicit (prefixed with /ga4gh/drs/v1)     All standard DRS definitions and parameters are prefixed with 'DRS' to separate them     from our native definitions and parameters. We remove the x-swagger-router-controller lines.  3. A separate part of the definitions section for the DRS definitions  NOTE: the code here does not relect the DRS spec anymore. See DR-409. 
 *
 * OpenAPI spec version: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package bio.terra.datarepo.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;

/**
 * Counted fault is used to insert a fixed number of faults. A \&quot;fault test\&quot; is one call to the fault manager for a named fault. The skipFor lets you get the system to a certain stable point where you want to begin inserting faults. Insert gives the total number of faults to trigger. The rate gives the percentage of the time to insert the fault. A value of 50 would insert the fault half the time. A value of 20 would insert the fault 20% of the time . The rateStyle describes whether the fault will be fixed or random. In our 20 example, if the rate style is fixed, the fault would be skipped 4 times, inserted once, skipped 4 times, inserted once, etc. It uses integer math - you&#39;ve been warned. If the rate style is random, a random number is generated to determine whether the fault is inserted with a probability of 0.2. 
 */
@ApiModel(description = "Counted fault is used to insert a fixed number of faults. A \"fault test\" is one call to the fault manager for a named fault. The skipFor lets you get the system to a certain stable point where you want to begin inserting faults. Insert gives the total number of faults to trigger. The rate gives the percentage of the time to insert the fault. A value of 50 would insert the fault half the time. A value of 20 would insert the fault 20% of the time . The rateStyle describes whether the fault will be fixed or random. In our 20 example, if the rate style is fixed, the fault would be skipped 4 times, inserted once, skipped 4 times, inserted once, etc. It uses integer math - you've been warned. If the rate style is random, a random number is generated to determine whether the fault is inserted with a probability of 0.2. ")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2020-09-25T14:51:02.312-04:00")
public class ConfigFaultCountedModel {
  @JsonProperty("skipFor")
  private Integer skipFor = null;

  @JsonProperty("insert")
  private Integer insert = null;

  @JsonProperty("rate")
  private Integer rate = null;

  /**
   * fixed style means insert the fault; skip for rate-1; ... random style means randomly insert the fault with probability of 1:&lt;rate&gt; 
   */
  public enum RateStyleEnum {
    FIXED("fixed"),
    
    RANDOM("random");

    private String value;

    RateStyleEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static RateStyleEnum fromValue(String text) {
      for (RateStyleEnum b : RateStyleEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
  }

  @JsonProperty("rateStyle")
  private RateStyleEnum rateStyle = null;

  public ConfigFaultCountedModel skipFor(Integer skipFor) {
    this.skipFor = skipFor;
    return this;
  }

   /**
   * number of fault tests to skip before beginning fault insertion
   * @return skipFor
  **/
  @ApiModelProperty(value = "number of fault tests to skip before beginning fault insertion")
  public Integer getSkipFor() {
    return skipFor;
  }

  public void setSkipFor(Integer skipFor) {
    this.skipFor = skipFor;
  }

  public ConfigFaultCountedModel insert(Integer insert) {
    this.insert = insert;
    return this;
  }

   /**
   * total number of times to insert the fault; -1 means insert forever
   * @return insert
  **/
  @ApiModelProperty(value = "total number of times to insert the fault; -1 means insert forever")
  public Integer getInsert() {
    return insert;
  }

  public void setInsert(Integer insert) {
    this.insert = insert;
  }

  public ConfigFaultCountedModel rate(Integer rate) {
    this.rate = rate;
    return this;
  }

   /**
   * insert a fault rate percent of the time. If rate is 100, the fault will always be inserted regardless of rate. 
   * @return rate
  **/
  @ApiModelProperty(value = "insert a fault rate percent of the time. If rate is 100, the fault will always be inserted regardless of rate. ")
  public Integer getRate() {
    return rate;
  }

  public void setRate(Integer rate) {
    this.rate = rate;
  }

  public ConfigFaultCountedModel rateStyle(RateStyleEnum rateStyle) {
    this.rateStyle = rateStyle;
    return this;
  }

   /**
   * fixed style means insert the fault; skip for rate-1; ... random style means randomly insert the fault with probability of 1:&lt;rate&gt; 
   * @return rateStyle
  **/
  @ApiModelProperty(value = "fixed style means insert the fault; skip for rate-1; ... random style means randomly insert the fault with probability of 1:<rate> ")
  public RateStyleEnum getRateStyle() {
    return rateStyle;
  }

  public void setRateStyle(RateStyleEnum rateStyle) {
    this.rateStyle = rateStyle;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ConfigFaultCountedModel configFaultCountedModel = (ConfigFaultCountedModel) o;
    return Objects.equals(this.skipFor, configFaultCountedModel.skipFor) &&
        Objects.equals(this.insert, configFaultCountedModel.insert) &&
        Objects.equals(this.rate, configFaultCountedModel.rate) &&
        Objects.equals(this.rateStyle, configFaultCountedModel.rateStyle);
  }

  @Override
  public int hashCode() {
    return Objects.hash(skipFor, insert, rate, rateStyle);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ConfigFaultCountedModel {\n");
    
    sb.append("    skipFor: ").append(toIndentedString(skipFor)).append("\n");
    sb.append("    insert: ").append(toIndentedString(insert)).append("\n");
    sb.append("    rate: ").append(toIndentedString(rate)).append("\n");
    sb.append("    rateStyle: ").append(toIndentedString(rateStyle)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

