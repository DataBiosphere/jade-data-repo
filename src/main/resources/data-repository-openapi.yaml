# [dd] It seems like openapi 3.0 is released, but swagger-codegen does not yet support it.
# We should move to 3.0 when swagger-codegen is ready.

swagger: '2.0'
info:
  title: Data Repository API
  description: |
    This document defines the REST API for Data Repository.
    **Status: design in progress**

    There are four top-level endpoints (besides some used by swagger):
     * /swagger-ui.html - generated by swagger: swagger API page that provides this documentation and a live UI for
         submitting REST requests
     * /status - provides the operational status of the service
     * /api    - is the authenticated and authorized Data Repository API
     * /ga4gh/drs/v1 - is a transcription of the Data Repository Service API

    The overall API (/api) currently supports two interfaces:
     * Repository - a general and default interface for initial setup, managing ingest and repository metadata
     * Resource - an interface for managing billing accounts and resources

    The API endpoints are organized by interface. Each interface is separately versioned.

    ## Notes on Naming
    All of the reference items are suffixed with "Model". Those names are used as the class names in the generated Java
    code. It is helpful to distinguish these model classes from other related classes, like the DAO classes and the
    operation classes.

    ## Editing and debugging
    I have found it best to edit this file directly to make changes and then use the swagger-editor to validate. The
    errors out of swagger-codegen are not that helpful. In the swagger-editor, it gives you nice errors and links to
    the place in the YAML where the errors are.

    But... the swagger-editor has been a bit of a pain for me to run. I tried the online website and was not able to
    load my YAML. Instead, I run it locally in a docker container, like this:
    ```
    docker pull swaggerapi/swagger-editor
    docker run -p 9090:8080 swaggerapi/swagger-editor
    ```
    Then navigate to localhost:9090 in your browser.

    I have not been able to get the file upload to work. It is a bit of a PITA, but I copy-paste the source code,
    replacing what is in the editor. Then make any fixes. Then copy-paste the resulting, valid file back into our source
    code. Not elegant, but easier than playing detective with the swagger-codegen errors.

    This might be something about my browser or environment, so give it a try yourself and see how it goes.

    ## Merging the DRS standard swagger into this swagger ##

    The merging is done in three sections:
     1. Merging the security definitions into our security definitions
     2. This section of paths. We make all paths explicit (prefixed with /ga4gh/drs/v1)
        All standard DRS definitions and parameters are prefixed with 'DRS' to separate them
        from our native definitions and parameters. We remove the x-swagger-router-controller lines.
     3. A separate part of the definitions section for the DRS definitions

    NOTE: the code here does not relect the DRS spec anymore. See DR-409.


  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html

  version: "0.1.0"

basePath: /
produces:
  - application/json

##########################################################################################
# AUTH
##########################################################################################
security:
  - googleoauth:
    - openid
    - email
    - profile

securityDefinitions:
  googleoauth:
    type: oauth2
    authorizationUrl: 'https://accounts.google.com/o/oauth2/auth'
    flow: implicit
    scopes:
      openid: open id authorization
      email: email authorization
      profile: profile authorization
  authToken: ## From DRS
    description: |
      A valid authorization token must be passed in the 'Authorization' header.
      Example syntax for using 'Authorization' header :
        Bearer: token_string
    type: apiKey
    name: Authorization
    in: header

##########################################################################################
# PATHS
##########################################################################################
paths:

  ## Unauthenticated endpoints

  '/status':
    get:
      description: |
        Returns the operational status of the service
      operationId: serviceStatus
      tags:
        - unauthenticated
      responses:
        200:
          description: service is fine
        500:
          description: service is broken
      security: []

  ## Resources interface

  '/api/resources/v1/profiles':
    post:
      description: |
        Creates a new profile associated with a billing account
      operationId: createProfile
      tags:
        - resources
      consumes:
      - application/json
      parameters:
      - in: body
        name: billingProfileRequest
        schema:
          $ref: '#/definitions/BillingProfileRequestModel'
      responses:
        201:
          description: Successfully created the new profile associated with the billing account
          schema:
            $ref: '#/definitions/BillingProfileModel'
        400:
          description: Bad request - see error message
          schema:
            $ref: '#/definitions/ErrorModel'
        403:
          description: No permission to create profiles
          schema:
            $ref: '#/definitions/ErrorModel'

    get:  ## enumerate
      description: |
        Returns a list of all of the billing profiles
      operationId: enumerateProfiles
      tags:
      - resources
      parameters:
      - in: query
        name: offset
        type: integer
        default: 0
        description: The number of items to skip before starting to collect the result set.
      - in: query
        name: limit
        type: integer
        description: The numbers of items to return.
        default: 10
      responses:
        200:
          description: List of billing profiles
          schema:
            $ref: '#/definitions/EnumerateBillingProfileModel'


  '/api/resources/v1/profiles/{id}':
    get:  ## retrieve
      description: Retrieve a billing profile by id
      operationId: retrieveProfile
      tags:
      - resources
      parameters:
      - $ref: '#/parameters/Id'
      responses:
        200:
          description: Billing profile
          schema:
            $ref: '#/definitions/BillingProfileModel'
        400:
          description: Bad request - invalid id, badly formed
          schema:
            $ref: '#/definitions/ErrorModel'
        403:
          description: No permission to see billing profile
          schema:
            $ref: '#/definitions/ErrorModel'
        404:
          description: Not found - billing profile id does not exist
          schema:
            $ref: '#/definitions/ErrorModel'

    delete: ## delete
      description: Delete a billing profile by id
      operationId: deleteProfile
      tags:
      - resources
      parameters:
      - $ref: '#/parameters/Id'
      responses:
        200:
          description: Successful deletion
          schema:
            $ref: '#/definitions/DeleteResponseModel'
        400:
          description: Bad request - invalid id, badly formed
          schema:
            $ref: '#/definitions/ErrorModel'
        403:
          description: No permission to delete profile
          schema:
            $ref: '#/definitions/ErrorModel'
        404:
          description: Not found - profile id does not exist
          schema:
            $ref: '#/definitions/ErrorModel'
        409:
          description: Profile in use by at least one study
          schema:
            $ref: '#/definitions/ErrorModel'


  ## Repository Interface

  '/api/repository/v1/datasets':
    get:  ## enumerate
      description: |
        Returns a list of all of the datasets the caller has access to
      operationId: enumerateDatasets
      tags:
      - repository
      parameters:
      - in: query
        name: offset
        type: integer
        default: 0
        description: The number of items to skip before starting to collect the result set.
      - in: query
        name: limit
        type: integer
        description: The numbers of items to return.
        default: 10
      - in: query
        name: sort
        type: string
        default: created_date
        enum:
        - name
        - description
        - created_date
        description: The field to use for sorting.
      - in: query
        name: direction
        type: string
        default: desc
        enum:
        - asc
        - desc
        description: The direction to sort.
      - in: query
        name: filter
        type: string
        description: Filter the results where this string is a case insensitive match in the name or description.
      responses:
        200:
          description: List of datasets
          schema:
            $ref: '#/definitions/EnumerateDatasetModel'

    post:
      description: Create a new dataset
      operationId: createDataset
      tags:
      - repository
      consumes:
      - application/json
      parameters:
      - in: body
        name: dataset
        description: Dataset to create
        schema:
          $ref: '#/definitions/DatasetRequestModel'
      responses:
        202:
          description: Job status of dataset creation job & url for polling in the response header
          schema:
            $ref: '#/definitions/JobModel'
          headers:
            location:
              type: string
              description: url for the job polling
        200:
          description: Redirect for dataset successful creation
          schema:
            $ref: '#/definitions/JobModel'
          headers:
            location:
              type: string
              description: url for the job result
        400:
          description: Bad request - invalid name, badly formed or user email not found
          schema:
            $ref: '#/definitions/ErrorModel'
        403:
          description: No permission to create datasets
          schema:
            $ref: '#/definitions/ErrorModel'
        409:
          description: Dataset with this name already exists
          schema:
            $ref: '#/definitions/ErrorModel'


  '/api/repository/v1/datasets/{id}':
    get:  ## retrieve
      description: Retrieve a dataset by id
      operationId: retrieveDataset
      tags:
      - repository
      parameters:
        - $ref: '#/parameters/Id'
      responses:
        200:
          description: Dataset
          schema:
            $ref: '#/definitions/DatasetModel'
        400:
          description: Bad request - invalid id, badly formed
          schema:
            $ref: '#/definitions/ErrorModel'
        403:
          description: No permission to see dataset
          schema:
            $ref: '#/definitions/ErrorModel'
        404:
          description: Not found - dataset id does not exist
          schema:
            $ref: '#/definitions/ErrorModel'

    delete: ## delete
      description: Delete a dataset by id
      operationId: deleteDataset
      tags:
      - repository
      parameters:
        - $ref: '#/parameters/Id'
      responses:
        202:
          description: Job status of dataset creation job & url for polling in the response header
          schema:
            $ref: '#/definitions/JobModel'
          headers:
            location:
              type: string
              description: url for the job polling
        200:
          description: Redirect for dataset successful creation
          schema:
            $ref: '#/definitions/JobModel'
          headers:
            location:
              type: string
              description: url for the job result
        400:
          description: Bad request - invalid id, badly formed
          schema:
            $ref: '#/definitions/ErrorModel'
        403:
          description: No permission to delete dataset
          schema:
            $ref: '#/definitions/ErrorModel'
        404:
          description: Not found - dataset id does not exist
          schema:
            $ref: '#/definitions/ErrorModel'
        409:
          description: Dataset in use?
          schema:
            $ref: '#/definitions/ErrorModel'

  '/api/repository/v1/datasets/{id}/policies':
    get:  ## retrieve
      description: Retrieve the read and discover policies for the dataset
      operationId: retrieveDatasetPolicies
      tags:
      - repository
      parameters:
      - $ref: '#/parameters/Id'
      responses:
        200:
          description: Policy
          schema:
            $ref: '#/definitions/PolicyResponse'
        400:
          description: Bad request - invalid id, badly formed
          schema:
            $ref: '#/definitions/ErrorModel'
        403:
          description: No permission to see policies
          schema:
            $ref: '#/definitions/ErrorModel'
        404:
          description: Not found - dataset id does not exist
          schema:
            $ref: '#/definitions/ErrorModel'


  '/api/repository/v1/datasets/{id}/policies/{policyName}/members':
    post:  ## retrieve
      description: Adds a member to the specified policy for the dataset
      operationId: addDatasetPolicyMember
      tags:
      - repository
      consumes:
      - application/json
      parameters:
      - in: body
        name: policyMember
        description: Dataset to change the policy of
        schema:
          $ref: '#/definitions/PolicyMemberRequest'
      - $ref: '#/parameters/Id'
      - $ref: '#/parameters/DatasetPolicyName'
      responses:
        201:
          description: PolicyResponse
          schema:
            $ref: '#/definitions/PolicyResponse'
        400:
          description: Bad request - invalid id, badly formed, or email not found
          schema:
            $ref: '#/definitions/ErrorModel'
        403:
          description: No permission to update policies
          schema:
            $ref: '#/definitions/ErrorModel'
        404:
          description: Not found - dataset id does not exist
          schema:
            $ref: '#/definitions/ErrorModel'


  '/api/repository/v1/datasets/{id}/policies/{policyName}/members/{memberEmail}':
    delete:  ## retrieve
      description: Adds a member to the specified policy for the dataset
      operationId: deleteDatasetPolicyMember
      tags:
      - repository
      parameters:
      - $ref: '#/parameters/Id'
      - $ref: '#/parameters/DatasetPolicyName'
      - name: memberEmail
        description: The email of the user to remove
        required: true
        in: path
        type: string
      responses:
        200:
          description: PolicyResponse
          schema:
            $ref: '#/definitions/PolicyResponse'
        400:
          description: Bad request - invalid id, badly formed
          schema:
            $ref: '#/definitions/ErrorModel'
        403:
          description: No permission to update policies
          schema:
            $ref: '#/definitions/ErrorModel'
        404:
          description: Not found - dataset id does not exist
          schema:
            $ref: '#/definitions/ErrorModel'

  '/api/repository/v1/studies':
    get:  ## enumerate
      description: |
        Returns a list of all of the studies the caller has access to
      operationId: enumerateStudies
      tags:
      - repository
      parameters:
      - in: query
        name: offset
        type: integer
        default: 0
        description: The number of studies to skip before when retrieving the next page
      - in: query
        name: limit
        type: integer
        description: The numbers studies to retrieve and return.
        default: 10
      - in: query
        name: sort
        type: string
        default: created_date
        enum:
        - name
        - description
        - created_date
        description: The field to use for sorting.
      - in: query
        name: direction
        type: string
        default: desc
        enum:
        - asc
        - desc
        description: The direction to sort.
      - in: query
        name: filter
        type: string
        description: Filter the results where this string is a case insensitive match in the name or description.
      responses:
        200:
          description: List of studies
          schema:
            $ref: '#/definitions/EnumerateStudyModel'

    post:
      description: Create a new study
      operationId: createStudy
      tags:
      - repository
      consumes:
      - application/json
      parameters:
      - in: body
        name: study
        description: Study to create
        schema:
          $ref: '#/definitions/StudyRequestModel'
      responses:
        201:
          description: Study created successfully and a summary is returned
          schema:
            $ref: '#/definitions/StudySummaryModel'
        400:
          description: Bad request - duplicate name, invalid name, badly formed schema
          schema:
            $ref: '#/definitions/ErrorModel'
        403:
          description: No permission to create studies
          schema:
            $ref: '#/definitions/ErrorModel'

  '/api/repository/v1/studies/{id}':
    get:  ## retrieve
      description: Retrieve a study by id
      operationId: retrieveStudy
      tags:
      - repository
      parameters:
      - $ref: '#/parameters/Id'
      responses:
        200:
          description: Study
          schema:
            $ref: '#/definitions/StudyModel'
        400:
          description: Bad request - invalid id, badly formed
          schema:
            $ref: '#/definitions/ErrorModel'
        403:
          description: No permission to see study
          schema:
            $ref: '#/definitions/ErrorModel'
        404:
          description: Not found - study id does not exist
          schema:
            $ref: '#/definitions/ErrorModel'

    delete: ## delete
      description: Delete a study by id
      operationId: deleteStudy
      tags:
      - repository
      parameters:
      - $ref: '#/parameters/Id'
      responses:
        200:
          description: Successful deletion
          schema:
            $ref: '#/definitions/DeleteResponseModel'
        400:
          description: Bad request - invalid id, badly formed
          schema:
            $ref: '#/definitions/ErrorModel'
        403:
          description: No permission to delete study
          schema:
            $ref: '#/definitions/ErrorModel'
        404:
          description: Not found - study id does not exist
          schema:
            $ref: '#/definitions/ErrorModel'
        409:
          description: Study in use by at least one dataset
          schema:
            $ref: '#/definitions/ErrorModel'

  '/api/repository/v1/studies/{id}/policies':
    get:  ## retrieve
      description: Retrieve the read and discover policies for the dataset
      operationId: retrieveStudyPolicies
      tags:
      - repository
      parameters:
      - $ref: '#/parameters/Id'
      responses:
        200:
          description: Policy
          schema:
            $ref: '#/definitions/PolicyResponse'
        400:
          description: Bad request - invalid id, badly formed
          schema:
            $ref: '#/definitions/ErrorModel'
        403:
          description: No permission to see policies
          schema:
            $ref: '#/definitions/ErrorModel'
        404:
          description: Not found - dataset id does not exist
          schema:
            $ref: '#/definitions/ErrorModel'


  '/api/repository/v1/studies/{id}/policies/{policyName}/members':
    post:
      description: Adds a member to the specified policy for the dataset
      operationId: addStudyPolicyMember
      tags:
      - repository
      consumes:
      - application/json
      parameters:
      - in: body
        name: policyMember
        description: Dataset to change the policy of
        schema:
          $ref: '#/definitions/PolicyMemberRequest'
      - $ref: '#/parameters/Id'
      - $ref: '#/parameters/StudyPolicyName'
      responses:
        201:
          description: PolicyResponse
          schema:
            $ref: '#/definitions/PolicyResponse'
        400:
          description: Bad request - invalid id, badly formed, or email not found
          schema:
            $ref: '#/definitions/ErrorModel'
        403:
          description: No permission to update policies
          schema:
            $ref: '#/definitions/ErrorModel'
        404:
          description: Not found - dataset id does not exist
          schema:
            $ref: '#/definitions/ErrorModel'


  '/api/repository/v1/studies/{id}/policies/{policyName}/members/{memberEmail}':
    delete:  ## retrieve
      description: Adds a member to the specified policy for the dataset
      operationId: deleteStudyPolicyMember
      tags:
      - repository
      parameters:
      - $ref: '#/parameters/Id'
      - $ref: '#/parameters/StudyPolicyName'
      - name: memberEmail
        description: The email of the user to remove
        required: true
        in: path
        type: string
      responses:
        200:
          description: PolicyResponse
          schema:
            $ref: '#/definitions/PolicyResponse'
        400:
          description: Bad request - invalid id, badly formed
          schema:
            $ref: '#/definitions/ErrorModel'
        403:
          description: No permission to update policies
          schema:
            $ref: '#/definitions/ErrorModel'
        404:
          description: Not found - dataset id does not exist
          schema:
            $ref: '#/definitions/ErrorModel'

  '/api/repository/v1/studies/{id}/ingest':
    post:
      description: Ingest data into a study table
      operationId: ingestStudy
      tags:
      - repository
      consumes:
      - application/json
      parameters:
      - $ref: '#/parameters/Id'
      - in: body
        name: ingest
        description: Ingest request
        schema:
          $ref: '#/definitions/IngestRequestModel'
      responses:
        202:
          description: Job status of ingest job & url for polling in the response header
          schema:
            $ref: '#/definitions/JobModel'
          headers:
            location:
              type: string
              description: url for the job polling
        200:
          description: Redirect for ingest complete
          schema:
            $ref: '#/definitions/JobModel'
          headers:
            location:
              type: string
              description: url for the job result
        400:
          description: Bad request - invalid ingest request, badly formed
          schema:
            $ref: '#/definitions/ErrorModel'
        403:
          description: No permission to ingest
          schema:
            $ref: '#/definitions/ErrorModel'
        409:
          description: No idea if we will generate this error code
          schema:
            $ref: '#/definitions/ErrorModel'

  '/api/repository/v1/register/user':
    get:
      description: |
        Returns whether the user is registered with terra
      operationId: user
      tags:
      - repository
      responses:
        200:
          description: User Info
          schema:
            $ref: '#/definitions/UserStatusInfo'

  '/api/repository/v1/studies/{id}/files':
    post:
      description: Ingest one file into the study file system; async returns a FSObjectModel
      operationId: ingestFile
      tags:
      - repository
      consumes:
      - application/json
      parameters:
      - $ref: '#/parameters/Id'
      - in: body
        name: ingestFile
        description: Ingest file request
        schema:
          $ref: '#/definitions/FileLoadModel'
      responses:
        202:
          description: Job status of ingest job & url for polling in the response header
          schema:
            $ref: '#/definitions/JobModel'
          headers:
            location:
              type: string
              description: url for the job polling
        200:
          description: Redirect for ingest complete
          schema:
            $ref: '#/definitions/JobModel'
          headers:
            location:
              type: string
              description: url for the job result
        400:
          description: Bad request - invalid ingest request, badly formed
          schema:
            $ref: '#/definitions/ErrorModel'
        403:
          description: No permission to ingest
          schema:
            $ref: '#/definitions/ErrorModel'
        409:
          description: No idea if we will generate this error code
          schema:
            $ref: '#/definitions/ErrorModel'

  '/api/repository/v1/studies/{id}/files/{fileid}':
    get:
      description: Lookup metadata for one file
      operationId: lookupFileObjectById
      tags:
      - repository
      parameters:
      - $ref: '#/parameters/Id'
      - $ref: '#/parameters/FileId'
      responses:
        200:
          description: File exists
          schema:
            $ref: '#/definitions/FSObjectModel'
        400:
          description: Bad request - not sure this will ever happen
          schema:
            $ref: '#/definitions/ErrorModel'
        403:
          description: No permission
          schema:
            $ref: '#/definitions/ErrorModel'
        404:
          description: Not found - file id does not exist
          schema:
            $ref: '#/definitions/ErrorModel'
        409:
          description: No idea if we will generate this error code
          schema:
            $ref: '#/definitions/ErrorModel'

    delete: ## delete
      description: |
        Hard delete of a file by id. The file is deleted even if it is in use by
        a study. Subsequent lookups will give not found errors.
      operationId: deleteFile
      tags:
      - repository
      parameters:
      - $ref: '#/parameters/Id'
      - $ref: '#/parameters/FileId'
      responses:
        202:
          description: Job status of dataset creation job & url for polling in the response header
          schema:
            $ref: '#/definitions/JobModel'
          headers:
            location:
              type: string
              description: url for the job polling
        200:
          description: Redirect for dataset successful creation
          schema:
            $ref: '#/definitions/JobModel'
          headers:
            location:
              type: string
              description: url for the job result
        400:
          description: Bad request - invalid id, badly formed
          schema:
            $ref: '#/definitions/ErrorModel'
        403:
          description: No permission to delete file
          schema:
            $ref: '#/definitions/ErrorModel'
        404:
          description: Not found - study id or file id does not exist
          schema:
            $ref: '#/definitions/ErrorModel'

  '/api/repository/v1/studies/{id}/filesystem/objects':
    get:
      description: Lookup metadata for one file
      operationId: lookupFileObjectByPath
      tags:
      - repository
      parameters:
      - $ref: '#/parameters/Id'
      - $ref: '#/parameters/Path'
      responses:
        200:
          description: File exists
          schema:
            $ref: '#/definitions/FSObjectModel'
        400:
          description: Bad request - not sure this will ever happen
          schema:
            $ref: '#/definitions/ErrorModel'
        403:
          description: No permission
          schema:
            $ref: '#/definitions/ErrorModel'
        404:
          description: Not found - file id does not exist
          schema:
            $ref: '#/definitions/ErrorModel'
        409:
          description: No idea if we will generate this error code
          schema:
            $ref: '#/definitions/ErrorModel'

  '/api/repository/v1/jobs':
    # '/api/repository/v1/jobs?offset=100&limit=50':
    get:  ## enumerate
      description: |
        Returns a list of all of the jobs the caller has access to
      operationId: enumerateJobs
      tags:
      - repository
      parameters:
      - in: query
        name: offset
        type: integer
        default: 0
        description: The number of items to skip before starting to collect the result set.
      - in: query
        name: limit
        type: integer
        description: The numbers of items to return.
        default: 10
      responses:
        200:
          description: List of jobs
          schema:
            type: array
            items:
              $ref: '#/definitions/JobModel'

  '/api/repository/v1/jobs/{id}':
    get:  ## retrieve
      description: Retrieve a job's status by id
      operationId: retrieveJob
      tags:
      - repository
      parameters:
      - $ref: '#/parameters/Id'
      responses:
        202:
          description: Job status
          schema:
            $ref: '#/definitions/JobModel'
          headers:
            location:
              type: string
              description: url for the job polling
        200:
          description: Redirect for object successful creation
          schema:
            $ref: '#/definitions/JobModel'
          headers:
            location:
              type: string
              description: url for the job result
        400:
          description: Bad request - invalid id, badly formed
          schema:
            $ref: '#/definitions/ErrorModel'
        403:
          description: No permission to see job
          schema:
            $ref: '#/definitions/ErrorModel'
        404:
          description: Not found - job id does not exist
          schema:
            $ref: '#/definitions/ErrorModel'


  '/api/repository/v1/jobs/{id}/result':
    get:  ## retrieve
      description: Retrieve a job's result by id
      operationId: retrieveJobResult
      tags:
      - repository
      parameters:
      - $ref: '#/parameters/Id'
      responses: ## successful responses return the type of model specified by the job
        default:
          description: Successful responses return the type of model specified by the job; otherwise, ErrorModel
          schema:
            type: object

##########################################################################################
# DRS PATHS
##########################################################################################

  '/ga4gh/drs/v1/service-info':
    get:
      summary: Get information about this implementation.
      description: >-
        May return service version and other information.
      operationId: GetServiceInfo
      responses:
        '200':
          description: Service information returned successfully
          schema:
            $ref: '#/definitions/DRSServiceInfo'
      tags:
        - DataRepositoryService

  '/ga4gh/drs/v1/bundles/{bundle_id}':
    get:
      summary: Retrieve a Data Bundle
      description: >-
        Returns bundle metadata, and a list of ids that can be used to fetch bundle contents.
      operationId: GetBundle
      responses:
        '200':
          description: The Data Bundle was found successfully.
          schema:
            $ref: '#/definitions/DRSBundle'
        '400':
          description: The request is malformed.
          schema:
            $ref: '#/definitions/DRSError'
        '401':
          description: The request is unauthorized.
          schema:
            $ref: '#/definitions/DRSError'
        '403':
          description: The requester is not authorized to perform this action.
          schema:
            $ref: '#/definitions/DRSError'
        '404':
          description: The requested Data Bundle wasn't found.
          schema:
            $ref: '#/definitions/DRSError'
        '500':
          description: An unexpected error occurred.
          schema:
            $ref: '#/definitions/DRSError'
      parameters:
        - name: bundle_id
          in: path
          required: true
          type: string
      tags:
        - DataRepositoryService

  '/ga4gh/drs/v1/objects/{object_id}':
    get:
      summary: Get info about a Data Object.
      description: >-
        Returns object metadata, and a list of access methods that can be used to fetch object bytes.
      operationId: GetObject
      responses:
        '200':
          description: The Data Object was found successfully.
          schema:
            $ref: '#/definitions/DRSObject'
        '400':
          description: The request is malformed.
          schema:
            $ref: '#/definitions/DRSError'
        '401':
          description: The request is unauthorized.
          schema:
            $ref: '#/definitions/DRSError'
        '403':
          description: The requester is not authorized to perform this action.
          schema:
            $ref: '#/definitions/DRSError'
        '404':
          description: The requested Data Object wasn't found
          schema:
            $ref: '#/definitions/DRSError'
        '500':
          description: An unexpected error occurred.
          schema:
            $ref: '#/definitions/DRSError'
      parameters:
        - name: object_id
          in: path
          required: true
          type: string
      tags:
        - DataRepositoryService

  '/ga4gh/drs/v1/objects/{object_id}/access/{access_id}':
    get:
      summary: Get a URL for fetching bytes.
      description: >-
        Returns a URL that can be used to fetch the object bytes.
        This method only needs to be called when using an `AccessMethod` that contains an `access_id`
        (e.g., for servers that use signed URLs for fetching object bytes).
      operationId: GetAccessURL
      responses:
        '200':
          description: The access URL was found successfully.
          schema:
            $ref: '#/definitions/DRSAccessURL'
        '400':
          description: The request is malformed.
          schema:
            $ref: '#/definitions/DRSError'
        '401':
          description: The request is unauthorized.
          schema:
            $ref: '#/definitions/DRSError'
        '404':
          description: The requested access URL wasn't found
          schema:
            $ref: '#/definitions/DRSError'
        '403':
          description: The requester is not authorized to perform this action.
          schema:
            $ref: '#/definitions/DRSError'
        '500':
          description: An unexpected error occurred.
          schema:
            $ref: '#/definitions/DRSError'
      parameters:
        - name: object_id
          in: path
          required: true
          type: string
          description: An `id` of a Data Object
        - name: access_id
          in: path
          required: true
          type: string
          description: An `access_id` from the `access_methods` list of a Data Object
      tags:
        - DataRepositoryService

##########################################################################################
# PARAMETERS
##########################################################################################
parameters:
  Id:
    name: id
    description: A study or dataset id
    required: true
    type: string
    in: path
  DatasetPolicyName:
    name: policyName
    in: path
    description: The relevant policy
    required: true
    type: string
    enum:
      - reader
      - discoverer
  StudyPolicyName:
    name: policyName
    in: path
    description: The relevant policy
    required: true
    type: string
    enum:
    - steward
    - custodian
    - ingester
  FileId:
    name: fileid
    description: A file id
    required: true
    type: string
    in: path
  Path:
    name: path
    description: Full path to a file or directory
    required: true
    type: string
    allowReserved: true
    in: query

##########################################################################################
# DEFINITIONS
##########################################################################################
definitions:

  ## Identifiers ##

  ObjectNameProperty:
    description: |
      Table, column, and relationship names follow this pattern. This should be used for the name of any object in the
      system. It enforces BigQuery naming rules except it disallows a leading underscore so we avoid collisions with
      any extra columns the DR adds. For table names, this is shorter than what BigQuery allows.
    type: string
    pattern: '^[a-zA-Z0-9][_a-zA-Z0-9]*$' ## TODO this will support any unicode string
    minLength: 1
    maxLength: 63

  UniqueIdProperty:
    description: |
      Unique identifier for a study, dataset, etc.
    type: string
    pattern: '^[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}' ## eg:957117a6-79fd-4f2c-a63c-f6dc84a94d9c



  ## Billing ##
  BillingProfileRequestModel:
    description: |
      Describes a profile that references a billing account.
    type: object
    required:
      - billingAccountId
      - profileName
      - biller
    properties:
      billingAccountId:
        type: string
        description: unique identifier of the billing account from Google
      profileName:
        type: string
        description: display name to be used for the profile
      biller:
        type: string
        description: either “direct” or the reseller of the sub-account that sends the bill (like “on_spend”)

  BillingProfileModel:
    type: object
    properties:
      id:
        $ref: '#/definitions/UniqueIdProperty'
      billingAccountId:
        type: string
        description: unique identifier of the billing account from Google
      profileName:
        type: string
        description: display name to be used for the profile
      biller:
        type: string
        description: either “direct” or the reseller of the sub-account that sends the bill (like “on_spend”)
      accessible:
        type: boolean
        description: true if the repository SA is a billing account user on this billing account, false o/w

  EnumerateBillingProfileModel:
    description: |
      The total number of billing profiles available and a page of profiles
    type: object
    properties:
      total:
        type: integer
        description: Total number of billing profiles
      items:
        type: array
        items:
          $ref: '#/definitions/BillingProfileModel'

  ## Study ##

  StudyModel:
    description: |
      Complete definition of a study.
    type: object
    properties:
      id:
        $ref: '#/definitions/UniqueIdProperty'
      name:
        $ref: '#/definitions/ObjectNameProperty'
      description:
        type: string
        description: Description of the study
      defaultProfileId:
        $ref: '#/definitions/UniqueIdProperty'
        description: This is the profile id used for core study resources
      dataProject:
        type: string
        description: Project id of the project where tabular data in BigQuery lives
      additionalProfileIds:
        type: array
        description: Additional profile ids to be used for this study
        items:
          $ref: '#/definitions/UniqueIdProperty'
      defaultDatasetId:
        type: string
        description: Id of the auto-generated default passthru dataset
      schema:
        $ref: '#/definitions/StudySpecificationModel'
      createdDate:
        type: string
        description: Date the study was created

  StudySummaryModel:
    description: |
      Summary of a study.
    type: object
    properties:
      id:
        $ref: '#/definitions/UniqueIdProperty'
      name:
        $ref: '#/definitions/ObjectNameProperty'
      description:
        type: string
        description: Description of the study
      defaultProfileId:
        $ref: '#/definitions/UniqueIdProperty'
        description: This is the ID of the profile used for core study resources
      additionalProfileIds:
        type: array
        description: Additional profile IDs to be used for this study
        items:
          $ref: '#/definitions/UniqueIdProperty'
      createdDate:
        type: string
        description: Date the study was created

  StudyRequestModel:
    description: |
      Complete definition of a study without the id (used to create a study)
    type: object
    required:
    - name
    - defaultProfileId
    - schema
    properties:
      name:
        $ref: '#/definitions/ObjectNameProperty'
      description:
        type: string
        description: Description of the study
      defaultProfileId:
        $ref: '#/definitions/UniqueIdProperty'
        description: This is the ID of the profile used for core study resources
      additionalProfileIds:
        type: array
        description: Additional profile IDs to be used for this study
        items:
          $ref: '#/definitions/UniqueIdProperty'
      schema:
        $ref: '#/definitions/StudySpecificationModel'

  EnumerateStudyModel:
    description: |
      The total number of studies available and a page of summaries
    type: object
    properties:
      total:
        type: integer
        description: Total number of studies
      items:
        type: array
        items:
          $ref: '#/definitions/StudySummaryModel'


  ## Schema Definitions ##

  ColumnModel:
    description: one column of a table
    type: object
    required:
      - name
      - datatype
    properties:
      name:
        $ref: '#/definitions/ObjectNameProperty'

      ## TODO: Use an enumeration for the datatype. We will probably want to support some kind of extended datatyping
      ## to process references to UCSC and/or UChicago schema parts. Whatever GA4GH standardizes.

      datatype:
        type: string
      array_of:
        type: boolean
        default: false
        description: if true, make this column an array of type datatype.

  TableModel:
    description: one table in a schema
    type: object
    required:
      - name
      - columns

    properties:
      name:
        $ref: '#/definitions/ObjectNameProperty'

      columns:
        type: array
        items:
          $ref: '#/definitions/ColumnModel'

  RelationshipTermModel:
    description: Describes a table, columns and cardinality for a relationship
    type: object
    required:
      - table
      - column
      - cardinality
    properties:
      table:
        $ref: '#/definitions/ObjectNameProperty'
      column:
        type: string
      cardinality:
        type: string
        enum:
          - one
          - many
          - zero_or_one
          - one_or_many
          - zero_or_many

  RelationshipModel:
    description: |
      One relationship between two tables. Captures a specific relationship between two tables. By naming the
      relationships, we can define assets. It should allow us to use the cardinality of the relationships to form
      proper views (INNER vs OUTER) and implement data validation.
    type: object
    required:
      - name
      - from
      - to
    properties:
      name:
        $ref: '#/definitions/ObjectNameProperty'
      from:
        $ref: '#/definitions/RelationshipTermModel'
      to:
        $ref: '#/definitions/RelationshipTermModel'

  AssetTableModel:
    description: |
      Used in the asset definition to describe a table that is included in the asset. This is used to define
      the view of the asset table in the dataset. Columns can be an empty array indicating that all columns
      should be included.
    type: object
    required:
      - name
      - columns
    properties:
      name:
        $ref: '#/definitions/ObjectNameProperty'
      columns:
        type: array
        items:
          $ref: '#/definitions/ObjectNameProperty'

  AssetModel:
    description: One asset in the data model. The table list identifies the tables in the asset.
          The rootTable and rootColumn indicate which value will be used as the unique identifier.
          The list of relationships provides the instructions for how to connect the tables.
          Asset tables have to be connected in a relationship hierarchy. So there cannot be
          two paths to the same table from the root.
    required:
      - name
      - tables
      - rootTable
      - rootColumn
    properties:
      name:
        $ref: '#/definitions/ObjectNameProperty'
      tables:
        type: array
        items:
          $ref: '#/definitions/AssetTableModel'
      rootTable:
        $ref: '#/definitions/ObjectNameProperty'
      rootColumn:
        $ref: '#/definitions/ObjectNameProperty'
      follow:
        type: array
        items:
          $ref: '#/definitions/ObjectNameProperty'

  StudySpecificationModel:
    description: data model definition
    type: object
    required:
      - tables
      - assets
    properties:
      tables:
        type: array
        items:
          $ref: '#/definitions/TableModel'
      relationships:
        type: array
        items:
          $ref: '#/definitions/RelationshipModel'
      assets:
        type: array
        items:
          $ref: '#/definitions/AssetModel'

  ## Study Ingest Definitions ##
  IngestRequestModel:
    description: |
      Request to ingest data from a file in GCS into a table in a study.
      The ingest source must be readable by the DR manager.
      TODO: other input forms
    type: object
    required:
      - table
      - path
      - format
    properties:
      table:
        $ref: '#/definitions/ObjectNameProperty'
        description: name of the target table for ingest
      path:
        type: string
        description: gs path to a file in a bucket accessible to data repo
      format:
        type: string
        enum:
          - csv
          - json
      load_tag:
        type: string
        description: |
          client-specified tag for this load. If no id is specified, we use the
          string form of the job create time as the tag.
      max_bad_records:
        type: integer
        default: 0
        description: max number of bad records to skip; applies to JSON and CSV
      ignore_unknown_values:
        type: boolean
        default: true
        description: skip extra data; applies to JSON and CSV
      csv_field_delimiter:
        type: string
        default: ','
        description: field separator
      csv_quote:
        type: string
        default: '"'
        description: quoting character
      csv_skip_leading_rows:
        type: integer
        default: 0
        description: number of header rows to skip
      csv_allow_quoted_newlines:
        type: boolean
        default: true
      csv_null_marker:
        type: string
        default: ''

  IngestResponseModel:
    description: |
      Response from performing an ingest.
    type: object
    required:
      - table
      - path
      - row_count
    properties:
      study_id:
        $ref: '#/definitions/UniqueIdProperty'
        description: unique id of the study
      study:
        $ref: '#/definitions/ObjectNameProperty'
        description: name of the study
      table:
        $ref: '#/definitions/ObjectNameProperty'
        description: name of the target table for ingest
      path:
        type: string
      load_tag:
        type: string
      row_count:
        type: integer
        format: int64
        description: number of rows successfully ingested
      bad_row_count:
        type: integer
        format: int64
        description: number of bad rows skipped

  ## File Definitions ##
  FileLoadModel:
    description: |
      Information needed to copy a file from a source bucket into the
      study bucket.
      Eventually, this will include attributes of the storage including
      billing, temperature, geography, etc. But for now...
    type: object
    required:
      - source_path
      - target_path
    properties:
      source_path:
        type: string
        description: gs URL of the source file to load
      target_path:
        type: string
        description: |
          Full path within the study where the file should be placed.
          The path must start with /.
      mime_type:
        type: string
        description: |-
          A string providing the mime-type of the Data Object.
          For example, "application/json".
      description:
        type: string
        description: |-
          A human readable description of the contents of the Data Object.

  FSObjectModel:
    description: A file or directory in the data repository
    type: object
    properties:
      objectId:
        type: string
        description: Unique id of the filesystem object within the study
      studyId:
        type: string
        description: Study holding the file
      path:
        type: string
        description: full path of the file in the study
      size:
        type: integer
        format: int64
        description: file size in bytes of sum of file sizes in a directory
      created:
        type: string
        description: timestamp of object creation in RFC3339
      description:
        type: string
        description: Human readable description of the file
      objectType:
        $ref: '#/definitions/FSObjectModelType'
      fileDetail:
        $ref: '#/definitions/FileDetailModel'
      directoryDetail:
        $ref: '#/definitions/DirectoryDetailModel'

  FSObjectModelType:
    type: string
    enum:
      - file
      - directory

  FileDetailModel:
    description: File in the data repository
    type: object
    properties:
      checksums:
        type: array
        items:
          $ref: '#/definitions/DRSChecksum'
        description: checksums; always includes crc32c. May include md5.
      mimeType:
        type: string
      accessUrl:
        type: string
        description: URL of the file in cloud storage

  DirectoryDetailModel:
    description: Directory in the data repository
    type: object
    properties:
      contents:
        type: array
        description: Array of directory contents
        items:
          $ref: '#/definitions/FSObjectModel'

  ## Dataset Definitions ##

  DatasetRequestModel:
    description: |
      Request for creating a dataset.
      For now, the API only supports datasets defined as a single study asset and
      row ids for the root table of that asset. The dataset has exactly the tables
      and columns of the asset. An optional list of users can be provided to set as
      readers on the dataset.
      In the future, we will need to extend this to handle cross-study datasets
      from disparate assets, so we will need to support column and datatype
      mapping from asset tables to the target dataset tables.
    type: object
    required:
      - name
      - contents
    properties:
      name:
        $ref: '#/definitions/ObjectNameProperty'
      description:
        type: string
        description: Description of the dataset
      contents:
        type: array
        items:
          $ref: '#/definitions/DatasetRequestContentsModel'
      readers:
        type: array
        items:
          type: string
      profileId:
        $ref: '#/definitions/UniqueIdProperty'
        description: The profile id to use for this dataset

  DatasetRequestContentsModel:
    description: |
      The contents specifies the source of the data (study and asset)
      and the rows to include (field and rootValues).
      TODO: field will move the asset object; it is here as a stepping stone
    type: object
    required:
      - source
      - rootValues
    properties:
      source:
        $ref: '#/definitions/DatasetRequestSourceModel'
      rootValues:
        type: array
        items:
          type: string

  DatasetRequestSourceModel:
    description: |
      The datasource identifies the study and asset from which to source the data.
    type: object
    required:
      - studyName
      - assetName
    properties:
      studyName:
        $ref: '#/definitions/ObjectNameProperty'
      assetName:
        $ref: '#/definitions/ObjectNameProperty'

  DatasetSummaryModel:
    description: |
      summary of dataset
    type: object
    properties:
      id:
        $ref: '#/definitions/UniqueIdProperty'
      name:
        $ref: '#/definitions/ObjectNameProperty'
      description:
        type: string
        description: Description of the dataset
      createdDate:
        type: string
        description: Date the dataset was created
      profileId:
        $ref: '#/definitions/UniqueIdProperty'
        description: The profile id for this dataset

  EnumerateDatasetModel:
    description: |
      The total number of datasets available and a page of summaries
    type: object
    properties:
      total:
        type: integer
        description: Total number of datasets
      items:
        type: array
        items:
          $ref: '#/definitions/DatasetSummaryModel'

  DatasetModel:
    description: |
      DatasetModel returns detailed data about an existing dataset.
    type: object
    properties:
      id:
        $ref: '#/definitions/UniqueIdProperty'
      name:
        $ref: '#/definitions/ObjectNameProperty'
      description:
        type: string
        description: Description of the dataset
      createdDate:
        type: string
        description: Date the dataset was created
      source:
        type: array
        items:
          $ref: '#/definitions/DatasetSourceModel'
      tables:
        type: array
        items:
          $ref: '#/definitions/TableModel'
      profileId:
        $ref: '#/definitions/UniqueIdProperty'
        description: The profile id of this dataset
      dataProject:
        type: string
        description: Project id of the dataset data project

  DatasetSourceModel:
    description: |
      DatasetSourceModel returns data about the source for an existing dataset
    type: object
    required:
      - study
      - asset
    properties:
      study:
        $ref: '#/definitions/StudySummaryModel'
      asset:
        $ref: '#/definitions/ObjectNameProperty'

  JobModel:
    description: |
      Status of job
    type: object
    required:
    - id
    - job_status
    - status_code
    properties:
      id:
        $ref: '#/definitions/UniqueIdProperty'
      description:
        type: string
        description: Description of the job's flight from description flight input parameter
      job_status:
        description: Status of job
        type: string
        enum:
          - running
          - succeeded
          - failed
      status_code:
        description: HTTP code
        type: integer
      submitted:
        type: string
        description: Timestamp when the flight was created
      completed:
        type: string
        description: Timestamp when the flight was completed; not present if not complete

  ErrorModel:
    description: |
      Representation of an error that occurred while processing a request.
      Some errors provide error details. For example, validation of input may report several problems.
      Each of those are reported in a separate error detail.
    type: object
    required:
      - message
    properties:
      message:
        type: string
      errorDetail:
        type: array
        items:
          type: string


  DeleteResponseModel:
    description: |
      Returns the state of the object of the deletion
    type: object
    properties:
      objectState:
        type: string
        enum:
          - deleted
          - not_found

  PolicyMemberRequest:
    description: |
      email of user or group to add to policy
    type: object
    required:
      - email
    properties:
      email:
        type: string

  PolicyModel:
    description: |
      Describes a policy
    type: object
    properties:
      name:
        type: string
      members:
        type: array
        items:
          type: string

  PolicyResponse:
    description: |
      email of user or group to add to policy
    type: object
    properties:
      policies:
        type: array
        items:
          $ref: '#/definitions/PolicyModel'

  UserStatusInfo:
    description: ''
    required:
    - userSubjectId
    - userEmail
    - enabled
    properties:
      userSubjectId:
        type: string
        description: user id
      userEmail:
        type: string
        description: user email
      enabled:
        type: boolean
        description: true if the user is enabled in ldap

##########################################################################################
# DRS DEFINITIONS
##########################################################################################
  DRSChecksum:
    type: object
    required:
      - checksum
    properties:
      checksum:
        type: string
        description: The hex-string encoded checksum for the data
      type:
        type: string
        description: |-
          The digest method used to create the checksum. If left unspecified md5
          will be assumed.

          possible values:
          md5                # most blob stores provide a checksum using this
          etag               # multipart uploads to blob stores
          sha256
          sha512

  DRSBundle:
    type: object
    required: ['id', 'size', 'created', 'checksums', 'contents']
    properties:
      id:
        type: string
        description: >-
          An identifier, unique to this Data Bundle
      name:
        type: string
        description: >-
          A string that can be used to name a Data Bundle.
      size:
        type: integer
        format: int64
        description: |-
          The cumulative size of all Data Objects and Bundles listed within
          contents field in bytes.
      created:
        type: string
        description: >-
          Timestamp of Bundle creation in RFC3339.
      updated:
        type: string
        description: >-
          Timestamp of Bundle update in RFC3339, identical to create timestamp in
          systems that do not support updates.
      version:
        type: string
        description: >-
          A string representing a version. (Some systems may use checksum, a
          RFC3339 timestamp, or an incrementing version number.)
      checksums:
        type: array
        description: |-
          The checksum of the Data Bundle. At least one checksum must be provided.

          The Data Bundle checksum is computed over a sorted concatenation of all
          the checksums (names not included) within the top-level 'contents' of the
          Bundle (not recursive). The list of Data Object or Bundle checksums are
          sorted alphabetically (hex-code) before concatenation and a further checksum
          is performed on the concatenated checksum value.
          Example below:
          Data Ojects:
            md5(DO1) = 72794b6d30bc86d92e40a1aa65c880b8
            md5(DO2) = 5e089d29a18954e68a78ee6a3c6edabd
          Data Bundle:
          DB1 = md5( concat( sort( md5(DO1), md5(DO2) ) ) )
              = md5( concat( sort( 72794b6d30bc86d92e40a1aa65c880b8, 5e089d29a18954e68a78ee6a3c6edabd ) ) )
              = md5( concat( 5e089d29a18954e68a78ee6a3c6edabd, 72794b6d30bc86d92e40a1aa65c880b8 ) )
              = md5( 5e089d29a18954e68a78ee6a3c6edabd72794b6d30bc86d92e40a1aa65c880b8 )
              = f7a29a0422e7d870b10839ad6c985079
        items:
          $ref: '#/definitions/DRSChecksum'
      description:
        type: string
        description: A human readable description of the Data Bundle.
      aliases:
        type: array
        description: >-
          A list of strings that can be used to find other metadata
          about this Data Bundle from external metadata sources. These
          aliases can be used to represent the Data Bundle's secondary
          accession numbers or external GUIDs.
        items:
          type: string
      contents:
        type: array
        description: >-
          The list of Data Objects that this Data Bundle contains.
        items:
          $ref: '#/definitions/DRSBundleObject'

  DRSObject:
    type: object
    required: ['id', 'size', 'created', 'checksums', 'access_methods']
    properties:
      id:
        type: string
        description: |-
          An identifier unique to this Data Object.
      name:
        type: string
        description: |-
          A string that can be used to name a Data Object.
      size:
        type: integer
        format: int64
        description: |-
          The object size in bytes.
      created:
        type: string
        description: |-
          Timestamp of object creation in RFC3339.
      updated:
        type: string
        description: |-
          Timestamp of update in RFC3339, identical to create timestamp in systems
          that do not support updates.
      version:
        type: string
        description: |-
          A string representing a version.
      mime_type:
        type: string
        description: |-
          A string providing the mime-type of the Data Object.
        example:
          application/json
      checksums:
        type: array
        items:
          $ref: '#/definitions/DRSChecksum'
        description: |-
          The checksum of the Data Object. At least one checksum must be provided.
      access_methods:
        type: array
        minItems: 1
        items:
          $ref: '#/definitions/DRSAccessMethod'
        description: |-
          The list of access methods that can be used to access the Data Object.
      description:
        type: string
        description: |-
          A human readable description of the Data Object.
      aliases:
        type: array
        items:
          type: string
        description: >-
          A list of strings that can be used to find other metadata
          about this Data Object from external metadata sources. These
          aliases can be used to represent the Data Object's secondary
          accession numbers or external GUIDs.

  DRSAccessURL:
    type: object
    required: ['url']
    properties:
      url:
        type: string
        description: A fully resolvable URL that can be used to fetch the actual object bytes.
      headers:
        type: array
        items:
          type: string
        description: >-
          An optional list of headers to include in the HTTP request to `url`.
          These headers can be used to provide auth tokens required to fetch the object bytes.
        example:
          Authorization: Basic Z2E0Z2g6ZHJz

  DRSAccessMethod:
    type: object
    required:
      - type
    properties:
      type:
        type: string
        enum:
        - s3
        - gs
        - ftp
        - gsiftp
        - globus
        - htsget
        - https
        - file
        description: >-
          Type of the access method.
      access_url:
        $ref: '#/definitions/DRSAccessURL'
        description: >-
          An `AccessURL` that can be used to fetch the actual object bytes.
          Note that at least one of `access_url` and `access_id` must be provided.
      access_id:
        type: string
        description: >-
          An arbitrary string to be passed to the `/access` path to get an `AccessURL`.

          This must be unique per object.
          Note that at least one of `access_url` and `access_id` must be provided.
      region:
        type: string
        description: >-
          Name of the region in the cloud service provider that the object belongs to.
        example:
          us-east-1

  DRSError:
    description:
      An object that can optionally include information about the error.
    type: object
    properties:
      msg:
        type: string
        description: A detailed error message.
      status_code:
        type: integer
        description: The integer representing the HTTP status code (e.g. 200, 404).

  DRSServiceInfo:
    type: object
    required:
      - version
    description: Placeholder for the Info Object
    properties:
      version:
        type: string
        description: Service version
      title:
        type: string
        description: Service name
      description:
        type: string
        description: Service description
      contact:
        type: object
        description: Maintainer contact info
      license:
        type: object
        description: License information for the exposed API

  DRSBundleObject:
    type: object
    properties:
      name:
        type: string
        description: >-
          This represents the Bundle author declared name that must be
          used when materialising the associated data object and will
          override any name directly associated with the object itself.
          This string MUST NOT contain any slashes.
      id:
        type: string
        description: >-
          This represents the DRS identifier that may point to a Data
          Object or another Data Bundle that will need to be recursed.
      drs_uri:
        type: array
        items:
          type: string
        description: >-
          This represents a list of suggested full DRS identifier URI paths
          that may used obtain the Data Object or Data Bundle that will need
          to be recursed. These URIs may be external to this DRS.
        example: 'drs://example.com/ga4gh/drs/v1/objects/{object_id}'
      type:
        type: string
        enum:
          - object
          - bundle
        description: >-
          This represents the type of DRS object referenced within this
          Data Bundle. BundleObject of type bundle will need to be recursed
          further.
    required:
      - name
      - id
      - type
