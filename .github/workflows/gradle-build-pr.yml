name: Integration test and Connected tests
env:
  K8_CLUSTER: "integration-master"
  # This must be defined for the bash redirection
  GOOGLE_APPLICATION_CREDENTIALS: 'jade-dev-account.json'
  # This must be defined for the bash redirection
  GOOGLE_SA_CERT: 'jade-dev-account.pem'
on:
  pull_request:
    branches:
      - develop
jobs:
  test_connected:
    timeout-minutes: 180
    strategy:
      matrix:
        os: [ubuntu-latest]
    if: "!contains( github.event.pull_request.labels.*.name, 'skip-ci')"
    runs-on: ${{ matrix.os }}
    ## skips if pr label is 'skip-ci'
    # run a local Postgres container in Docker for the basic check tests
    services:
      postgres:
        image: postgres:11
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: postgres
        ports:
          - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
    steps:
      - name: "Checkout code"
        uses: actions/checkout@v2
      - name: "Run Connected test via Gradle"
        uses: broadinstitute/datarepo-actions@0.26.0
        with:
          actions_subcommand: 'gradleinttest'
          pgport: ${{ job.services.postgres.ports[5432] }}
          test_to_run: 'testConnected'
          role_id: ${{ secrets.ROLE_ID }}
          secret_id: ${{ secrets.SECRET_ID }}
  deploy_test_integration:
    timeout-minutes: 180
    strategy:
      matrix:
        os: [ubuntu-latest]
    if: "!contains( github.event.pull_request.labels.*.name, 'skip-ci')"
    runs-on: ${{ matrix.os }}
    ## skips if pr label is 'skip-ci'
    # run a local Postgres container in Docker for the basic check tests
    services:
      postgres:
        image: postgres:11
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: postgres
        ports:
          - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
    steps:
      - name: "Checkout code"
        uses: actions/checkout@v2
      - name: "Whitelist Runner IP"
        uses: broadinstitute/datarepo-actions@0.26.0
        with:
          actions_subcommand: 'gcp_whitelist'
          role_id: ${{ secrets.ROLE_ID }}
          secret_id: ${{ secrets.SECRET_ID }}
      - name: "Check for an availble namespace to deploy API to and set state lock"
        uses: broadinstitute/datarepo-actions@0.26.0
        with:
          actions_subcommand: 'k8_checknamespace'
          k8_namespaces: 'integration-1,integration-2,integration-3, integration-6'
      - name: "Build docker container via Gradle"
        uses: broadinstitute/datarepo-actions@0.26.0
        with:
          actions_subcommand: 'gradlebuild'
      - name: "Deploy to cluster with Helm"
        uses: broadinstitute/datarepo-actions@0.26.0
        with:
          actions_subcommand: 'helmdeploy'
          helm_secret_chart_version: '0.0.4'
          helm_datarepo_api_chart_version: '0.0.19'
          helm_datarepo_ui_chart_version: '0.0.9'
          helm_gcloud_sqlproxy_chart_version: '0.19.7'
          helm_oidc_proxy_chart_version: '0.0.9'
      - name: "Import Vault dev secrets"
        uses: hashicorp/vault-action@v2.0.1
        with:
          url: ${{ secrets.VAULT_ADDR }}
          method: approle
          roleId: ${{ secrets.ROLE_ID }}
          secretId: ${{ secrets.SECRET_ID }}
          secrets: |
            secret/dsde/datarepo/dev/sa-key-b64 sa | B64_APPLICATION_CREDENTIALS ;
      - name: "Configure credentials"
        run: |
          # write vault tokens
          base64 --decode <<< ${B64_APPLICATION_CREDENTIALS} > ${GOOGLE_APPLICATION_CREDENTIALS}

          gcloud auth activate-service-account --key-file ${GOOGLE_APPLICATION_CREDENTIALS}

          # configure integration prerequisites
          gcloud config set compute/zone ${GOOGLE_ZONE} --quiet
          gcloud config set project ${GOOGLE_CLOUD_PROJECT} --quiet
          gcloud auth configure-docker --quiet
          #echo 'Set google sdk to SA user'
          if [[ -n "${K8_CLUSTER}" ]]; then
            gcloud container clusters get-credentials ${K8_CLUSTER} --zone ${GOOGLE_ZONE}
          fi
      - name: "Build and run Test Runner"
        run: |
          cd ${GITHUB_WORKSPACE}/${workingDir}
          echo "Building Data Repo client library"
          export TEST_RUNNER_SERVER_SPECIFICATION_FILE="${NAMESPACEINUSE}.json"
          ENABLE_SUBPROJECT_TASKS=1 ./gradlew :datarepo-client:clean :datarepo-client:assemble
          cd ${GITHUB_WORKSPACE}/${workingDir}/datarepo-clienttests
          export ORG_GRADLE_PROJECT_datarepoclientjar=$(find .. -type f -name "datarepo-client*.jar")
          echo "ORG_GRADLE_PROJECT_datarepoclientjar = ${ORG_GRADLE_PROJECT_datarepoclientjar}"

          echo "Running test suite"
          ./gradlew lockAndRunTest --args="suites/NightlyPerfWorkflow.json tmp/TestRunnerResults"

          echo "Collecting measurements"
          ./gradlew collectMeasurements --args="NightlyPerfWorkflow.json tmp/TestRunnerResults"

          echo "Uploading results"
          ./gradlew uploadResults --args="BroadJadeDev.json tmp/TestRunnerResults"

          cd ${GITHUB_WORKSPACE}/${workingDir}
      #- name: "Run Integration test via Gradle"
      #  uses: broadinstitute/datarepo-actions@0.26.0
      #  with:
      #    actions_subcommand: 'gradleinttest'
      #    pgport: ${{ job.services.postgres.ports[5432] }}
      #    test_to_run: 'testIntegration'
      - name: "Clean state lock from used Namespace on API deploy"
        if: always()
        uses: broadinstitute/datarepo-actions@0.26.0
        with:
          actions_subcommand: 'k8_checknamespace_clean'
      - name: "Clean whitelisted Runner IP"
        if: always()
        uses: broadinstitute/datarepo-actions@0.26.0
        with:
          actions_subcommand: 'gcp_whitelist_clean'
