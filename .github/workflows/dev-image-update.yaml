name: Update devs api image
on:
  push:
    branches:
      - develop
jobs:
  build_deploy_dev_image:
    strategy:
      matrix:
        os: [ubuntu-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          ref: develop
      - name: "Install Java"
        uses: actions/setup-java@v1
        with:
          java-version: 8
      - name: "Install Gradle"
        uses: broadinstitute/gradle-command-action@v1
      - name: "Install Google Cloud SDK"
        uses: GoogleCloudPlatform/github-actions/setup-gcloud@0.1.1
        with:
          version: "279.0.0"
          export_default_credentials: true
      - name: "Install Vault"
        uses: broadinstitute/setup-vault@v1
        with:
          version: "1.3"
      # the vault token and private key are used for connected and integration tests
      - name: "Get Vault token"
        # pull in GitHub secrets as environment variables
        env:
          ROLE_ID: ${{ secrets.ROLE_ID }}
          SECRET_ID: ${{ secrets.SECRET_ID }}
          VAULT_ADDR: ${{ secrets.VAULT_ADDR }}
          GOOGLE_APPLICATION_CREDENTIALS: ${{ secrets.GOOGLE_APPLICATION_CREDENTIALS }}
          GOOGLE_SA_CERT: ${{ secrets.GOOGLE_SA_CERT }}
        run: |
          export VAULT_TOKEN=$(curl \
            --request POST \
            --data '{"role_id":"'"${ROLE_ID}"'","secret_id":"'"${SECRET_ID}"'"}' \
            ${VAULT_ADDR}/v1/auth/approle/login | jq -r .auth.client_token)
          vault read -format=json secret/dsde/datarepo/dev/sa-key.json | \
            jq .data > $GOOGLE_APPLICATION_CREDENTIALS
          jq -r .private_key $GOOGLE_APPLICATION_CREDENTIALS > $GOOGLE_SA_CERT
          chmod 600 $GOOGLE_SA_CERT
      - name: "Configure Google Cloud SDK"
        env:
          GOOGLE_APPLICATION_CREDENTIALS: ${{ secrets.GOOGLE_APPLICATION_CREDENTIALS }}
        run: |
          gcloud auth activate-service-account --key-file $GOOGLE_APPLICATION_CREDENTIALS
          gcloud auth configure-docker
      - name: Set image tag
        run: |
          GCR_TAG=$(git rev-parse --short develop)
          echo "::set-env name=GCR_TAG::${GCR_TAG}"
      - name: Build new api container and push to gcr
        run: |
          ./gradlew jib
      - name: 'Checkout datarepo-helm-definitions repo'
        uses: actions/checkout@v2
        with:
          repository: 'broadinstitute/datarepo-helm-definitions'
          token: ${{ secrets.HELM_REPO_TOKEN }}
          path: datarepo-helm-definitions
      - name: Install Yq
        run: |
          sudo add-apt-repository ppa:rmescandon/yq
          sudo apt update
          sudo apt install yq -y
      - name: Check for new image in gcr.io/broad-jade-dev/jade-data-repo
        env:
          DEV_PROJECT: broad-jade-dev
        run: |
          printf "New image tag to be deployed to dev ${GCR_TAG}\n"
          # check for image before deploy
          gcloud container images list-tags gcr.io/${DEV_PROJECT}/jade-data-repo --filter=${GCR_TAG}
          gcloud container images add-tag gcr.io/${DEV_PROJECT}/jade-data-repo:${GCR_TAG} \
            gcr.io/${DEV_PROJECT}/jade-data-repo:${GCR_TAG}-develop --quiet
      - name: Find and replace image with current develop commit
        run: |
          find . -name devDeployment.yaml -type f -exec sh -c 'yq w -i $1 'datarepo-api.image.tag' $2' sh {} ${GCR_TAG} ';'
      - name: Git add, commit and push
        run: |
          cd datarepo-helm-definitions
          git config --global user.email "robot@jade.team"
          git config --global user.name "imagetagbot"
          git add dev/dev/devDeployment.yaml
          git commit -m "Updated dev image to latest jade-data-repo commit `${GCR_TAG}`"
          git push origin master
      - name: Slack job status
        uses: broadinstitute/action-slack@v2
        with:
          status: ${{ job.status }}
          author_name: Integration Test
          only_mention_fail: smark,jhert
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        if: always()
