/*
 * Data Repository API
 * This document defines the REST API for Data Repository. **Status: design in progress**  There are four top-level endpoints (besides some used by swagger):  * /swagger-ui.html - generated by swagger: swagger API page that provides this documentation and a live UI for      submitting REST requests  * /status - provides the operational status of the service  * /api    - is the authenticated and authorized Data Repository API  * /ga4gh/drs/v1 - is a transcription of the Data Repository Service API  The overall API (/api) currently supports two interfaces:  * Repository - a general and default interface for initial setup, managing ingest and repository metadata  * Resource - an interface for managing billing accounts and resources  The API endpoints are organized by interface. Each interface is separately versioned.  ## Notes on Naming All of the reference items are suffixed with \"Model\". Those names are used as the class names in the generated Java code. It is helpful to distinguish these model classes from other related classes, like the DAO classes and the operation classes.  ## Editing and debugging I have found it best to edit this file directly to make changes and then use the swagger-editor to validate. The errors out of swagger-codegen are not that helpful. In the swagger-editor, it gives you nice errors and links to the place in the YAML where the errors are.  But... the swagger-editor has been a bit of a pain for me to run. I tried the online website and was not able to load my YAML. Instead, I run it locally in a docker container, like this: ``` docker pull swaggerapi/swagger-editor docker run -p 9090:8080 swaggerapi/swagger-editor ``` Then navigate to localhost:9090 in your browser.  I have not been able to get the file upload to work. It is a bit of a PITA, but I copy-paste the source code, replacing what is in the editor. Then make any fixes. Then copy-paste the resulting, valid file back into our source code. Not elegant, but easier than playing detective with the swagger-codegen errors.  This might be something about my browser or environment, so give it a try yourself and see how it goes.  ## Merging the DRS standard swagger into this swagger ##  The merging is done in three sections:  1. Merging the security definitions into our security definitions  2. This section of paths. We make all paths explicit (prefixed with /ga4gh/drs/v1)     All standard DRS definitions and parameters are prefixed with 'DRS' to separate them     from our native definitions and parameters. We remove the x-swagger-router-controller lines.  3. A separate part of the definitions section for the DRS definitions  NOTE: the code here does not relect the DRS spec anymore. See DR-409. 
 *
 * OpenAPI spec version: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package bio.terra.datarepo.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;

/**
 * Request to ingest data from a file in GCS into a table in a dataset. The ingest source must be readable by the DR manager. TODO: other input forms 
 */
@ApiModel(description = "Request to ingest data from a file in GCS into a table in a dataset. The ingest source must be readable by the DR manager. TODO: other input forms ")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2020-09-25T14:51:02.312-04:00")
public class IngestRequestModel {
  @JsonProperty("table")
  private String table = null;

  @JsonProperty("path")
  private String path = null;

  /**
   * Gets or Sets format
   */
  public enum FormatEnum {
    CSV("csv"),
    
    JSON("json");

    private String value;

    FormatEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static FormatEnum fromValue(String text) {
      for (FormatEnum b : FormatEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
  }

  @JsonProperty("format")
  private FormatEnum format = null;

  @JsonProperty("load_tag")
  private String loadTag = null;

  @JsonProperty("max_bad_records")
  private Integer maxBadRecords = null;

  @JsonProperty("ignore_unknown_values")
  private Boolean ignoreUnknownValues = true;

  @JsonProperty("csv_field_delimiter")
  private String csvFieldDelimiter = ",";

  @JsonProperty("csv_quote")
  private String csvQuote = "\"";

  @JsonProperty("csv_skip_leading_rows")
  private Integer csvSkipLeadingRows = null;

  @JsonProperty("csv_allow_quoted_newlines")
  private Boolean csvAllowQuotedNewlines = true;

  @JsonProperty("csv_null_marker")
  private String csvNullMarker = "";

  public IngestRequestModel table(String table) {
    this.table = table;
    return this;
  }

   /**
   * name of the target table for ingest
   * @return table
  **/
  @ApiModelProperty(required = true, value = "name of the target table for ingest")
  public String getTable() {
    return table;
  }

  public void setTable(String table) {
    this.table = table;
  }

  public IngestRequestModel path(String path) {
    this.path = path;
    return this;
  }

   /**
   * gs path to a file in a bucket accessible to data repo
   * @return path
  **/
  @ApiModelProperty(required = true, value = "gs path to a file in a bucket accessible to data repo")
  public String getPath() {
    return path;
  }

  public void setPath(String path) {
    this.path = path;
  }

  public IngestRequestModel format(FormatEnum format) {
    this.format = format;
    return this;
  }

   /**
   * Get format
   * @return format
  **/
  @ApiModelProperty(required = true, value = "")
  public FormatEnum getFormat() {
    return format;
  }

  public void setFormat(FormatEnum format) {
    this.format = format;
  }

  public IngestRequestModel loadTag(String loadTag) {
    this.loadTag = loadTag;
    return this;
  }

   /**
   * Get loadTag
   * @return loadTag
  **/
  @ApiModelProperty(value = "")
  public String getLoadTag() {
    return loadTag;
  }

  public void setLoadTag(String loadTag) {
    this.loadTag = loadTag;
  }

  public IngestRequestModel maxBadRecords(Integer maxBadRecords) {
    this.maxBadRecords = maxBadRecords;
    return this;
  }

   /**
   * max number of bad records to skip; applies to JSON and CSV
   * @return maxBadRecords
  **/
  @ApiModelProperty(value = "max number of bad records to skip; applies to JSON and CSV")
  public Integer getMaxBadRecords() {
    return maxBadRecords;
  }

  public void setMaxBadRecords(Integer maxBadRecords) {
    this.maxBadRecords = maxBadRecords;
  }

  public IngestRequestModel ignoreUnknownValues(Boolean ignoreUnknownValues) {
    this.ignoreUnknownValues = ignoreUnknownValues;
    return this;
  }

   /**
   * skip extra data; applies to JSON and CSV
   * @return ignoreUnknownValues
  **/
  @ApiModelProperty(value = "skip extra data; applies to JSON and CSV")
  public Boolean isIgnoreUnknownValues() {
    return ignoreUnknownValues;
  }

  public void setIgnoreUnknownValues(Boolean ignoreUnknownValues) {
    this.ignoreUnknownValues = ignoreUnknownValues;
  }

  public IngestRequestModel csvFieldDelimiter(String csvFieldDelimiter) {
    this.csvFieldDelimiter = csvFieldDelimiter;
    return this;
  }

   /**
   * field separator
   * @return csvFieldDelimiter
  **/
  @ApiModelProperty(value = "field separator")
  public String getCsvFieldDelimiter() {
    return csvFieldDelimiter;
  }

  public void setCsvFieldDelimiter(String csvFieldDelimiter) {
    this.csvFieldDelimiter = csvFieldDelimiter;
  }

  public IngestRequestModel csvQuote(String csvQuote) {
    this.csvQuote = csvQuote;
    return this;
  }

   /**
   * quoting character
   * @return csvQuote
  **/
  @ApiModelProperty(value = "quoting character")
  public String getCsvQuote() {
    return csvQuote;
  }

  public void setCsvQuote(String csvQuote) {
    this.csvQuote = csvQuote;
  }

  public IngestRequestModel csvSkipLeadingRows(Integer csvSkipLeadingRows) {
    this.csvSkipLeadingRows = csvSkipLeadingRows;
    return this;
  }

   /**
   * number of header rows to skip
   * @return csvSkipLeadingRows
  **/
  @ApiModelProperty(value = "number of header rows to skip")
  public Integer getCsvSkipLeadingRows() {
    return csvSkipLeadingRows;
  }

  public void setCsvSkipLeadingRows(Integer csvSkipLeadingRows) {
    this.csvSkipLeadingRows = csvSkipLeadingRows;
  }

  public IngestRequestModel csvAllowQuotedNewlines(Boolean csvAllowQuotedNewlines) {
    this.csvAllowQuotedNewlines = csvAllowQuotedNewlines;
    return this;
  }

   /**
   * Get csvAllowQuotedNewlines
   * @return csvAllowQuotedNewlines
  **/
  @ApiModelProperty(value = "")
  public Boolean isCsvAllowQuotedNewlines() {
    return csvAllowQuotedNewlines;
  }

  public void setCsvAllowQuotedNewlines(Boolean csvAllowQuotedNewlines) {
    this.csvAllowQuotedNewlines = csvAllowQuotedNewlines;
  }

  public IngestRequestModel csvNullMarker(String csvNullMarker) {
    this.csvNullMarker = csvNullMarker;
    return this;
  }

   /**
   * Get csvNullMarker
   * @return csvNullMarker
  **/
  @ApiModelProperty(value = "")
  public String getCsvNullMarker() {
    return csvNullMarker;
  }

  public void setCsvNullMarker(String csvNullMarker) {
    this.csvNullMarker = csvNullMarker;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IngestRequestModel ingestRequestModel = (IngestRequestModel) o;
    return Objects.equals(this.table, ingestRequestModel.table) &&
        Objects.equals(this.path, ingestRequestModel.path) &&
        Objects.equals(this.format, ingestRequestModel.format) &&
        Objects.equals(this.loadTag, ingestRequestModel.loadTag) &&
        Objects.equals(this.maxBadRecords, ingestRequestModel.maxBadRecords) &&
        Objects.equals(this.ignoreUnknownValues, ingestRequestModel.ignoreUnknownValues) &&
        Objects.equals(this.csvFieldDelimiter, ingestRequestModel.csvFieldDelimiter) &&
        Objects.equals(this.csvQuote, ingestRequestModel.csvQuote) &&
        Objects.equals(this.csvSkipLeadingRows, ingestRequestModel.csvSkipLeadingRows) &&
        Objects.equals(this.csvAllowQuotedNewlines, ingestRequestModel.csvAllowQuotedNewlines) &&
        Objects.equals(this.csvNullMarker, ingestRequestModel.csvNullMarker);
  }

  @Override
  public int hashCode() {
    return Objects.hash(table, path, format, loadTag, maxBadRecords, ignoreUnknownValues, csvFieldDelimiter, csvQuote, csvSkipLeadingRows, csvAllowQuotedNewlines, csvNullMarker);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IngestRequestModel {\n");
    
    sb.append("    table: ").append(toIndentedString(table)).append("\n");
    sb.append("    path: ").append(toIndentedString(path)).append("\n");
    sb.append("    format: ").append(toIndentedString(format)).append("\n");
    sb.append("    loadTag: ").append(toIndentedString(loadTag)).append("\n");
    sb.append("    maxBadRecords: ").append(toIndentedString(maxBadRecords)).append("\n");
    sb.append("    ignoreUnknownValues: ").append(toIndentedString(ignoreUnknownValues)).append("\n");
    sb.append("    csvFieldDelimiter: ").append(toIndentedString(csvFieldDelimiter)).append("\n");
    sb.append("    csvQuote: ").append(toIndentedString(csvQuote)).append("\n");
    sb.append("    csvSkipLeadingRows: ").append(toIndentedString(csvSkipLeadingRows)).append("\n");
    sb.append("    csvAllowQuotedNewlines: ").append(toIndentedString(csvAllowQuotedNewlines)).append("\n");
    sb.append("    csvNullMarker: ").append(toIndentedString(csvNullMarker)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

