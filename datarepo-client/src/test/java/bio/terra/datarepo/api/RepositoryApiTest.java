/*
 * Data Repository API
 * This document defines the REST API for Data Repository. **Status: design in progress**  There are four top-level endpoints (besides some used by swagger):  * /swagger-ui.html - generated by swagger: swagger API page that provides this documentation and a live UI for      submitting REST requests  * /status - provides the operational status of the service  * /api    - is the authenticated and authorized Data Repository API  * /ga4gh/drs/v1 - is a transcription of the Data Repository Service API  The overall API (/api) currently supports two interfaces:  * Repository - a general and default interface for initial setup, managing ingest and repository metadata  * Resource - an interface for managing billing accounts and resources  The API endpoints are organized by interface. Each interface is separately versioned.  ## Notes on Naming All of the reference items are suffixed with \"Model\". Those names are used as the class names in the generated Java code. It is helpful to distinguish these model classes from other related classes, like the DAO classes and the operation classes.  ## Editing and debugging I have found it best to edit this file directly to make changes and then use the swagger-editor to validate. The errors out of swagger-codegen are not that helpful. In the swagger-editor, it gives you nice errors and links to the place in the YAML where the errors are.  But... the swagger-editor has been a bit of a pain for me to run. I tried the online website and was not able to load my YAML. Instead, I run it locally in a docker container, like this: ``` docker pull swaggerapi/swagger-editor docker run -p 9090:8080 swaggerapi/swagger-editor ``` Then navigate to localhost:9090 in your browser.  I have not been able to get the file upload to work. It is a bit of a PITA, but I copy-paste the source code, replacing what is in the editor. Then make any fixes. Then copy-paste the resulting, valid file back into our source code. Not elegant, but easier than playing detective with the swagger-codegen errors.  This might be something about my browser or environment, so give it a try yourself and see how it goes.  ## Merging the DRS standard swagger into this swagger ##  The merging is done in three sections:  1. Merging the security definitions into our security definitions  2. This section of paths. We make all paths explicit (prefixed with /ga4gh/drs/v1)     All standard DRS definitions and parameters are prefixed with 'DRS' to separate them     from our native definitions and parameters. We remove the x-swagger-router-controller lines.  3. A separate part of the definitions section for the DRS definitions  NOTE: the code here does not relect the DRS spec anymore. See DR-409. 
 *
 * OpenAPI spec version: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package bio.terra.datarepo.api;

import bio.terra.datarepo.client.ApiException;
import bio.terra.datarepo.model.AssetModel;
import bio.terra.datarepo.model.BulkLoadArrayRequestModel;
import bio.terra.datarepo.model.BulkLoadRequestModel;
import bio.terra.datarepo.model.ConfigEnableModel;
import bio.terra.datarepo.model.ConfigGroupModel;
import bio.terra.datarepo.model.ConfigListModel;
import bio.terra.datarepo.model.ConfigModel;
import bio.terra.datarepo.model.DataDeletionRequest;
import bio.terra.datarepo.model.DatasetModel;
import bio.terra.datarepo.model.DatasetRequestModel;
import bio.terra.datarepo.model.EnumerateDatasetModel;
import bio.terra.datarepo.model.EnumerateSnapshotModel;
import bio.terra.datarepo.model.ErrorModel;
import bio.terra.datarepo.model.FileLoadModel;
import bio.terra.datarepo.model.FileModel;
import bio.terra.datarepo.model.IngestRequestModel;
import bio.terra.datarepo.model.JobModel;
import bio.terra.datarepo.model.PolicyMemberRequest;
import bio.terra.datarepo.model.PolicyResponse;
import bio.terra.datarepo.model.SnapshotModel;
import bio.terra.datarepo.model.SnapshotRequestModel;
import bio.terra.datarepo.model.UserStatusInfo;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for RepositoryApi
 */
@Ignore
public class RepositoryApiTest {

    private final RepositoryApi api = new RepositoryApi();

    
    /**
     * 
     *
     * Add an asset definiion to a dataset
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addDatasetAssetSpecificationsTest() throws ApiException {
        String id = null;
        AssetModel assetModel = null;
        JobModel response = api.addDatasetAssetSpecifications(id, assetModel);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Adds a member to the specified policy for the snapshot
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addDatasetPolicyMemberTest() throws ApiException {
        String id = null;
        String policyName = null;
        PolicyMemberRequest policyMember = null;
        PolicyResponse response = api.addDatasetPolicyMember(id, policyName, policyMember);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Adds a member to the specified policy for the snapshot
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addSnapshotPolicyMemberTest() throws ApiException {
        String id = null;
        String policyName = null;
        PolicyMemberRequest policyMember = null;
        PolicyResponse response = api.addSnapshotPolicyMember(id, policyName, policyMember);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Applies deletes to primary tabular data in a dataset
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void applyDatasetDataDeletionTest() throws ApiException {
        String id = null;
        DataDeletionRequest dataDeletionRequest = null;
        JobModel response = api.applyDatasetDataDeletion(id, dataDeletionRequest);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Load many files into the dataset file system; async returns a BulkLoadResultModel Note that this endpoint is not a single transaction. Some files may be loaded and others may fail. Each file load is atomic; the file will either be loaded into the dataset file system or it will not exist.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void bulkFileLoadTest() throws ApiException {
        String id = null;
        BulkLoadRequestModel bulkFileLoad = null;
        JobModel response = api.bulkFileLoad(id, bulkFileLoad);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Load many files into the dataset file system; async returns a BulkLoadArrayResultModel Note that this endpoint is not a single transaction. Some files may be loaded and others may fail. Each file load is atomic; the file will either be loaded into the dataset file system or it will not exist.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void bulkFileLoadArrayTest() throws ApiException {
        String id = null;
        BulkLoadArrayRequestModel bulkFileLoadArray = null;
        JobModel response = api.bulkFileLoadArray(id, bulkFileLoadArray);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Delete results from the bulk file load table of the dataset. If jobId is specified, then only the results for the loadTag plus that jobId are deleted. Otherwise, all results associated with the loadTag are deleted.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void bulkFileResultsDeleteTest() throws ApiException {
        String id = null;
        String loadtag = null;
        String jobId = null;
        JobModel response = api.bulkFileResultsDelete(id, loadtag, jobId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Retrieve the results of a bulk file load. The results of each bulk load are stored in the dataset. They can be queried directly or retrieved with this paginated interface.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void bulkFileResultsGetTest() throws ApiException {
        String id = null;
        String loadtag = null;
        String jobId = null;
        Integer offset = null;
        Integer limit = null;
        JobModel response = api.bulkFileResultsGet(id, loadtag, jobId, offset, limit);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Create a new dataset asynchronously. The async result is DatasetSummaryModel.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createDatasetTest() throws ApiException {
        DatasetRequestModel dataset = null;
        JobModel response = api.createDataset(dataset);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Create a new snapshot
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createSnapshotTest() throws ApiException {
        SnapshotRequestModel snapshot = null;
        JobModel response = api.createSnapshot(snapshot);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Delete a dataset by id
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteDatasetTest() throws ApiException {
        String id = null;
        JobModel response = api.deleteDataset(id);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Removes the member from the specified policy for the snapshot
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteDatasetPolicyMemberTest() throws ApiException {
        String id = null;
        String policyName = null;
        String memberEmail = null;
        PolicyResponse response = api.deleteDatasetPolicyMember(id, policyName, memberEmail);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Hard delete of a file by id. The file is deleted even if it is in use by a dataset. Subsequent lookups will give not found errors. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteFileTest() throws ApiException {
        String id = null;
        String fileid = null;
        JobModel response = api.deleteFile(id, fileid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Delete the job and data associated with it
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteJobTest() throws ApiException {
        String id = null;
        api.deleteJob(id);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Delete a snapshot by id
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSnapshotTest() throws ApiException {
        String id = null;
        JobModel response = api.deleteSnapshot(id);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Adds a member to the specified policy for the snapshot
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSnapshotPolicyMemberTest() throws ApiException {
        String id = null;
        String policyName = null;
        String memberEmail = null;
        PolicyResponse response = api.deleteSnapshotPolicyMember(id, policyName, memberEmail);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Returns a list of all of the datasets the caller has access to 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void enumerateDatasetsTest() throws ApiException {
        Integer offset = null;
        Integer limit = null;
        String sort = null;
        String direction = null;
        String filter = null;
        EnumerateDatasetModel response = api.enumerateDatasets(offset, limit, sort, direction, filter);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Returns a list of all of the jobs the caller has access to 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void enumerateJobsTest() throws ApiException {
        Integer offset = null;
        Integer limit = null;
        List<JobModel> response = api.enumerateJobs(offset, limit);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Returns a list of all of the snapshots the caller has access to 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void enumerateSnapshotsTest() throws ApiException {
        Integer offset = null;
        Integer limit = null;
        String sort = null;
        String direction = null;
        String filter = null;
        EnumerateSnapshotModel response = api.enumerateSnapshots(offset, limit, sort, direction, filter);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get one configuration
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getConfigTest() throws ApiException {
        String name = null;
        ConfigModel response = api.getConfig(name);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get all configurations
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getConfigListTest() throws ApiException {
        ConfigListModel response = api.getConfigList();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Ingest data into a dataset table
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void ingestDatasetTest() throws ApiException {
        String id = null;
        IngestRequestModel ingest = null;
        JobModel response = api.ingestDataset(id, ingest);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Ingest one file into the dataset file system; async returns a FileModel
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void ingestFileTest() throws ApiException {
        String id = null;
        FileLoadModel ingestFile = null;
        JobModel response = api.ingestFile(id, ingestFile);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Lookup metadata for one file
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void lookupFileByIdTest() throws ApiException {
        String id = null;
        String fileid = null;
        Integer depth = null;
        FileModel response = api.lookupFileById(id, fileid, depth);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Lookup metadata for one file
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void lookupFileByPathTest() throws ApiException {
        String id = null;
        String path = null;
        Integer depth = null;
        FileModel response = api.lookupFileByPath(id, path, depth);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Lookup metadata for one file
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void lookupSnapshotFileByIdTest() throws ApiException {
        String id = null;
        String fileid = null;
        Integer depth = null;
        FileModel response = api.lookupSnapshotFileById(id, fileid, depth);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Lookup metadata for one file
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void lookupSnapshotFileByPathTest() throws ApiException {
        String id = null;
        String path = null;
        Integer depth = null;
        FileModel response = api.lookupSnapshotFileByPath(id, path, depth);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Remove an asset definiion from a dataset
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void removeDatasetAssetSpecificationsTest() throws ApiException {
        String id = null;
        String assetid = null;
        JobModel response = api.removeDatasetAssetSpecifications(id, assetid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Reset the configuration to original settings
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void resetConfigTest() throws ApiException {
        api.resetConfig();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Retrieve a dataset by id
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveDatasetTest() throws ApiException {
        String id = null;
        DatasetModel response = api.retrieveDataset(id);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Retrieve the read and discover policies for the snapshot
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveDatasetPoliciesTest() throws ApiException {
        String id = null;
        PolicyResponse response = api.retrieveDatasetPolicies(id);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Retrieve a job&#39;s status by id
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveJobTest() throws ApiException {
        String id = null;
        JobModel response = api.retrieveJob(id);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Retrieve a job&#39;s result by id
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveJobResultTest() throws ApiException {
        String id = null;
        Object response = api.retrieveJobResult(id);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Retrieve a snapshot by id
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveSnapshotTest() throws ApiException {
        String id = null;
        SnapshotModel response = api.retrieveSnapshot(id);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Retrieve the read and discover policies for the snapshot
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveSnapshotPoliciesTest() throws ApiException {
        String id = null;
        PolicyResponse response = api.retrieveSnapshotPolicies(id);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Set the a group of configurations
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setConfigListTest() throws ApiException {
        ConfigGroupModel configModel = null;
        ConfigListModel response = api.setConfigList(configModel);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Enable or disable the named fault. Performing the put on a config that is not a fault is an error. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setFaultTest() throws ApiException {
        String name = null;
        ConfigEnableModel configEnable = null;
        api.setFault(name, configEnable);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Returns whether the user is registered with terra 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void userTest() throws ApiException {
        UserStatusInfo response = api.user();

        // TODO: test validations
    }
    
}
