name: DataRepo Alpha Tests and Prod GCR Promotion
env:
  K8_CLUSTER: jade-master-us-central1
  GOOGLE_APPLICATION_CREDENTIALS: /tmp/alpha-test-runner.json
  GOOGLE_CLOUD_PROJECT: terra-datarepo-alpha
  GOOGLE_CLOUD_DATA_PROJECT: terra-datarepo-alpha-data
  TDR_LOG_APPENDER: Console-Standard
  GCR_DEV_URL: gcr.io/broad-jade-dev/
  GCR_PROD_URL: gcr.io/terra-datarepo-production/
  API_REPO: jade-data-repo
  UI_REPO: jade-data-repo-ui
on:
  # Jenkins will kick this job off manually after Alpha is deployed
  workflow_dispatch: {}
jobs:
  alpha-integration-test:
    runs-on: ubuntu-latest
    steps:
    - name: "Checkout jade-data-repo and latest tags"
      uses: actions/checkout@v2
      with:
        fetch-depth: 0
    - name: 'Checkout terra-helmfile repo'
      uses: actions/checkout@v2
      with:
        repository: 'broadinstitute/terra-helmfile'
        token: ${{ secrets.TERRA_HELMFILE_TOKEN }}
        path: terra-helmfile
        persist-credentials: false
    - name: "Read alpha version from terra-helmfile" 
      id: terrahelmfile
      run: |
        alpha_version_api=$(docker run --rm -v ${PWD}:/workdir mikefarah/yq:3 yq r terra-helmfile/versions/alpha.yaml releases.datarepo.appVersion)
        echo "::set-output name=alpha_version_api::$alpha_version_api"
        echo "Alpha Version: $alpha_version_api"
    - name: "Checkout tag for DataBiosphere/jade-data-repo"
      if: github.ref == 'refs/heads/develop'
      run: |
        git checkout ${{ steps.terrahelmfile.outputs.alpha_version_api }}
        echo "Current branch is ${{ github.ref }}"
    - name: "Import Vault Secrets for Alpha Test Runner Service Account"
      uses: hashicorp/vault-action@v2.1.0
      with:
        url: ${{ secrets.VAULT_ADDR }}
        method: approle
        roleId: ${{ secrets.ALPHA_ROLE_ID }}
        secretId: ${{ secrets.ALPHA_SECRET_ID }}
        secrets: |
          secret/dsde/datarepo/alpha/test-runner-sa key | B64_APPLICATION_CREDENTIALS ;
    - name: "Perform IAM policy cleanup for Alpha"
      run: |
        # write vault tokens
        base64 --decode <<< ${B64_APPLICATION_CREDENTIALS} > ${GOOGLE_APPLICATION_CREDENTIALS}

        gcloud auth activate-service-account --key-file ${GOOGLE_APPLICATION_CREDENTIALS}

        ./tools/cleanupPolicies.sh ${GOOGLE_CLOUD_DATA_PROJECT}
    - name: "Import Vault Secrets for Dev Service Account"
      uses: hashicorp/vault-action@v2.1.0
      with:
        url: ${{ secrets.VAULT_ADDR }}
        method: approle
        roleId: ${{ secrets.ROLE_ID }}
        secretId: ${{ secrets.SECRET_ID }}
        secrets: |
          secret/dsde/datarepo/dev/sa-key-b64 sa | B64_APPLICATION_CREDENTIALS ;
    - name: "Add jade-k8-sa credentials to run as Harry Potter test users"
      env:
        # note: hack to overwrite the env var to grab the dev credentials too
        GOOGLE_APPLICATION_CREDENTIALS: /tmp/jade-dev-account.json
      run: |
        # write vault tokens
        base64 --decode <<< ${B64_APPLICATION_CREDENTIALS} > ${GOOGLE_APPLICATION_CREDENTIALS}
    - name: "Build and run Test Runner"
      run: |
        cd ${GITHUB_WORKSPACE}/${workingDir}
        echo "Building Data Repo client library"
        export TEST_RUNNER_SERVER_SPECIFICATION_FILE="alpha.json"
        export TEST_RUNNER_BILLING_PROFILE_NAME="stest1"
        ENABLE_SUBPROJECT_TASKS=1 ./gradlew :datarepo-client:clean :datarepo-client:assemble
        cd ${GITHUB_WORKSPACE}/${workingDir}/datarepo-clienttests
        export ORG_GRADLE_PROJECT_datarepoclientjar=$(find .. -type f -name "datarepo-client*.jar")
        echo "ORG_GRADLE_PROJECT_datarepoclientjar = ${ORG_GRADLE_PROJECT_datarepoclientjar}"

          
        echo "[INFO] Running spotless and spotbugs"
        ./gradlew spotlessCheck
        ./gradlew spotbugsMain

        outputDir="/tmp/TestRunnerResults"
        echo "Output directory set to: $outputDir"
  
        echo "[INFO] Running tests"
        ./gradlew runTest --args="suites/AlphaSmokeTests.json $outputDir" ||
          (echo "Running tests FAILED" &&
          ./gradlew uploadResults --args="BroadJadeDev.json $outputDir" &&
          return 1)
        echo "[INFO] Running test suite SUCCEEDED"

        echo "[INFO] Collecting measurements"
        ./gradlew collectMeasurements --args="AlphaSmokeTests.json $outputDir" ||
          (echo "Collecting measurements FAILED" &&
          ./gradlew uploadResults --args="BroadJadeDev.json $outputDir" &&
          return 1)
        echo "[INFO] Collecting measurements SUCCEEDED"

        echo "[INFO] Uploading results"
        ./gradlew uploadResults --args="BroadJadeDev.json $outputDir"
        echo "[INFO] Uploading results SUCCEEDED"
        cd ${GITHUB_WORKSPACE}/${workingDir}
    - name: "[Cherry-pick to Prod GCR] Import Vault Secrets for Production GCR Service Account"
      uses: hashicorp/vault-action@v2.1.0
      with:
        url: ${{ secrets.VAULT_ADDR }}
        method: approle
        roleId: ${{ secrets.PROD_ROLE_ID }}
        secretId: ${{ secrets.PROD_SECRET_ID }}
        secrets: |
          secret/dsde/datarepo/production/gcr-sa key | B64_APPLICATION_CREDENTIALS ;
    - name: "[Cherry-pick to Prod GCR] Authenticate with Prod GCR SA Credentials"
      env:
        GOOGLE_APPLICATION_CREDENTIALS: /tmp/prod-gcr-sa.json
      run: |
        # write vault tokens
        base64 --decode <<< ${B64_APPLICATION_CREDENTIALS} > ${GOOGLE_APPLICATION_CREDENTIALS}

        gcloud auth activate-service-account --key-file ${GOOGLE_APPLICATION_CREDENTIALS}
    - name: "[API][Cherry-pick to Prod GCR] Perform cherry-pick"
      run: |
        dev_image=(${GCR_DEV_URL}${API_REPO}:${{ steps.terrahelmfile.outputs.alpha_version_api }})
        prod_image=(${GCR_PROD_URL}${API_REPO}:${{ steps.terrahelmfile.outputs.alpha_version_api }})
        echo "Cherry picking ${{ steps.terrahelmfile.outputs.alpha_version_api }} from $dev_image to $prod_image"
        gcloud container images add-tag --quiet "$dev_image" "$prod_image"
    - name: "[UI][Cherry-pick to Prod GCR] Checkout datarepo-helm repo"
      uses: actions/checkout@v2
      with:
        repository: 'broadinstitute/datarepo-helm'
        token: ${{ secrets.HELM_REPO_TOKEN }}
        path: datarepo-helm
    - name: "[UI][Cherry-pick to Prod GCR] Read UI version from datarepo-helm" 
      id: datarepohelm
      run: |
        alpha_version_ui=$(docker run --rm -v ${PWD}:/workdir mikefarah/yq:3 yq r datarepo-helm/charts/datarepo-ui/values.yaml image.tag)
        echo "::set-output name=alpha_version_ui::$alpha_version_ui"
        echo "Alpha UI Version: $alpha_version_ui"
    - name: "[UI][Cherry-pick to Prod GCR] Perform cherry-pick"
      run: |
        dev_image=(${GCR_DEV_URL}${UI_REPO}:${{ steps.datarepohelm.outputs.alpha_version_ui }})
        prod_image=(${GCR_PROD_URL}${UI_REPO}:${{ steps.datarepohelm.outputs.alpha_version_ui }})
        echo "Cherry picking ${{ steps.datarepohelm.outputs.alpha_version_ui }} from $dev_image to $prod_image"
        gcloud container images add-tag --quiet "$dev_image" "$prod_image"
    - name: "Notify Slack"
      if: always()
      uses: broadinstitute/action-slack@v3.8.0
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      with:
        status: ${{ job.status }}
        fields: repo,message,commit,author,action,eventName,ref,workflow,job,took
        channel: "#jade-alerts"
        username: "Data Repo tests"
        text: "Alpha Smoke tests"
