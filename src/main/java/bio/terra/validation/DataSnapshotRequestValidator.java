package bio.terra.validation;

import bio.terra.model.DataSnapshotRequestContentsModel;

import bio.terra.model.DataSnapshotRequestModel;
import bio.terra.model.DataSnapshotRequestSourceModel;
import org.springframework.stereotype.Component;
import org.springframework.validation.Errors;
import org.springframework.validation.Validator;

import javax.validation.constraints.NotNull;
import java.util.List;

/**
 * This validator runs along with the constraint validation that comes from the Models generated by swagger-codegen.
 * The constraints will be able to handle things like nulls, but not things like uniqueness or other structural
 * validations.
 *
 * There are a lot of null checks here because this will still be called even if a constraint validation failed.
 * Spring will not shortcut out early if a validation fails, so this Validator will still get nulls and should only
 * validate if the field is present.
 */
@Component
public class DataSnapshotRequestValidator implements Validator {

    @Override
    public boolean supports(Class<?> clazz) {
        return true;
    }


    private void validateDataSnapshotName(String dataSnapshotName, Errors errors) {
        if (dataSnapshotName == null) {
            errors.rejectValue("name", "DataSnapshotNameMissing");
        } else if (!ValidationUtils.isValidName(dataSnapshotName)) {
            errors.rejectValue("name", "DataSnapshotNameInvalid");
        }
    }

    private void validateDataSnapshotValues(List<DataSnapshotRequestContentsModel> contentsList, Errors errors) {
        if (contentsList == null || contentsList.isEmpty()) {
            errors.rejectValue("contents", "DataSnapshotSourceListEmpty");
        } else {
            contentsList.forEach(contents -> {
                List<String> rootValues = contents.getRootValues();
                if (rootValues == null || rootValues.isEmpty()) {
                    errors.rejectValue("contents", "DataSnapshotRootValuesListEmpty");
                }
                DataSnapshotRequestSourceModel source = contents.getSource();
                String studyName = source.getStudyName();
                String assetName = source.getAssetName();
                if (studyName == null) {
                    errors.rejectValue("contents", "DataSnapshotStudyNameMissing");
                } else if (!ValidationUtils.isValidName(studyName)) {
                    errors.rejectValue("contents", "DataSnapshotStudyNameInvalid");
                }
                if (assetName == null) {
                    errors.rejectValue("contents", "DataSnapshotAssetNameMissing");
                } else if (!ValidationUtils.isValidName(assetName)) {
                    errors.rejectValue("contents", "DataSnapshotAssetNameInvalid");
                }
            });
        }
    }

    private void validateDataSnapshotDescription(String description, Errors errors) {
        if (description == null) {
            errors.rejectValue("description", "DataSnapshotDescriptionMissing");
        } else if (!ValidationUtils.isValidDescription(description)) {
            errors.rejectValue("description", "DataSnapshotDescriptionTooLong");
        }
    }

    @Override
    public void validate(@NotNull Object target, Errors errors) {
        if (target != null && target instanceof DataSnapshotRequestModel) {
            DataSnapshotRequestModel dataSnapshotRequestModel = (DataSnapshotRequestModel) target;
            validateDataSnapshotName(dataSnapshotRequestModel.getName(), errors);
            validateDataSnapshotDescription(dataSnapshotRequestModel.getDescription(), errors);
            validateDataSnapshotValues(dataSnapshotRequestModel.getContents(), errors);
        }
    }
}
