# [dd] It seems like openapi 3.0 is released, but swagger-codegen does not yet support it.
# We should move to 3.0 when swagger-codegen is ready.

swagger: '2.0'
info:
  title: Data Repository API
  description: |
    This document defines the REST API for Data Repository.
    **Status: design in progress**

    There are three top-level endpoints (besides some used by swagger):
     * /       - generated by swagger: swagger API page that provides this documentation and a live UI for submitting REST requests
     * /status - provides the operational status of the service
     * /api    - is the authenticated and authorized Data Repository API

    The overall API (/api) currently supports one interface:
     * Repository - a general and default interface for initial setup

    The API endpoints are organized by interface. Each interface is separately versioned.

    ## Notes on Naming
    All of the reference items are suffixed with "Model". Those names are used as the class names in the generated Java code.
    It is helpful to distinguish these model classes from other related classes, like the DAO classes and the operation classes.

    ## Editing and debugging
    I have found it best to edit this file directly to make changes and then use the swagger-editor to validate. The errors
    out of swagger-codegen are not that helpful. In the swagger-editor, it gives you nice errors and links to the place in
    the YAML where the errors are.

    But... the swagger-editor has been a bit of a pain for me to run. I tried the online website and was not able to load my
    YAML. Instead, I run it locally in a docker container, like this:
    ```
    docker pull swaggerapi/swagger-editor
    docker run -p 9090:8080 swaggerapi/swagger-editor
    ```
    Then navigate to localhost:9090 in your browser.

    I have not been able to get the file upload to work. It is a bit of a PITA, but I copy-paste the source code,
    replacing what is in the editor. Then make any fixes. Then copy-paste the resulting, valid file back into our source
    code. Not elegant, but easier than playing detective with the swagger-codegen errors.

    This might be something about my browser or environment, so give it a try yourself and see how it goes.

  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html

  version: "0.1.0"

basePath: /
consumes:
  - application/json
produces:
  - application/json

##########################################################################################
# PATHS
##########################################################################################
paths:

  ## Unauthenticated endpoints

  '/status':
    get:
      description: |
        Returns the operational status of the service
      operationId: serviceStatus
      tags:
        - unauthenticated
      responses:
        200:
          description: service is fine
        500:
          description: service is broken

  ## Repository Interface

  '/api/repository/v1/datasets':
    get:  ## enumerate
      description: |
        Returns a list of all of the datasets the caller has access to
      operationId: enumerateDatasets
      tags:
      - repository
      responses:
        200:
          description: List of datasets
          schema:
            type: array
            items:
              $ref: '#/definitions/DatasetSummaryModel'

    post:
      description: Create a new dataset
      operationId: createDataset
      tags:
      - repository
      parameters:
      - in: body
        name: dataset
        description: Dataset to create
        schema:
          $ref: '#/definitions/DatasetRequestModel'
      responses:
        202: # kicks off a create dataset job
          description: Dataset creation job started & url for polling is in the response header
          headers:
            location:
              type: string
              description: url for the job poller
        400:
          description: Bad request - invalid name, badly formed
        403:
          description: No permission to create datasets
        409:
          description: Dataset with this name already exists


  '/api/repository/v1/datasets/{id}':
    get:  ## retrieve
      description: Retrieve a dataset by id
      operationId: retrieveDataset
      tags:
      - repository
      parameters:
        - $ref: '#/parameters/Id'
      responses:
        200:
          description: Dataset
          schema:
            $ref: '#/definitions/DatasetModel'
        400:
          description: Bad request - invalid id, badly formed
        403:
          description: No permission to see dataset
        404:
          description: Not found - dataset id does not exist

    delete: ## delete
      description: Delete a dataset by id
      operationId: deleteDataset
      tags:
      - repository
      parameters:
        - $ref: '#/parameters/Id'
      responses:
        202: # kicks off a delete dataset job
          description: Dataset deletion job started & url for polling is in the response header
          headers:
            location:
              type: string
              description: url for the job poller
        400:
          description: Bad request - invalid id, badly formed
        403:
          description: No permission to delete dataset
        404:
          description: Not found - dataset id does not exist
        409:
          description: Dataset in use?

  '/api/repository/v1/studies':
    get:  ## enumerate
      description: |
        Returns a list of all of the studies the caller has access to
      operationId: enumerateStudies
      tags:
      - repository
      responses:
        200:
          description: List of studies
          schema:
            type: array
            items:
              $ref: '#/definitions/StudySummaryModel'

    post:
      description: Create a new study
      operationId: createStudy
      tags:
      - repository
      parameters:
      - in: body
        name: study
        description: Study to create
        schema:
          $ref: '#/definitions/StudyRequestModel'
      responses:
        201:
          description: Study created successfully and a summary is returned
          schema:
            $ref: '#/definitions/StudySummaryModel'
        400:
          description: Bad request - duplicate name, invalid name, badly formed schema
        403:
          description: No permission to create studies

  '/api/repository/v1/studies/{id}':
    get:  ## retrieve
      description: Retrieve a study by id
      operationId: retrieveStudy
      tags:
      - repository
      parameters:
      - $ref: '#/parameters/Id'
      responses:
        200:
          description: Study
          schema:
            $ref: '#/definitions/StudyModel'
        400:
          description: Bad request - invalid id, badly formed
        403:
          description: No permission to see study
        404:
          description: Not found - study id does not exist

    delete: ## delete
      description: Delete a study by id
      operationId: deleteStudy
      tags:
      - repository
      parameters:
      - $ref: '#/parameters/Id'
      responses:
        202: # kicks off a delete study job
          description: Study deletion job started & url for polling is in the response header
          headers:
            location:
              type: string
              description: url for the job poller
        400:
          description: Bad request - invalid id, badly formed
        403:
          description: No permission to delete study
        404:
          description: Not found - study id does not exist
        409:
          description: Study in use by at least one dataset

  '/api/repository/v1/jobs':
    # '/api/repository/v1/jobs?offset=100&limit=50':
    get:  ## enumerate
      description: |
        Returns a list of all of the jobs the caller has access to
      operationId: enumerateJobs
      tags:
      - repository
      parameters:
      - in: query
        name: offset
        type: integer
        description: The number of items to skip before starting to collect the result set.
      - in: query
        name: limit
        type: integer
        description: The numbers of items to return.
      responses:
        200:
          description: List of jobs
          schema:
            type: array
            items:
              $ref: '#/definitions/JobModel'

  '/api/repository/v1/jobs/{id}':
    get:  ## retrieve
      description: Retrieve a job's status by id
      operationId: retrieveJob
      tags:
      - repository
      parameters:
      - $ref: '#/parameters/Id'
      responses:
        200:
          description: Job status
          schema:
            $ref: '#/definitions/JobModel'
          headers:
            location:
              type: string
              description: url for the job polling
        303:
          description: Redirect for object successful creation
          headers:
            location:
              type: string
              description: url for the job result
        400:
          description: Bad request - invalid id, badly formed
        403:
          description: No permission to see job
        404:
          description: Not found - job id does not exist


  '/api/repository/v1/jobs/{id}/result':
    get:  ## retrieve
      description: Retrieve a job's result by id
      operationId: retrieveJobResult
      tags:
      - repository
      parameters:
      - $ref: '#/parameters/Id'
      responses: ## successful responses return the type of model specified by the job
        default:
          schema:
            type: object

##########################################################################################
# PARAMETERS
##########################################################################################
parameters:
  Id:
    name: id
    description: A study or dataset id
    required: true
    type: string
    in: path

##########################################################################################
# DEFINITIONS
##########################################################################################
definitions:

  ## Identifiers ##

  ObjectNameProperty:
    description: |
      Table, column, and relationship names follow this pattern. This should be used for the name of any object in the
      system. It enforces BigQuery naming rules except it disallows a leading underscore so we avoid collisions with
      any extra columns the DR adds. For table names, this is shorter than what BigQuery allows.
    type: string
    pattern: '^[a-zA-Z0-9][_a-zA-Z0-9]*$' ## TODO this will support any unicode string
    minLength: 1
    maxLength: 63

  UniqueIdProperty:
    description: |
      Unique identifier for a study, dataset, etc.
    type: string
    pattern: '^[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}' ## eg:957117a6-79fd-4f2c-a63c-f6dc84a94d9c



  ## Study ##

  StudyModel:
    description: |
      Complete definition of a study.
    type: object
    required:
    - id
    - name
    - schema
    - createdDate
    properties:
      id:
        $ref: '#/definitions/UniqueIdProperty'
      name:
        $ref: '#/definitions/ObjectNameProperty'
      description:
        type: string
        description: Description of the study
      defaultDatasetId:
        type: string
        description: Id of the auto-generated default passthru dataset
      schema:
        $ref: '#/definitions/StudySpecificationModel'
      createdDate:
        type: string
        description: Date the study was created

  StudySummaryModel:
    description: |
      Summary of a study.
    type: object
    required:
    - id
    - name
    - createdDate
    properties:
      id:
        $ref: '#/definitions/UniqueIdProperty'
      name:
        $ref: '#/definitions/ObjectNameProperty'
      description:
        type: string
        description: Description of the study
      createdDate:
        type: string
        description: Date the study was created

  StudyRequestModel:
    description: |
      Complete definition of a study without the id (used to create a study)
    type: object
    required:
    - name
    - schema
    properties:
      name:
        $ref: '#/definitions/ObjectNameProperty'
      description:
        type: string
        description: Description of the study
      schema:
        $ref: '#/definitions/StudySpecificationModel'

  ## Schema Definitions ##

  ColumnModel:
    description: one column of a table
    type: object
    required:
      - name
      - datatype

    properties:
      name:
        $ref: '#/definitions/ObjectNameProperty'

      ## TODO: Use an enumeration for the datatype. We will probably want to support some kind of extended datatyping
      ## to process references to UCSC and/or UChicago schema parts. Whatever GA4GH standardizes.

      datatype:
        type: string

  TableModel:
    description: one table in a schema
    type: object
    required:
      - name
      - columns

    properties:
      name:
        $ref: '#/definitions/ObjectNameProperty'

      columns:
        type: array
        items:
          $ref: '#/definitions/ColumnModel'

  RelationshipTermModel:
    description: Describes a table, columns and cardinality for a relationship
    type: object
    required:
      - table
      - column
      - cardinality
    properties:
      table:
        $ref: '#/definitions/ObjectNameProperty'
      column:
        type: string
      cardinality:
        type: string
        enum:
          - one
          - many
          - zero_or_one
          - one_or_many
          - zero_or_many

  RelationshipModel:
    description: |
      One relationship between two tables. Captures a specific relationship between two tables. By naming the
      relationships, we can define assets. It should allow us to use the cardinality of the relationships to form
      proper views (INNER vs OUTER) and implement data validation.
    type: object
    required:
      - name
      - from
      - to
    properties:
      name:
        $ref: '#/definitions/ObjectNameProperty'
      from:
        $ref: '#/definitions/RelationshipTermModel'
      to:
        $ref: '#/definitions/RelationshipTermModel'

  AssetTableModel:
    description: |
      Used in the asset definition to describe a table that is included in the asset. This is used to define
      the view of the asset table in the dataset. Columns can be an empty array indicating that all columns
      should be included.
    type: object
    required:
      - name
      - is_root
      - columns
    properties:
      name:
        $ref: '#/definitions/ObjectNameProperty'
      is_root:
        type: boolean
      columns:
        type: array
        items:
          $ref: '#/definitions/ObjectNameProperty'

  AssetModel:
    description: One asset in the data model. The table list identifies the tables in the asset.
          The list of relationships provides the instructions for how to connect the tables.
          Asset tables have to be connected in a relationship hierarchy. So there cannot be
          two paths to the same table from the root.
    required:
      - name
      - follow
    properties:
      name:
        $ref: '#/definitions/ObjectNameProperty'
      tables:
        type: array
        items:
          $ref: '#/definitions/AssetTableModel'
      follow:
        type: array
        items:
          $ref: '#/definitions/ObjectNameProperty'

  StudySpecificationModel:
    description: data model definition
    type: object
    required:
      - tables
    properties:
      tables:
        type: array
        items:
          $ref: '#/definitions/TableModel'
      relationships:
        type: array
        items:
          $ref: '#/definitions/RelationshipModel'
      assets:
        type: array
        items:
          $ref: '#/definitions/AssetModel'

  ## Dataset Definitions ##

  DatasetModel:
    description: |
      complete dataset
      Schema is the shape of the resulting dataset: the table names and columns in the
      tables. The datatypes are derived from the underlying data.
      DatasetData provides the rows from the asset that are to be included in the
      dataset. DatasetMapping instructs how to map columns from tables on the columns
      in the dataset schema.
    type: object
    required:
      - id
      - name
      - tables
      - source
      - createdDate
    properties:
      id:
        $ref: '#/definitions/UniqueIdProperty'
      name:
        $ref: '#/definitions/ObjectNameProperty'
      description:
        type: string
        description: Description of the dataset
      tables:
        type: array
        items:
          $ref: '#/definitions/TableModel'
      source:
        type: array
        items:
          $ref: '#/definitions/DatasetSourceModel'
      createdDate:
        type: string
        description: Date the dataset was created

  DatasetRequestModel:
    description: |
      complete dataset save the dataset id, for dataset creation
      Schema is the shape of the resulting dataset: the table names and columns in the
      tables. The datatypes are derived from the underlying data.
      DatasetData provides the rows from the asset that are to be included in the
      dataset. DatasetMapping instructs how to map columns from tables on the columns
      in the dataset schema.
    type: object
    required:
      - name
      - tables
      - source
    properties:
      name:
        $ref: '#/definitions/ObjectNameProperty'
      description:
        type: string
        description: Description of the dataset
      tables:
        type: array
        items:
          $ref: '#/definitions/TableModel'
      source:
        type: array
        items:
          $ref: '#/definitions/DatasetSourceModel'

  DatasetSummaryModel:
    description: |
      summary of dataset
    type: object
    required:
    - name
    - createdDate
    properties:
      id:
        $ref: '#/definitions/UniqueIdProperty'
      name:
        $ref: '#/definitions/ObjectNameProperty'
      description:
        type: string
        description: Description of the dataset
      createdDate:
        type: string
        description: Date the dataset was created

  DatasetSourceModel:
    description: |
      The datasource identifies the study from which to source the data and how to map that data into the
      dataset schema. If the dataset is immutable, then you must provide the asset of the study to use and the set
      of row ids of the root table of that asset to include in the dataset. If the dataset is passthru, then you
      must not specify an asset or rows.
    type: object
    required:
      - study
      - mapping
    properties:
      study:
        $ref: '#/definitions/ObjectNameProperty'
      asset:
        $ref: '#/definitions/ObjectNameProperty'
      rows:
        type: array
        items:
          type: string
      mapping:
        type: array
        items:
          $ref: '#/definitions/DatasetMappingModel'

  DatasetMappingModel:
    description: |
      Mapping of asset table and columns to target dataset table and columns. The from_table is a table
      in the asset. The to_table has to be the name of a table in the dataset schema. And, perhaps
      obviously, the columns have to be valid references in their appropriate tables. The DR Manager computes the
      datatype of the target column based on the source columns. If no mapping is specified for a dataset table,
      then we match by table name and column name. That allows no specification for the typical case where the
      names all match and all columns are included.
    type: object
    required:
      - from_table
      - to_table
      - column_map
    properties:
      from_table:
        $ref: '#/definitions/ObjectNameProperty'
      to_table:
        $ref: '#/definitions/ObjectNameProperty'
      column_map:
        type: array
        items:
          $ref: '#/definitions/DatasetMapColumnsModel'

  DatasetMapColumnsModel:
    description: Column to column mapping
    required:
      - from_column
      - to_column
    properties:
      from_column:
        $ref: '#/definitions/ObjectNameProperty'
      to_column:
        $ref: '#/definitions/ObjectNameProperty'

  JobModel:
    description: |
      Status of job
    type: object
    required:
    - id
    - job_status
    - status_code
    properties:
      id:
        $ref: '#/definitions/UniqueIdProperty'
      description:
        type: string
        description: Description of the job's flight # from description flight input parameter
      job_status:
        description: Status of job
        type: string
        enum:
          - running
          - succeeded
          - failed
      status_code:
        description: HTTP code
        type: integer
      submitted:
        type: string
        description: Timestamp when the flight was created
      completed:
        type: string
        description: Timestamp when the flight was completed; not present if not complete

  ErrorModel:
    description: |
      representation of an error that occurred while processing a request
    type: object
    properties:
      message:
        type: string