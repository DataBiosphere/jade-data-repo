/*
 * Data Repository Building Notes
 *
 * USING SWAGGER-CODEGEN
 * We use swagger-codegen to generate our model classes and controller interfaces with default methods.
 * The swagger YAML file is the primary implementation and documentation of the Data Repository API.
 *
 * The gradle technique for running codegen as part of the build is written up here:
 *   https://blog.jcore.com/2017/05/22/automatically-generating-api-using-swagger-and-gradle/
 * It relies on the behavior of the Java plugin, described here:
 *   https://docs.gradle.org/current/userguide/java_plugin.html#sec:java_source_sets
 */

import io.swagger.codegen.config.CodegenConfigurator
import io.swagger.codegen.DefaultGenerator

buildscript {
    ext {
        springBootVersion = '2.0.5.RELEASE'
    }
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath('io.swagger:swagger-codegen:2.3.1')
    }
}

plugins {
  id 'com.palantir.docker' version '0.20.1'
  id 'org.liquibase.gradle' version '2.0.1'
}

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'com.palantir.docker'

apply plugin: 'checkstyle'
apply plugin: 'findbugs'
apply plugin: 'jacoco'

tasks.withType(FindBugs) {
    reports {
        xml.enabled false
        html.enabled true
        html.stylesheet resources.text.fromFile('config/findbugs/plain.xsl')
    }
}

tasks.withType(JacocoReport) {
    reports {
        xml.enabled false
        csv.enabled false
        html.destination file("${buildDir}/jacocoHtml")
    }
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                counter = 'BRANCH'
                value = 'COVEREDRATIO'
                minimum = 0.2
            }
        }
    }
}
check.dependsOn jacocoTestCoverageVerification


group 'bio.terra'
version '0.1'
sourceCompatibility = 1.8

repositories {
    mavenCentral()
}

configurations {
    generatedCompile
}

dependencies {
    // TODO: Unpack the "starter" and include just what we use
    compile 'org.springframework.boot:spring-boot-starter-web'
    compile 'org.springframework:spring-jdbc'
    compile 'io.springfox:springfox-swagger2:2.7.0'
    compile 'io.springfox:springfox-swagger-ui:2.7.0'
    compile 'org.apache.commons:commons-lang3:3.8.1'
    compile 'org.apache.commons:commons-dbcp2:2.5.0'     // For database connection support
    compile 'org.postgresql:postgresql:42.2.5'           // Postgres jdbc driver
    compile 'com.google.cloud:google-cloud-bigquery:1.49.0'
    compile 'com.google.cloud:google-cloud-storage:1.49.0'
    compile 'org.liquibase:liquibase-core:3.6.1'         // For upgrade
    // Findbugs annotations, so we can selectively suppress findbugs findings
    compileOnly 'com.google.code.findbugs:annotations:3.0.1'

    liquibaseRuntime 'org.liquibase:liquibase-core:3.6.1'
    liquibaseRuntime 'org.postgresql:postgresql:42.2.5'

    testCompile group: 'junit', name: 'junit', version: '4.12'
    // This is an RC, but not finding plain 2.0 on mavencentral.
    testCompile group: 'org.hamcrest', name: 'hamcrest', version: '2.1-rc3'
    testCompile 'org.springframework.boot:spring-boot-starter-test'
    testCompile 'org.postgresql:postgresql:42.2.5'

    generatedCompile 'org.springframework.boot:spring-boot-starter-web'
    generatedCompile 'io.springfox:springfox-swagger2:2.7.0'
    generatedCompile 'io.springfox:springfox-swagger-ui:2.7.0'
}

def openapiSourceFile = 'src/main/resources/data-repository-openapi.yaml'
def openapiTargetFolder = 'src/generated/java'

task generateApi {
    // specify the task inputs and outputs so gradle knows what to rebuild based on what has changed
    inputs.file("$projectDir/$openapiSourceFile")
    outputs.dir("$projectDir/$openapiTargetFolder")
    doLast {
        def config = new CodegenConfigurator()
        config.setInputSpec("file:///$projectDir/$openapiSourceFile")
        config.setOutputDir("$projectDir")
        config.setLang('spring')
        // These properties are not well documented. The only way I've found to figure them out is to
        // locally install the swagger-codegen tool and invoke it to get the specific help for the
        // spring boot options.
        config.setAdditionalProperties([
                'interfaceOnly' : 'true',                  // only generate the model and API interfaces
                'useTags'       : 'true',                  // organize the swagger ui page by tags
                'library'       : 'spring-boot',           // do spring-boot code generation
                'dateLibrary'   : 'java8',                 // do java8 code generation
                'apiPackage'    : 'bio.terra.controller',
                'modelPackage'  : 'bio.terra.model',
                'invokerPackage': 'bio.terra',
                'sourceFolder'  : openapiTargetFolder
        ])
        new DefaultGenerator().opts(config.toClientOptInput()).generate()
    }
}

task unpack(type: Copy) {
    dependsOn bootJar
    from(zipTree(tasks.bootJar.outputs.files.singleFile))
    into("build/dependency")
}

processResources {
    filesMatching("**/application.properties") {
        expand(project.properties)
    }
}

clean.doFirst {
    delete("${projectDir}/$openapiTargetFolder")
}

sourceSets {
    generated {
        compileClasspath = configurations.generatedCompile
    }
    main {
        compileClasspath += generated.output
        runtimeClasspath += generated.output
    }
    test {
        compileClasspath += generated.output
        runtimeClasspath += generated.output
    }
    checkstyle {
        toolVersion '7.8.1'
        checkstyleGenerated.enabled = false // Don't check generated code
        configFile file("config/checkstyle/checkstyle.xml")
    }
    findbugs {
        toolVersion '3.0.1'
        ignoreFailures = false
        excludeFilter = file("config/findbugs/excludeFilter.xml")
        reportsDir = file("$project.buildDir/reports/findbugs")
        effort = "max"
    }
    jacoco {
        toolVersion '0.8.2'
    }
}

bootRun {
    classpath += sourceSets.generated.output
}

jar {
    from sourceSets.generated.output
}

liquibase {
    activities {
        datarepo {
            changeLogFile project.ext.dbDatarepoChangesetFile
            url project.ext.dbDatarepoUri
            username project.ext.dbDatarepoUsername
            password project.ext.dbDatarepoPassword
            logLevel 'debug'
        }
        stairway {
            changeLogFile project.ext.dbStairwayChangesetFile
            url project.ext.dbStairwayUri
            username project.ext.dbStairwayUsername
            password project.ext.dbStairwayPassword
            logLevel 'debug'
        }
    }
}

def getGitHash = { ->
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'rev-parse', '--short', 'HEAD'
        standardOutput = stdout
    }
    return stdout.toString().trim()
}

// TODO: don't have access to broadinstitute to create a repository, or is there a better place?
docker {
    name "jhert/${bootJar.baseName}:${getGitHash()}"
    copySpec.from(tasks.unpack.outputs).into("dependency")
    buildArgs(['DEPENDENCY': "dependency"])
}

// -- Test tasks --
// The default 'test' task runs all of the tests.
// There are separate tasks for running just the unit tests and just the connected tests.
// connected tests and running all of the tests.
//
// Configure test logging to stun - these settings mean that we get sufficient debug data when tests fail
// during travis run.
// TODO: I looked for a simple way to avoid redundancy in these tasks and didn't find it.
test {
    useJUnit {
        includeCategories 'bio.terra.category.Unit,bio.terra.category.StairwayUnit'
        excludeCategories 'bio.terra.category.Connected'
    }
    testLogging {
        outputs.upToDateWhen {false}
        showStandardStreams = true
        showStackTraces = true
        showCauses = true
        exceptionFormat = "full"
    }
}

task testConnected(type: Test) {
    useJUnit {
        includeCategories 'bio.terra.category.Connected'
        excludeCategories 'bio.terra.category.Unit,bio.terra.category.StairwayUnit'
    }
    testLogging {
        outputs.upToDateWhen {false}
        showStandardStreams = true
        showStackTraces = true
        showCauses = true
        exceptionFormat = "full"
    }
}

task testAll(type: Test) {
    useJUnit {
        includeCategories 'bio.terra.category.Connected, bio.terra.category.Unit, bio.terra.category.StairwayUnit'
    }
    testLogging {
        outputs.upToDateWhen {false}
        showStandardStreams = true
        showStackTraces = true
        showCauses = true
        exceptionFormat = "full"
    }
}


compileGeneratedJava.dependsOn generateApi
classes.dependsOn generatedClasses
compileJava.dependsOn compileGeneratedJava
ideaModule.dependsOn generateApi