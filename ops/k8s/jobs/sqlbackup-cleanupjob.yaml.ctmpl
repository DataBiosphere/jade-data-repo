{{ with $environment := env "ENVIRONMENT"}}
{{ with $suffix := env "SUFFIX" }}
{{ with $sa_secret := secret (printf "secret/dsde/datarepo/%s/sql-backup-sa-%s.json" $environment $suffix)}}
{{ with $api_secret := secret (printf "secret/dsde/datarepo/%s/api-secrets-%s.json" $environment $suffix)}}
apiVersion: batch/v1beta1
kind: CronJob
metadata:
  name: sqlbackup-cleanupjob
spec:
  schedule: "0 1 * * *"
  jobTemplate:
    spec:
      template:
        spec:
          serviceAccountName: jade-sa
          containers:
          - name: sqlbackup-cleanup
            image: google/cloud-sdk:slim
            command: ["/bin/sh", "-c", "gcloud auth activate-service-account {{$sa_secret.Data.client_email}} --key-file=/secrets/key.json && apt-get -qq install jq -y > /dev/null && export removaldate=\"$(date \'+%Y%m%d\' -d \"+90 days ago\")\" && backups=$(gcloud sql backups list --instance {{$api_secret.Data.instanceName}} --project {{$sa_secret.Data.project_id}} --format json | jq  -r \'.[]| select (.| has(\"description\"))| select(.description < env.removaldate)\') && for i in $(echo \"${backups}\" | jq -r \'.id\'); do gcloud sql backups delete $i --instance {{$api_secret.Data.instanceName}} --project {{$sa_secret.Data.project_id}} --quiet; done"]
            volumeMounts:
              - name: sql-backup-credential
                mountPath: /secrets/
                readOnly: true
          volumes:
            - name: sql-backup-credential
              secret:
                secretName: sql-backup-sa
                items:
                  - key: credential-file-json
                    path: key.json
          restartPolicy: Never
      backoffLimit: 4
{{end}}
{{end}}
{{end}}
{{end}}
