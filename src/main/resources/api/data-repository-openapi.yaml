openapi: 3.0.1
info:
  title: Data Repository API
  description: >
    This document defines the REST API for Data Repository.
    **Status: design in progress**

    There are four top-level endpoints (besides some used by swagger):
     * /swagger-ui.html - generated by swagger: swagger API page that provides this documentation and a live UI for
         submitting REST requests
     * /status - provides the operational status of the service
     * /api    - is the authenticated and authorized Data Repository API
     * /ga4gh/drs/v1 - is a transcription of the Data Repository Service API

    The overall API (/api) currently supports two interfaces:
     * Repository - a general and default interface for initial setup, managing ingest and repository metadata
     * Resource - an interface for managing billing accounts and resources

    The API endpoints are organized by interface. Each interface is separately versioned.

    ## Notes on Naming
    All of the reference items are suffixed with "Model". Those names are used as the class names in the generated Java
    code. It is helpful to distinguish these model classes from other related classes, like the DAO classes and the
    operation classes.

    ## Editing and debugging
    I have found it best to edit this file directly to make changes and then use the swagger-editor to validate. The
    errors out of swagger-codegen are not that helpful. In the swagger-editor, it gives you nice errors and links to
    the place in the YAML where the errors are.

    But... the swagger-editor has been a bit of a pain for me to run. I tried the online website and was not able to
    load my YAML. Instead, I run it locally in a docker container, like this:
    ```
    docker pull swaggerapi/swagger-editor
    docker run -p 9090:8080 swaggerapi/swagger-editor
    ```
    Then navigate to localhost:9090 in your browser.

    I have not been able to get the file upload to work. It is a bit of a PITA, but I copy-paste the source code,
    replacing what is in the editor. Then make any fixes. Then copy-paste the resulting, valid file back into our source
    code. Not elegant, but easier than playing detective with the swagger-codegen errors.

    This might be something about my browser or environment, so give it a try yourself and see how it goes.

    ## Merging the DRS standard swagger into this swagger ##

    The merging is done in three sections:
     1. Merging the security definitions into our security definitions
     2. This section of paths. We make all paths explicit (prefixed with /ga4gh/drs/v1)
        All standard DRS definitions and parameters are prefixed with 'DRS' to separate them
        from our native definitions and parameters. We remove the x-swagger-router-controller lines.
     3. A separate part of the definitions section for the DRS definitions

    NOTE: the code here does not relect the DRS spec anymore. See DR-409.
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
  version: 0.1.0
servers:
  - url: /
security:
  - googleoauth:
      - openid
      - email
      - profile
paths:
  /status:
    get:
      tags:
        - unauthenticated
      description: >
        Returns the operational status of the service
      operationId: serviceStatus
      responses:
        200:
          description: Service is functional
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositoryStatusModel'
        500:
          description: Service is broken
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositoryStatusModel'
  /configuration:
    get:
      tags:
        - unauthenticated
      description: Retrieve the repository configuration information
      operationId: retrieveRepositoryConfig
      responses:
        200:
          description: Repository Config
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositoryConfigurationModel'
        500:
          description: Config is unavailable
          content: {}
  /shutdown:
    get:
      tags:
        - unauthenticated
      description: >
        Requests that this instance of DR Manager shut down. In production, this must be configured to
        only be callable by Kubernetes.
      operationId: shutdownRequest
      responses:
        204:
          description: DR Manager was shutdown successfully
          content: {}
  /api/resources/v1/profiles:
    get:
      tags:
        - profiles
        - resources
      description: >
        Returns a list of all of the billing profiles
      operationId: enumerateProfiles
      parameters:
        - name: offset
          in: query
          description: The number of items to skip before starting to collect the result
            set.
          schema:
            type: integer
            default: 0
        - name: limit
          in: query
          description: The numbers of items to return.
          schema:
            type: integer
            default: 10
      responses:
        200:
          description: List of billing profiles
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EnumerateBillingProfileModel'
    post:
      tags:
        - profiles
        - resources
      description: >
        Creates a new profile associated with a billing account. This is asynchronous.
        The final return is of type definitions/BillingProfileModel.
      operationId: createProfile
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BillingProfileRequestModel'
        required: false
      responses:
        200:
          description: Redirect for profile successful creation
          headers:
            location:
              description: url for the job result
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobModel'
        202:
          description: Job status of profile creation job & url for polling in the
            response header
          headers:
            location:
              description: url for the job polling
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobModel'
        400:
          description: Bad request - see error message
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
        403:
          description: No permission to create profiles
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
      x-codegen-request-body-name: billingProfileRequest
    put:
      tags:
        - profiles
        - resources
      description: >
        Update a billing profile by id. This is asynchronous.
        The final return is of type definitions/BillingProfileModel.
      operationId: updateProfile
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BillingProfileUpdateModel'
        required: true
      responses:
        200:
          description: Redirect for profile update result
          headers:
            location:
              description: url for the job result
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobModel'
        202:
          description: Job status of profile update job & url for polling in the response
            header
          headers:
            location:
              description: url for the job polling
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobModel'
        400:
          description: Bad request - invalid id, badly formed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
        403:
          description: No permission to update profile
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
        404:
          description: Not found - profile does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
  /api/resources/v1/profiles/{id}:
    get:
      tags:
        - profiles
        - resources
      description: Retrieve a billing profile by id
      operationId: retrieveProfile
      parameters:
        - name: id
          in: path
          description: A UUID to used to identify an object in the repository
          required: true
          schema:
            type: string
      responses:
        200:
          description: Billing profile
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BillingProfileModel'
        400:
          description: Bad request - invalid id, badly formed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
        403:
          description: No permission to see billing profile
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
        404:
          description: Not found - billing profile id does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
    delete:
      tags:
        - profiles
        - resources
      description: >
        Delete a billing profile by id. This is asynchronous.
        The final return is of type definitions/DeleteResponseModel.
      operationId: deleteProfile
      parameters:
        - name: id
          in: path
          description: A UUID to used to identify an object in the repository
          required: true
          schema:
            type: string
      responses:
        200:
          description: Redirect for profile delete result
          headers:
            location:
              description: url for the job result
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobModel'
        202:
          description: Job status of profile delete job & url for polling in the response
            header
          headers:
            location:
              description: url for the job polling
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobModel'
        400:
          description: Bad request - invalid id, badly formed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
        403:
          description: No permission to delete profile
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
        404:
          description: Not found - profile does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
        409:
          description: Profile in use by at least one dataset
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'

  /api/resources/v1/profiles/{id}/policies:
    get:
      tags:
        - profiles
        - resources
      description: Retrieve the read and discover policies for the profile
      operationId: retrieveProfilePolicies
      parameters:
        - name: id
          in: path
          description: A UUID to used to identify an object in the repository
          required: true
          schema:
            type: string
      responses:
        200:
          description: Policy
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PolicyResponse'
        400:
          description: Bad request - invalid id, badly formed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
        403:
          description: No permission to see policies
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
        404:
          description: Not found - snapshot id does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'

  /api/resources/v1/profiles/{id}/policies/{policyName}/members:
    post:
      tags:
        - profiles
        - resources
      description: Adds a member to the specified policy for the snapshot
      operationId: addProfilePolicyMember
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PolicyMemberRequest'
        required: true
      parameters:
        - $ref: '#/components/parameters/Id'
        - $ref: '#/components/parameters/ProfilePolicyName'
      responses:
        201:
          description: Policy
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PolicyResponse'
        400:
          description: Bad request - invalid id, badly formed, or email not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
        403:
          description: No permission to update policies
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
        404:
          description: Not found - profile id does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'

  /api/resources/v1/profiles/{id}/policies/{policyName}/members/{memberEmail}:
    delete:
      tags:
        - profiles
        - resources
      description: Removes a member from the specified policy for the profile
      operationId: deleteProfilePolicyMember
      parameters:
        - name: id
          in: path
          description: A UUID to used to identify an object in the repository
          required: true
          schema:
            type: string
        - name: policyName
          in: path
          description: The relevant policy
          required: true
          schema:
            type: string
            enum:
              - owner
              - user
        - name: memberEmail
          in: path
          description: The email of the user to remove
          required: true
          schema:
            type: string
      responses:
        200:
          description: PolicyResponse
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PolicyResponse'
        400:
          description: Bad request - invalid id, badly formed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
        403:
          description: No permission to update policies
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
        404:
          description: Not found - snapshot id does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'

  /api/repository/v1/snapshots:
    get:
      tags:
        - snapshots
        - repository
      description: >
        Returns a list of all of the snapshots the caller has access to
      operationId: enumerateSnapshots
      parameters:
        - name: offset
          in: query
          description: The number of items to skip before starting to collect the result
            set.
          schema:
            type: integer
            default: 0
        - name: limit
          in: query
          description: The numbers of items to return.
          schema:
            type: integer
            default: 10
        - name: sort
          in: query
          description: The field to use for sorting.
          schema:
            default: created_date
            $ref: '#/components/schemas/EnumerateSortByParam'
        - name: direction
          in: query
          description: The direction to sort.
          schema:
            default: asc
            $ref: '#/components/schemas/SqlSortDirection'
        - name: filter
          in: query
          description: Filter the results where this string is a case insensitive match
            in the name or description.
          schema:
            type: string
        - name: datasetIds
          in: query
          description: Filter the results where these datasetIds are source datasets.
          required: false
          style: form
          explode: true
          schema:
            type: array
            items:
              type: string
      responses:
        200:
          description: List of snapshots
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EnumerateSnapshotModel'
    post:
      tags:
        - snapshots
        - repository
      description: Create a new snapshot
      operationId: createSnapshot
      requestBody:
        description: Snapshot to create
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SnapshotRequestModel'
        required: false
      responses:
        200:
          description: Redirect for snapshot successful creation
          headers:
            location:
              description: url for the job result
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobModel'
        202:
          description: Job status of snapshot creation job & url for polling in the
            response header
          headers:
            location:
              description: url for the job polling
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobModel'
        400:
          description: Bad request - invalid name, badly formed or user email not
            found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
        403:
          description: No permission to create snapshots
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
        409:
          description: Snapshot with this name already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
      x-codegen-request-body-name: snapshot
  /api/repository/v1/snapshots/{id}:
    get:
      tags:
        - snapshots
        - repository
      description: Retrieve a snapshot by id
      operationId: retrieveSnapshot
      parameters:
        - name: id
          in: path
          description: A UUID to used to identify an object in the repository
          required: true
          schema:
            type: string
      responses:
        200:
          description: Snapshot
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SnapshotModel'
        400:
          description: Bad request - invalid id, badly formed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
        403:
          description: No permission to see snapshot
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
        404:
          description: Not found - snapshot id does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
    delete:
      tags:
        - snapshots
        - repository
      description: Delete a snapshot by id
      operationId: deleteSnapshot
      parameters:
        - name: id
          in: path
          description: A UUID to used to identify an object in the repository
          required: true
          schema:
            type: string
      responses:
        200:
          description: Redirect for snapshot successful deletion
          headers:
            location:
              description: url for the job result
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobModel'
        202:
          description: Job status of snapshot deletion job & url for polling in the
            response header
          headers:
            location:
              description: url for the job polling
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobModel'
        400:
          description: Bad request - invalid id, badly formed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
        403:
          description: No permission to delete snapshot
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
        404:
          description: Not found - snapshot id does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
        409:
          description: Snapshot in use?
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
  /api/repository/v1/snapshots/{id}/files/{fileid}:
    get:
      tags:
        - snapshots
        - repository
      description: Lookup metadata for one file
      operationId: lookupSnapshotFileById
      parameters:
        - name: id
          in: path
          description: A UUID to used to identify an object in the repository
          required: true
          schema:
            type: string
        - name: fileid
          in: path
          description: A file id
          required: true
          schema:
            type: string
        - name: depth
          in: query
          description: Enumeration depth; -1 means fully expand; 0 means no expansion;
            1..N expands that many subdirectories
          schema:
            type: integer
            default: 0
      responses:
        200:
          description: File exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileModel'
        400:
          description: Bad request - not sure this will ever happen
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
        403:
          description: No permission
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
        404:
          description: Not found - file id does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
        409:
          description: No idea if we will generate this error code
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
  /api/repository/v1/snapshots/{id}/filesystem/objects:
    get:
      tags:
        - snapshots
        - repository
      description: Lookup metadata for one file
      operationId: lookupSnapshotFileByPath
      parameters:
        - name: id
          in: path
          description: A UUID to used to identify an object in the repository
          required: true
          schema:
            type: string
        - name: path
          in: query
          description: URL-encoded full path to a file or directory
          required: true
          schema:
            type: string
        - name: depth
          in: query
          description: Enumeration depth; -1 means fully expand; 0 means no expansion;
            1..N expands that many subdirectories
          schema:
            type: integer
            default: 0
      responses:
        200:
          description: File exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileModel'
        400:
          description: Bad request - not sure this will ever happen
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
        403:
          description: No permission
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
        404:
          description: Not found - file id does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
        409:
          description: No idea if we will generate this error code
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
  /api/repository/v1/snapshots/{id}/policies:
    get:
      tags:
        - snapshots
        - repository
      description: Retrieve the read and discover policies for the snapshot
      operationId: retrieveSnapshotPolicies
      parameters:
        - name: id
          in: path
          description: A UUID to used to identify an object in the repository
          required: true
          schema:
            type: string
      responses:
        200:
          description: Policy
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PolicyResponse'
        400:
          description: Bad request - invalid id, badly formed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
        403:
          description: No permission to see policies
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
        404:
          description: Not found - snapshot id does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
  /api/repository/v1/snapshots/{id}/policies/{policyName}/members:
    post:
      tags:
        - snapshots
        - repository
      description: Adds a member to the specified policy for the snapshot
      operationId: addSnapshotPolicyMember
      parameters:
        - name: id
          in: path
          description: A UUID to used to identify an object in the repository
          required: true
          schema:
            type: string
        - name: policyName
          in: path
          description: The relevant policy
          required: true
          schema:
            type: string
            enum:
              - steward
              - reader
              - discoverer
      requestBody:
        description: Snapshot to change the policy of
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PolicyMemberRequest'
        required: false
      responses:
        201:
          description: PolicyResponse
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PolicyResponse'
        400:
          description: Bad request - invalid id, badly formed, or email not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
        403:
          description: No permission to update policies
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
        404:
          description: Not found - snapshot id does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
      x-codegen-request-body-name: policyMember
  /api/repository/v1/snapshots/{id}/policies/{policyName}/members/{memberEmail}:
    delete:
      tags:
        - snapshots
        - repository
      description: Removes a member from the specified policy for the snapshot
      operationId: deleteSnapshotPolicyMember
      parameters:
        - name: id
          in: path
          description: A UUID to used to identify an object in the repository
          required: true
          schema:
            type: string
        - name: policyName
          in: path
          description: The relevant policy
          required: true
          schema:
            type: string
            enum:
              - steward
              - reader
              - discoverer
        - name: memberEmail
          in: path
          description: The email of the user to remove
          required: true
          schema:
            type: string
      responses:
        200:
          description: PolicyResponse
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PolicyResponse'
        400:
          description: Bad request - invalid id, badly formed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
        403:
          description: No permission to update policies
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
        404:
          description: Not found - snapshot id does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
  /api/repository/v1/datasets:
    get:
      tags:
        - datasets
        - repository
      description: >
        Returns a list of all of the datasets the caller has access to
      operationId: enumerateDatasets
      parameters:
        - name: offset
          in: query
          description: The number of datasets to skip before when retrieving the next
            page
          schema:
            type: integer
            default: 0
        - name: limit
          in: query
          description: The numbers datasets to retrieve and return.
          schema:
            type: integer
            default: 10
        - name: sort
          in: query
          description: The field to use for sorting.
          schema:
            default: created_date
            $ref: '#/components/schemas/EnumerateSortByParam'
        - name: direction
          in: query
          description: The direction to sort.
          schema:
            default: asc
            $ref: '#/components/schemas/SqlSortDirection'
        - name: filter
          in: query
          description: Filter the results where this string is a case insensitive match
            in the name or description.
          schema:
            type: string
      responses:
        200:
          description: List of datasets
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EnumerateDatasetModel'
    post:
      tags:
        - datasets
        - repository
      description: Create a new dataset asynchronously. The async result is DatasetSummaryModel.
      operationId: createDataset
      requestBody:
        description: Dataset to create
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DatasetRequestModel'
        required: false
      responses:
        200:
          description: Redirect for ingest complete
          headers:
            location:
              description: url for the job result
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobModel'
        202:
          description: Job status of ingest job & url for polling in the response
            header
          headers:
            location:
              description: url for the job polling
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobModel'
        400:
          description: Bad request - duplicate name, invalid name, badly formed schema
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
        403:
          description: No permission to create datasets
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
      x-codegen-request-body-name: dataset
  /api/repository/v1/datasets/{id}:
    get:
      tags:
        - datasets
        - repository
      description: Retrieve a dataset by id
      operationId: retrieveDataset
      parameters:
        - name: id
          in: path
          description: A UUID to used to identify an object in the repository
          required: true
          schema:
            type: string
      responses:
        200:
          description: Dataset
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DatasetModel'
        400:
          description: Bad request - invalid id, badly formed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
        403:
          description: No permission to see dataset
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
        404:
          description: Not found - dataset id does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
    delete:
      tags:
        - datasets
        - repository
      description: Delete a dataset by id
      operationId: deleteDataset
      parameters:
        - name: id
          in: path
          description: A UUID to used to identify an object in the repository
          required: true
          schema:
            type: string
      responses:
        200:
          description: Redirect for dataset successful deletion
          headers:
            location:
              description: url for the job result
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobModel'
        202:
          description: Job status of dataset deletion job & url for polling in the
            response header
          headers:
            location:
              description: url for the job polling
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobModel'
        400:
          description: Bad request - invalid id, badly formed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
        403:
          description: No permission to delete dataset
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
        404:
          description: Not found - dataset id does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
        409:
          description: Dataset in use by at least one snapshot
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
  /api/repository/v1/datasets/{id}/policies:
    get:
      tags:
        - datasets
        - repository
      description: Retrieve the read and discover policies for the snapshot
      operationId: retrieveDatasetPolicies
      parameters:
        - name: id
          in: path
          description: A UUID to used to identify an object in the repository
          required: true
          schema:
            type: string
      responses:
        200:
          description: Policy
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PolicyResponse'
        400:
          description: Bad request - invalid id, badly formed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
        403:
          description: No permission to see policies
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
        404:
          description: Not found - snapshot id does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
  /api/repository/v1/datasets/{id}/policies/{policyName}/members:
    post:
      tags:
        - datasets
        - repository
      description: Adds a member to the specified policy for the dataset
      operationId: addDatasetPolicyMember
      parameters:
        - name: id
          in: path
          description: A UUID to used to identify an object in the repository
          required: true
          schema:
            type: string
        - name: policyName
          in: path
          description: The relevant policy
          required: true
          schema:
            type: string
            enum:
              - steward
              - custodian
              - snapshot_creator
      requestBody:
        description: Dataset to change the policy of
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PolicyMemberRequest'
        required: false
      responses:
        201:
          description: PolicyResponse
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PolicyResponse'
        400:
          description: Bad request - invalid id, badly formed, or email not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
        403:
          description: No permission to update policies
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
        404:
          description: Not found - dataset id does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
      x-codegen-request-body-name: policyMember
  /api/repository/v1/datasets/{id}/policies/{policyName}/members/{memberEmail}:
    delete:
      tags:
        - datasets
        - repository
      description: Removes the member from the specified policy for the dataset
      operationId: deleteDatasetPolicyMember
      parameters:
        - name: id
          in: path
          description: A UUID to used to identify an object in the repository
          required: true
          schema:
            type: string
        - name: policyName
          in: path
          description: The relevant policy
          required: true
          schema:
            type: string
            enum:
              - steward
              - custodian
              - snapshot_creator
        - name: memberEmail
          in: path
          description: The email of the user to remove
          required: true
          schema:
            type: string
      responses:
        200:
          description: PolicyResponse
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PolicyResponse'
        400:
          description: Bad request - invalid id, badly formed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
        403:
          description: No permission to update policies
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
        404:
          description: Not found - snapshot id does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
  /api/repository/v1/datasets/{id}/ingest:
    post:
      tags:
        - datasets
        - repository
      description: Ingest data into a dataset table
      operationId: ingestDataset
      parameters:
        - name: id
          in: path
          description: A UUID to used to identify an object in the repository
          required: true
          schema:
            type: string
      requestBody:
        description: Ingest request
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IngestRequestModel'
        required: false
      responses:
        200:
          description: Redirect for ingest complete
          headers:
            location:
              description: url for the job result
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobModel'
        202:
          description: Job status of ingest job & url for polling in the response
            header
          headers:
            location:
              description: url for the job polling
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobModel'
        400:
          description: Bad request - invalid ingest request, badly formed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
        403:
          description: No permission to ingest
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
        409:
          description: No idea if we will generate this error code
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
      x-codegen-request-body-name: ingest
  /api/repository/v1/datasets/{id}/assets:
    post:
      tags:
        - datasets
        - repository
      description: Add an asset definiion to a dataset
      operationId: addDatasetAssetSpecifications
      parameters:
        - name: id
          in: path
          description: A UUID to used to identify an object in the repository
          required: true
          schema:
            type: string
      requestBody:
        description: Asset definition to add to the dataset
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AssetModel'
        required: false
      responses:
        200:
          description: Redirect for ingest complete
          headers:
            location:
              description: url for the job result
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobModel'
        202:
          description: Job status of ingest job & url for polling in the response
            header
          headers:
            location:
              description: url for the job polling
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobModel'
        400:
          description: Bad request - invalid ingest request, badly formed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
        403:
          description: No permission to add an asset to a dataset
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
      x-codegen-request-body-name: assetModel
  /api/repository/v1/datasets/{id}/assets/{assetid}:
    delete:
      tags:
        - datasets
        - repository
      description: Remove an asset definition from a dataset
      operationId: removeDatasetAssetSpecifications
      parameters:
        - name: id
          in: path
          description: A UUID to used to identify an object in the repository
          required: true
          schema:
            type: string
        - name: assetid
          in: path
          description: An asset id
          required: true
          schema:
            type: string
      responses:
        200:
          description: Redirect for ingest complete
          headers:
            location:
              description: url for the job result
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobModel'
        202:
          description: Add new assets to a dataset
          headers:
            location:
              description: url for the job polling
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobModel'
        400:
          description: Bad request - invalid ingest request, badly formed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
        403:
          description: No permission to remove an asset from a dataset
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
  /api/repository/v1/datasets/{id}/deletes:
    post:
      tags:
        - datasets
        - repository
      description: Applies deletes to primary tabular data in a dataset
      operationId: applyDatasetDataDeletion
      parameters:
        - name: id
          in: path
          description: A UUID to used to identify an object in the repository
          required: true
          schema:
            type: string
      requestBody:
        description: Description of the data in the dataset to delete
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DataDeletionRequest'
        required: false
      responses:
        201:
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobModel'
        400:
          description: Bad request - invalid tableName, bad row ids, badly formed,
            etc.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
        403:
          description: No permission to delete data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
        404:
          description: Not found - dataset id does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
      x-codegen-request-body-name: dataDeletionRequest
  /api/repository/v1/register/user:
    get:
      tags:
        - register
        - repository
      description: >
        Returns whether the user is registered with terra
      operationId: user
      responses:
        200:
          description: User Info
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserStatusInfo'
  /api/repository/v1/datasets/{id}/files:
    post:
      tags:
        - datasets
        - repository
      description: Ingest one file into the dataset file system; async returns a FileModel
      operationId: ingestFile
      parameters:
        - name: id
          in: path
          description: A UUID to used to identify an object in the repository
          required: true
          schema:
            type: string
      requestBody:
        description: Ingest file request
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FileLoadModel'
        required: false
      responses:
        200:
          description: Redirect for ingest complete
          headers:
            location:
              description: url for the job result
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobModel'
        202:
          description: Job status of ingest job & url for polling in the response
            header
          headers:
            location:
              description: url for the job polling
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobModel'
        400:
          description: Bad request - invalid ingest request, badly formed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
        403:
          description: No permission to ingest
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
        409:
          description: No idea if we will generate this error code
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
      x-codegen-request-body-name: ingestFile
  /api/repository/v1/datasets/{id}/files/bulk:
    post:
      tags:
        - datasets
        - repository
      description: >-
        Load many files into the dataset file system; async returns a BulkLoadResultModel
        Note that this endpoint is not a single transaction. Some files may be loaded and
        others may fail. Each file load is atomic; the file will either be loaded into the
        dataset file system or it will not exist.
      operationId: bulkFileLoad
      parameters:
        - name: id
          in: path
          description: A UUID to used to identify an object in the repository
          required: true
          schema:
            type: string
      requestBody:
        description: >-
          Bulk file load request with file list in an external file. Load summary results
          are returned in the async response.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BulkLoadRequestModel'
        required: false
      responses:
        200:
          description: Redirect for bulk load complete
          headers:
            location:
              description: url for the job result
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobModel'
        202:
          description: Job status of bulk load job & url for polling in the response
            header
          headers:
            location:
              description: url for the job polling
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobModel'
        400:
          description: Bad request - invalid ingest request, badly formed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
        403:
          description: No permission to ingest
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
        409:
          description: Someone else is using the load tag
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
      x-codegen-request-body-name: bulkFileLoad
  /api/repository/v1/datasets/{id}/files/bulk/{loadtag}:
    get:
      tags:
        - datasets
        - repository
      description: >-
        Retrieve the results of a bulk file load. The results of each bulk load are stored
        in the dataset. They can be queried directly or retrieved with this paginated
        interface.
      operationId: bulkFileResultsGet
      parameters:
        - name: id
          in: path
          description: A UUID to used to identify an object in the repository
          required: true
          schema:
            type: string
        - name: loadtag
          in: path
          description: a load tag
          required: true
          schema:
            type: string
        - name: jobId
          in: query
          description: The job id associated with the load
          schema:
            type: string
        - name: offset
          in: query
          description: The number of items to skip before starting to collect the result
            set.
          schema:
            type: integer
            default: 0
        - name: limit
          in: query
          description: The numbers of items to return.
          schema:
            type: integer
            default: 10
      responses:
        200:
          description: Redirect for bulk load result retrieval complete
          headers:
            location:
              description: url for the job result
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobModel'
        202:
          description: Job status of bulk load result retrieval
          headers:
            location:
              description: url for the job polling
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobModel'
        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
        403:
          description: No permission to access bulk file results
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
    delete:
      tags:
        - datasets
        - repository
      description: >-
        Delete results from the bulk file load table of the dataset.
        If jobId is specified, then only the results for the loadTag plus that jobId are
        deleted. Otherwise, all results associated with the loadTag are deleted.
      operationId: bulkFileResultsDelete
      parameters:
        - name: id
          in: path
          description: A UUID to used to identify an object in the repository
          required: true
          schema:
            type: string
        - name: loadtag
          in: path
          description: a load tag
          required: true
          schema:
            type: string
        - name: jobId
          in: query
          description: The job id associated with the load
          schema:
            type: string
      responses:
        200:
          description: Redirect for bulk load result deletion complete
          headers:
            location:
              description: url for the job result
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobModel'
        202:
          description: Job status of bulk load result deletion
          headers:
            location:
              description: url for the job polling
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobModel'
        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
        403:
          description: No permission to access bulk file results
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
  /api/repository/v1/datasets/{id}/files/bulk/array:
    post:
      tags:
        - datasets
        - repository
      description: >-
        Load many files into the dataset file system; async returns a BulkLoadArrayResultModel
        Note that this endpoint is not a single transaction. Some files may be loaded and
        others may fail. Each file load is atomic; the file will either be loaded into the
        dataset file system or it will not exist.
      operationId: bulkFileLoadArray
      parameters:
        - name: id
          in: path
          description: A UUID to used to identify an object in the repository
          required: true
          schema:
            type: string
      requestBody:
        description: >-
          Bulk file load request with file list in the body of the request and load
          results returned in the async response.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BulkLoadArrayRequestModel'
        required: false
      responses:
        200:
          description: Redirect for bulk load complete
          headers:
            location:
              description: url for the job result
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobModel'
        202:
          description: Job status of bulk load job & url for polling in the response
            header
          headers:
            location:
              description: url for the job polling
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobModel'
        400:
          description: Bad request - invalid ingest request, badly formed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
        403:
          description: No permission to ingest
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
        409:
          description: Someone else is using the load tag
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
      x-codegen-request-body-name: bulkFileLoadArray
  /api/repository/v1/datasets/{id}/files/{fileid}:
    get:
      tags:
        - datasets
        - repository
      description: Lookup metadata for one file
      operationId: lookupFileById
      parameters:
        - name: id
          in: path
          description: A UUID to used to identify an object in the repository
          required: true
          schema:
            type: string
        - name: fileid
          in: path
          description: A file id
          required: true
          schema:
            type: string
        - name: depth
          in: query
          description: Enumeration depth; -1 means fully expand; 0 means no expansion;
            1..N expands that many subdirectories
          schema:
            type: integer
            default: 0
      responses:
        200:
          description: File exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileModel'
        400:
          description: Bad request - not sure this will ever happen
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
        403:
          description: No permission
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
        404:
          description: Not found - file id does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
        409:
          description: No idea if we will generate this error code
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
    delete:
      tags:
        - datasets
        - repository
      description: >
        Hard delete of a file by id. The file is deleted even if it is in use by
        a dataset. Subsequent lookups will give not found errors.
      operationId: deleteFile
      parameters:
        - name: id
          in: path
          description: A UUID to used to identify an object in the repository
          required: true
          schema:
            type: string
        - name: fileid
          in: path
          description: A file id
          required: true
          schema:
            type: string
      responses:
        200:
          description: Redirect for snapshot successful creation
          headers:
            location:
              description: url for the job result
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobModel'
        202:
          description: Job status of snapshot creation job & url for polling in the
            response header
          headers:
            location:
              description: url for the job polling
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobModel'
        400:
          description: Bad request - invalid id, badly formed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
        403:
          description: No permission to delete file
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
        404:
          description: Not found - dataset id or file id does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
  /api/repository/v1/datasets/{id}/filesystem/objects:
    get:
      tags:
        - datasets
        - repository
      description: Lookup metadata for one file
      operationId: lookupFileByPath
      parameters:
        - name: id
          in: path
          description: A UUID to used to identify an object in the repository
          required: true
          schema:
            type: string
        - name: path
          in: query
          description: URL-encoded full path to a file or directory
          required: true
          schema:
            type: string
        - name: depth
          in: query
          description: Enumeration depth; -1 means fully expand; 0 means no expansion;
            1..N expands that many subdirectories
          schema:
            type: integer
            default: 0
      responses:
        200:
          description: File exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileModel'
        400:
          description: Bad request - not sure this will ever happen
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
        403:
          description: No permission
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
        404:
          description: Not found - file id does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
        409:
          description: No idea if we will generate this error code
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
  /api/repository/v1/jobs:
    get:
      tags:
        - jobs
        - repository
      description: >
        Returns a list of all of the jobs the caller has access to
      operationId: enumerateJobs
      parameters:
        - name: offset
          in: query
          description: The number of items to skip before starting to collect the result
            set.
          schema:
            type: integer
            default: 0
        - name: limit
          in: query
          description: The numbers of items to return.
          schema:
            type: integer
            default: 10
      responses:
        200:
          description: List of jobs
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/JobModel'
  /api/repository/v1/jobs/{id}:
    get:
      tags:
        - jobs
        - repository
      description: Retrieve a job's status by id
      operationId: retrieveJob
      parameters:
        - name: id
          in: path
          description: A UUID to used to identify an object in the repository
          required: true
          schema:
            type: string
      responses:
        200:
          description: Redirect for object successful creation
          headers:
            location:
              description: url for the job result
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobModel'
        202:
          description: Job status
          headers:
            location:
              description: url for the job polling
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobModel'
        400:
          description: Bad request - invalid id, badly formed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
        403:
          description: No permission to see job
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
        404:
          description: Not found - job id does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
    delete:
      tags:
        - jobs
        - repository
      description: Delete the job and data associated with it
      operationId: deleteJob
      parameters:
        - name: id
          in: path
          description: A UUID to used to identify an object in the repository
          required: true
          schema:
            type: string
      responses:
        204:
          description: Job was deleted
          content: {}
  /api/repository/v1/jobs/{id}/result:
    get:
      tags:
        - jobs
        - repository
      description: Retrieve a job's result by id
      operationId: retrieveJobResult
      parameters:
        - name: id
          in: path
          description: A UUID to used to identify an object in the repository
          required: true
          schema:
            type: string
      responses:
        default:
          description: Successful responses return the type of model specified by
            the job; otherwise, ErrorModel
          content:
            application/json:
              schema:
                type: object
  /api/repository/v1/configs/{name}:
    get:
      tags:
        - configs
        - repository
      description: Get one configuration
      operationId: getConfig
      parameters:
        - name: name
          in: path
          description: name of the configuration to get
          required: true
          schema:
            type: string
      responses:
        200:
          description: current configuration
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConfigModel'
        404:
          description: unknown configuration name
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
    put:
      tags:
        - configs
        - repository
      description: >
        Enable or disable the named fault. Performing the put on a config that
        is not a fault is an error.
      operationId: setFault
      parameters:
        - name: name
          in: path
          description: name of the configuration to
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConfigEnableModel'
        required: false
      responses:
        204:
          description: fault was en/dis-abled successfully - no content
          content: {}
        400:
          description: configuration name is not a fault
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
        404:
          description: unknown configuration name
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
      x-codegen-request-body-name: configEnable
  /api/repository/v1/configs:
    get:
      tags:
        - configs
        - repository
      description: Get all configurations
      operationId: getConfigList
      responses:
        200:
          description: all configurations
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConfigListModel'
    put:
      tags:
        - configs
        - repository
      description: Set the a group of configurations
      operationId: setConfigList
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConfigGroupModel'
        required: false
      responses:
        200:
          description: previous settings
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConfigListModel'
        400:
          description: invalid configuration model
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
        404:
          description: unknown configuration name(s) - see errorDetails
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
      x-codegen-request-body-name: configModel
  /api/repository/v1/configs/reset:
    put:
      tags:
        - configs
        - repository
      description: Reset the configuration to original settings
      operationId: resetConfig
      responses:
        204:
          description: configuration reset
          content: {}

  /api/repository/v1/upgrade:
    post:
      tags:
        - upgrade
        - repository
      description: >-
        Extensible endpoint for triggering upgrade tasks in the data repository.
        The asynchronous result is UpgradeResponseModel
      operationId: upgrade
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpgradeModel'
        required: true
      responses:
        200:
          description: Redirect for upgrade complete
          headers:
            location:
              description: url for the job result
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobModel'
        202:
          description: Job status of upgrade job & url for polling in the response
            header
          headers:
            location:
              description: url for the job polling
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobModel'
        400:
          description: Bad request - invalid upgrade request, badly formed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
        403:
          description: No permission to upgrade
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
      x-codegen-request-body-name: upgrade

##############################################################################
## DRS STANDARD ENDPOINTS
##############################################################################
  /ga4gh/drs/v1/service-info:
    get:
      tags:
        - DataRepositoryService
      summary: Get information about this implementation.
      description: 'May return service version and other information. [dd]NOTE: technically,
        this has been removed from DRS V1.0. It will be added back when there is a
        common service_info across ga4gh. I don''t expect it to be too different,
        so just leaving this info call in place.'
      operationId: GetServiceInfo
      responses:
        200:
          description: Service information returned successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DRSServiceInfo'
  /ga4gh/drs/v1/objects/{object_id}:
    get:
      tags:
        - DataRepositoryService
      summary: Get info about an `Object`.
      description: Returns object metadata, and a list of access methods that can
        be used to fetch object bytes.
      operationId: GetObject
      parameters:
        - name: object_id
          in: path
          required: true
          schema:
            type: string
        - name: expand
          in: query
          description: >-
            If false and the object_id refers to a bundle, then the ContentsObject array contains only those objects directly contained in the bundle. That is, if the bundle contains other bundles, those other bundles are not recursively included in the result.
            If true and the object_id refers to a bundle, then the entire set of objects in the bundle is expanded. That is, if the bundle contains another bundles, then those other bundles are recursively expanded and included in the result. Recursion continues through the entire sub-tree of the bundle.
            If the object_id refers to a blob, then the query parameter is ignored.
          schema:
            type: boolean
            default: false
      responses:
        200:
          description: The `Object` was found successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DRSObject'
        202:
          description: >
            The operation is delayed and will continue asynchronously. The client should retry this same request after the delay specified by Retry-After header.
          headers:
            Retry-After:
              description: >
                Delay in seconds. The client should retry this same request after waiting for this duration. To simplify client response processing, this must be an integral relative time in seconds. This value SHOULD represent the minimum duration the client should wait before attempting the operation again with a reasonable expectation of success. When it is not feasible for the server to determine the actual expected delay, the server may return a brief, fixed value instead.
              schema:
                type: integer
                format: int64
          content: {}
        400:
          description: The request is malformed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DRSError'
        401:
          description: The request is unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DRSError'
        403:
          description: The requester is not authorized to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DRSError'
        404:
          description: The requested `Object` wasn't found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DRSError'
        500:
          description: An unexpected error occurred.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DRSError'
  /ga4gh/drs/v1/objects/{object_id}/access/{access_id}:
    get:
      tags:
        - DataRepositoryService
      summary: Get a URL for fetching bytes.
      description: Returns a URL that can be used to fetch the object bytes. This
        method only needs to be called when using an `AccessMethod` that contains
        an `access_id` (e.g., for servers that use signed URLs for fetching object
        bytes).
      operationId: GetAccessURL
      parameters:
        - name: object_id
          in: path
          description: An `id` of a Data Object
          required: true
          schema:
            type: string
        - name: access_id
          in: path
          description: An `access_id` from the `access_methods` list of a Data Object
          required: true
          schema:
            type: string
      responses:
        200:
          description: The access URL was found successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DRSAccessURL'
        202:
          description: >
            The operation is delayed and will continue asynchronously. The client should retry this same request after the delay specified by Retry-After header.
          headers:
            Retry-After:
              description: >
                Delay in seconds. The client should retry this same request after waiting for this duration. To simplify client response processing, this must be an integral relative time in seconds. This value SHOULD represent the minimum duration the client should wait before attempting the operation again with a reasonable expectation of success. When it is not feasible for the server to determine the actual expected delay, the server may return a brief, fixed value instead.
              schema:
                type: integer
                format: int64
          content: {}
        400:
          description: The request is malformed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DRSError'
        401:
          description: The request is unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DRSError'
        403:
          description: The requester is not authorized to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DRSError'
        404:
          description: The requested access URL wasn't found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DRSError'
        500:
          description: An unexpected error occurred.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DRSError'
components:
  schemas:
    TableDataType:
      type: string
      enum: [ boolean, bytes, date, datetime, dirref, fileref, float, float64, integer, int64, numeric, record, string, text, time, timestamp ]
      description: >
        The type of a column in a table.
    SqlSortDirection:
      type: string
      enum: [ asc, desc ]
      description: >
        The sort direction of a query result
    EnumerateSortByParam:
      type: string
      enum: [ name, description, created_date ]
      description: >
        Fields datasets and snapshots can be sorted by.
    ObjectNameProperty:
      maxLength: 63
      minLength: 1
      pattern: ^[a-zA-Z0-9][_a-zA-Z0-9]*$
      type: string
      description: >
        Table and column names follow this pattern. This should be used for the name of any object in the
        system. It enforces BigQuery naming rules except it disallows a leading underscore so we avoid collisions with
        any extra columns the DR adds. For table and column names, this is shorter than what BigQuery allows.
    DatasetSnapshotNameProperty:
      maxLength: 511
      minLength: 1
      pattern: ^[a-zA-Z0-9][_a-zA-Z0-9]*$
      type: string
      description: >
        Dataset and snapshot names follow this pattern. It is the same as ObjectNameProperty, but has
        a greater maxLength.
    UniqueIdProperty:
      pattern: ^[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}
      type: string
      description: >
        Unique identifier for a dataset, snapshot, etc.
    ShortIdProperty:
      pattern: '[A-za-z0-9_\\-]{22}'
      type: string
      description: >
        Unique identifier for a flights, jobs, etc.
    BillingProfileRequestModel:
      required:
        - biller
        - billingAccountId
        - id
        - profileName
      type: object
      properties:
        id:
          $ref: '#/components/schemas/UniqueIdProperty'
        billingAccountId:
          type: string
          description: unique identifier of the billing account from Google
        profileName:
          type: string
          description: display name to be used for the profile;
        biller:
          type: string
          description: either “direct” or the reseller of the sub-account that sends
            the bill (like “on_spend”)
        description:
          type: string
          description: Free text that describes the profile
    BillingProfileUpdateModel:
      required:
        - id
        - billingAccountId
        - description
      type: object
      properties:
        id:
          $ref: '#/components/schemas/UniqueIdProperty'
        billingAccountId:
          type: string
          description: Unique identifier of the billing account from Google
        description:
          type: string
          description: Free text that describes the profile
    BillingProfileModel:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/UniqueIdProperty'
        billingAccountId:
          type: string
          description: unique identifier of the billing account from Google
        profileName:
          type: string
          description: display name to be used for the profile;
        biller:
          type: string
          description: either “direct” or the reseller of the sub-account that sends
            the bill (like “on_spend”)
        description:
          type: string
          description: Free text that describes the profile
        createdDate:
          type: string
          description: Date the profile was created
        createdBy:
          type: string
          description: Identity of the user who originally created the profile
    EnumerateBillingProfileModel:
      type: object
      properties:
        total:
          type: integer
          description: Total number of billing profiles
        items:
          type: array
          items:
            $ref: '#/components/schemas/BillingProfileModel'
      description: >
        The total number of billing profiles available and a page of profiles
    DatasetModel:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/UniqueIdProperty'
        name:
          $ref: '#/components/schemas/DatasetSnapshotNameProperty'
        description:
          type: string
          description: Description of the dataset
        defaultProfileId:
          $ref: '#/components/schemas/UniqueIdProperty'
        dataProject:
          type: string
          description: Project id of the project where tabular data in BigQuery lives
        defaultSnapshotId:
          type: string
          description: Id of the auto-generated default passthru snapshot
        schema:
          $ref: '#/components/schemas/DatasetSpecificationModel'
        createdDate:
          type: string
          description: Date the dataset was created
        storage:
          type: array
          items:
            $ref: '#/components/schemas/StorageResourceModel'
      description: >
        Complete definition of a dataset.
    DatasetSummaryModel:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/UniqueIdProperty'
        name:
          $ref: '#/components/schemas/DatasetSnapshotNameProperty'
        description:
          type: string
          description: Description of the dataset
        defaultProfileId:
          $ref: '#/components/schemas/UniqueIdProperty'
        createdDate:
          type: string
          description: Date the dataset was created
        storage:
          type: array
          items:
            $ref: '#/components/schemas/StorageResourceModel'
      description: >
        Summary of a dataset.
    DatasetRequestModel:
      required:
        - defaultProfileId
        - name
        - schema
      type: object
      properties:
        name:
          $ref: '#/components/schemas/DatasetSnapshotNameProperty'
        description:
          type: string
          description: Description of the dataset
        defaultProfileId:
          $ref: '#/components/schemas/UniqueIdProperty'
        schema:
          $ref: '#/components/schemas/DatasetSpecificationModel'
        region:
          type: string
        cloudPlatform:
          $ref: '#/components/schemas/CloudPlatform'
      description: >
        Complete definition of a dataset without the id (used to create a dataset)
    EnumerateDatasetModel:
      type: object
      properties:
        total:
          type: integer
          description: Total number of datasets
        items:
          type: array
          items:
            $ref: '#/components/schemas/DatasetSummaryModel'
      description: >
        The total number of datasets available that match the filter criteria and a page of summaries
    ColumnModel:
      required:
        - datatype
        - name
      type: object
      properties:
        name:
          $ref: '#/components/schemas/ObjectNameProperty'
        datatype:
          $ref: '#/components/schemas/TableDataType'
        array_of:
          type: boolean
          description: if true, make this column an array of type datatype.
          default: false
      description: one column of a table
    TableModel:
      required:
        - columns
        - name
      type: object
      properties:
        name:
          $ref: '#/components/schemas/ObjectNameProperty'
        columns:
          type: array
          items:
            $ref: '#/components/schemas/ColumnModel'
        primaryKey:
          type: array
          items:
            $ref: '#/components/schemas/ObjectNameProperty'
        partitionMode:
          type: string
          default: none
          enum:
            - none
            - date
            - int
        datePartitionOptions:
          $ref: '#/components/schemas/DatePartitionOptionsModel'
        intPartitionOptions:
          $ref: '#/components/schemas/IntPartitionOptionsModel'
        rowCount:
          type: integer
      description: one table in a schema
    DatePartitionOptionsModel:
      required:
        - column
      type: object
      properties:
        column:
          $ref: '#/components/schemas/ObjectNameProperty'
      description: Describes how a date partition should be configured.
    IntPartitionOptionsModel:
      required:
        - column
        - interval
        - max
        - min
      type: object
      properties:
        column:
          $ref: '#/components/schemas/ObjectNameProperty'
        min:
          type: integer
          description: >
            The smallest value to partition within the target column. Any rows with a value smaller than this will be unpartitioned.
          format: int64
        max:
          type: integer
          description: >
            The largest value to partition within the target column. Any rows with a value larger than this will be unpartitioned.
          format: int64
        interval:
          type: integer
          description: >
            The size to use when dividing the partitioning range into "buckets". (max - min) / (this value) cannot be larger than 4,000.
          format: int64
      description: Describes how an int partition should be configured.
    RelationshipTermModel:
      required:
        - column
        - table
      type: object
      properties:
        table:
          $ref: '#/components/schemas/ObjectNameProperty'
        column:
          $ref: '#/components/schemas/ObjectNameProperty'
      description: Describes a table and columns for a relationship
    RelationshipModel:
      required:
        - from
        - name
        - to
      type: object
      properties:
        name:
          minLength: 1
          type: string
        from:
          $ref: '#/components/schemas/RelationshipTermModel'
        to:
          $ref: '#/components/schemas/RelationshipTermModel'
      description: >
        One relationship between two tables. Captures a specific relationship between two tables. By naming the
        relationships, we can define assets.
    AssetTableModel:
      required:
        - columns
        - name
      type: object
      properties:
        name:
          $ref: '#/components/schemas/ObjectNameProperty'
        columns:
          type: array
          items:
            $ref: '#/components/schemas/ObjectNameProperty'
      description: >
        Used in the asset definition to describe a table that is included in the asset. This is used to define
        the view of the asset table in the snapshot. Columns can be an empty array indicating that all columns
        should be included.
    AssetModel:
      required:
        - name
        - rootColumn
        - rootTable
        - tables
      type: object
      properties:
        name:
          minLength: 1
          type: string
        tables:
          type: array
          items:
            $ref: '#/components/schemas/AssetTableModel'
        rootTable:
          $ref: '#/components/schemas/ObjectNameProperty'
        rootColumn:
          $ref: '#/components/schemas/ObjectNameProperty'
        follow:
          type: array
          items:
            $ref: '#/components/schemas/ObjectNameProperty'
      description: One asset in the data model. The table list identifies the tables
        in the asset. The rootTable and rootColumn indicate which value will be used
        as the unique identifier. The list of relationships provides the instructions
        for how to connect the tables. Asset tables have to be connected in a relationship
        hierarchy. So there cannot be two paths to the same table from the root.
    StorageResourceModel:
      type: object
      properties:
        region:
          type: string
        cloudResource:
          type: string
        cloudPlatform:
          $ref: '#/components/schemas/CloudPlatform'
    DatasetSpecificationModel:
      required:
        - tables
      type: object
      properties:
        tables:
          type: array
          items:
            $ref: '#/components/schemas/TableModel'
        relationships:
          type: array
          items:
            $ref: '#/components/schemas/RelationshipModel'
        assets:
          type: array
          items:
            $ref: '#/components/schemas/AssetModel'
      description: data model definition
    IngestRequestModel:
      required:
        - format
        - path
        - table
      type: object
      properties:
        table:
          $ref: '#/components/schemas/ObjectNameProperty'
        path:
          type: string
          description: gs path to a file in a bucket accessible to data repo
        format:
          type: string
          enum:
            - csv
            - json
        load_tag:
          $ref: '#/components/schemas/LoadTagModel'
        max_bad_records:
          type: integer
          description: max number of bad records to skip; applies to JSON and CSV
        ignore_unknown_values:
          type: boolean
          description: skip extra data; applies to JSON and CSV
          default: true
        csv_field_delimiter:
          type: string
          description: field separator
          default: ','
        csv_quote:
          type: string
          description: quoting character
          default: '"'
        csv_skip_leading_rows:
          type: integer
          description: number of header rows to skip
        csv_allow_quoted_newlines:
          type: boolean
          default: true
        csv_null_marker:
          type: string
          default: ""
      description: >
        Request to ingest data from a file in GCS into a table in a dataset.
        The ingest source must be readable by the DR manager.
        TODO: other input forms
    IngestResponseModel:
      required:
        - path
        - row_count
        - table
      type: object
      properties:
        dataset_id:
          $ref: '#/components/schemas/UniqueIdProperty'
        dataset:
          $ref: '#/components/schemas/DatasetSnapshotNameProperty'
        table:
          $ref: '#/components/schemas/ObjectNameProperty'
        path:
          type: string
        load_tag:
          $ref: '#/components/schemas/LoadTagModel'
        row_count:
          type: integer
          description: number of rows successfully ingested
          format: int64
        bad_row_count:
          type: integer
          description: number of bad rows skipped
          format: int64
      description: >
        Response from performing an ingest.
    FileLoadModel:
      required:
        - source_path
        - target_path
      type: object
      properties:
        source_path:
          type: string
          description: gs URL of the source file to load
        target_path:
          type: string
          description: >
            Full path within the dataset where the file should be placed.
            The path must start with /.
        mime_type:
          type: string
          description: >-
            A string providing the mime-type of the Data Object.
            For example, "application/json".
        profileId:
          $ref: '#/components/schemas/UniqueIdProperty'
        loadTag:
          $ref: '#/components/schemas/LoadTagModel'
        description:
          type: string
          description: A human readable description of the contents of the Data Object.
      description: >
        Information needed to copy a file from a source bucket into the
        dataset bucket.
        Eventually, this will include attributes of the storage including
        billing, temperature, geography, etc. But for now...
    FileModel:
      type: object
      properties:
        fileId:
          type: string
          description: Unique id of the filesystem object within the dataset
        collectionId:
          type: string
          description: Id of the dataset or snapshot directory describing the object
        path:
          type: string
          description: full path of the file in the dataset
        size:
          type: integer
          description: >
            Always present for files - the file size in bytes
            Present for directories in snapshots - sum of sizes of objects in a directory
          format: int64
        checksums:
          type: array
          description: >
            Always present for files - checksums; always includes crc32c. May include md5.
            Present for directories in snapshots - see DRS spec for algorithm for combining checksums of
            underlying directory contents.
          items:
            $ref: '#/components/schemas/DRSChecksum'
        created:
          type: string
          description: timestamp of object creation in RFC3339
        description:
          type: string
          description: Human readable description of the file
        fileType:
          $ref: '#/components/schemas/FileModelType'
        fileDetail:
          $ref: '#/components/schemas/FileDetailModel'
        directoryDetail:
          $ref: '#/components/schemas/DirectoryDetailModel'
      description: A file or directory in the data repository
    FileModelType:
      type: string
      enum:
        - file
        - directory
    FileDetailModel:
      type: object
      properties:
        datasetId:
          type: string
          description: Id of the dataset that holds the file
        mimeType:
          type: string
        accessUrl:
          type: string
          description: URL of the file in cloud storage
        loadTag:
          $ref: '#/components/schemas/LoadTagModel'
      description: File in the data repository
    DirectoryDetailModel:
      type: object
      properties:
        enumerated:
          type: boolean
          description: >
            Indicates whether or not the directory has been enumerated. True means the directory has been enumerated.
            The contents property describes the contents. An empty array indicates and empty directory. False means
            the directory has not been enumerated. If the contents property is present, it should be ignored.
        contents:
          type: array
          description: Array of directory contents
          items:
            $ref: '#/components/schemas/FileModel'
      description: Directory in the data repository
    LoadTagModel:
      type: string
      description: >
        client-specified tag for a data or file load. If no id is specified, we use the
        string form of the job create time as the tag.
    BulkLoadRequestModel:
      required:
        - loadControlFile
        - loadTag
        - profileId
      type: object
      properties:
        profileId:
          $ref: '#/components/schemas/UniqueIdProperty'
        loadTag:
          $ref: '#/components/schemas/LoadTagModel'
        maxFailedFileLoads:
          type: integer
          default: 0
          description: max number of failed file loads before stopping; if -1, allow any number of errors
        loadControlFile:
          type: string
          description: >-
            gs:// path to a text file in a bucket. The file must be accessible to the DR
            Manager. Each line of the file is interpreted as the JSON form of one
            BulkLoadFileModel. For example, one line might look like
              '{ "sourcePath":"gs:/bucket/path/file", "targetPath":"/target/path/file" }'
      description: >-
        Body of a bulk file load request. This variant of a bulk load provides the set of
        files to be loaded in a file containing the JSON form of a BulkLoadFileModel.
        A summary of the load results is returned in the async response (BulkLoadResponseModel)
        Per-file details of a bulk load are always stored into the dataset tabular data store
        and can be retrieved directly from there, or via the GET .../bulk/{loadTag}
        They can be cleaned up with the DELETE .../bulk/{loadTag}
    BulkLoadArrayRequestModel:
      required:
        - loadArray
        - loadTag
        - profileId
      type: object
      properties:
        profileId:
          $ref: '#/components/schemas/UniqueIdProperty'
        loadTag:
          $ref: '#/components/schemas/LoadTagModel'
        maxFailedFileLoads:
          type: integer
          default: 0
          description: max number of failed file loads before stopping; if -1, allow any number of errors
        loadArray:
          type: array
          description: Array files to load
          items:
            $ref: '#/components/schemas/BulkLoadFileModel'
      description: >-
        Body of a bulk file load request. This variant of a bulk load provides the set of
        files to be loaded in the body of the request. Both the summary of the load and the
        per-file details of the bulk load returned in the async response (BulkLoadArrayResponseModel)
        Per-file details of a bulk load are also stored into the dataset tabular data store
        and can be retrieved directly from there, or via the GET .../bulk/{loadTag}
        They can be cleaned up with the DELETE .../bulk/{loadTag}
    BulkLoadFileModel:
      required:
        - sourcePath
        - targetPath
      type: object
      properties:
        sourcePath:
          type: string
          description: gs URL of the source file to load
        targetPath:
          type: string
          description: >
            Full path within the dataset where the file should be placed.
            The path must start with /.
        mimeType:
          type: string
          description: >-
            A string providing the mime-type of the Data Object.
            For example, "application/json".
        description:
          type: string
          description: A human readable description of the contents of the Data Object.
      description: Describes one file within a bulk file load
    BulkLoadResultModel:
      type: object
      properties:
        loadTag:
          $ref: '#/components/schemas/LoadTagModel'
        jobId:
          type: string
        totalFiles:
          type: integer
        succeededFiles:
          type: integer
        failedFiles:
          type: integer
        notTriedFiles:
          type: integer
      description: Returned when the bulk file load job finishes.
    BulkLoadArrayResultModel:
      type: object
      properties:
        loadSummary:
          $ref: '#/components/schemas/BulkLoadResultModel'
        loadFileResults:
          type: array
          items:
            $ref: '#/components/schemas/BulkLoadFileResultModel'
      description: Returned when the bulk file load job finishes.
    BulkLoadFileResultModel:
      required:
        - sourcePath
        - targetPath
      type: object
      properties:
        sourcePath:
          type: string
          description: gs URL of the source file to load
        targetPath:
          type: string
          description: >
            Full path within the dataset where the file should be placed.
            The path must start with /.
        state:
          $ref: '#/components/schemas/BulkLoadFileState'
        fileId:
          type: string
          description: The fileId of the loaded file; non-null if state is SUCCEEDED
        error:
          type: string
          description: The error message if state is FAILED
      description: Describes the status result of one file within a bulk file load
    BulkLoadHistoryModel:
      required:
        - sourcePath
        - targetPath
      type: object
      properties:
        sourcePath:
          type: string
          description: gs URL of the source file to load
        targetPath:
          type: string
          description: >
            Full path within the dataset where the file should be placed.
            The path must start with /.
        state:
          $ref: '#/components/schemas/BulkLoadFileState'
        fileId:
          type: string
          description: The fileId of the loaded file; non-null if state is SUCCEEDED
        checksumCRC:
          type: string
          description: The checksum crc of the loaded file; non-null if state is SUCCEEDED
        checksumMD5:
          type: string
          description: The checksum mD5 of the loaded file; non-null if state is SUCCEEDED
        error:
          type: string
          description: The error message if state is FAILED
      description: Describes metadata about a file during a bulk load
    BulkLoadFileState:
      type: string
      enum:
        - succeeded
        - failed
        - not_tried
        - running
    SnapshotRequestModel:
      required:
        - contents
        - name
      type: object
      properties:
        name:
          $ref: '#/components/schemas/DatasetSnapshotNameProperty'
        description:
          type: string
          description: Description of the snapshot
        contents:
          type: array
          items:
            $ref: '#/components/schemas/SnapshotRequestContentsModel'
        readers:
          type: array
          items:
            type: string
        profileId:
          $ref: '#/components/schemas/UniqueIdProperty'
      description: >
        Request for creating a snapshot.
        For now, the API only supports snapshots defined as a single dataset asset and
        row ids for the root table of that asset. The snapshot has exactly the tables
        and columns of the asset. An optional list of users can be provided to set as
        readers on the snapshot.
        In the future, we will need to extend this to handle cross-dataset snapshots
        from disparate assets, so we will need to support column and datatype
        mapping from asset tables to the target snapshot tables.
    SnapshotRequestContentsModel:
      required:
        - datasetName
        - mode
      type: object
      properties:
        datasetName:
          $ref: '#/components/schemas/DatasetSnapshotNameProperty'
        mode:
          type: string
          enum:
            - byAsset
            - byFullView
            - byQuery
            - byRowId
        assetSpec:
          $ref: '#/components/schemas/SnapshotRequestAssetModel'
        querySpec:
          $ref: '#/components/schemas/SnapshotRequestQueryModel'
        rowIdSpec:
          $ref: '#/components/schemas/SnapshotRequestRowIdModel'
      description: >
        The contents specifies the source of the data (dataset and asset)
        and the rows to include (field and rootValues).
        TODO: field will move the asset object; it is here as a stepping stone
    SnapshotRequestAssetModel:
      required:
        - assetName
        - rootValues
      type: object
      properties:
        assetName:
          $ref: '#/components/schemas/ObjectNameProperty'
        rootValues:
          type: array
          items:
            type: string
      description: >
        The datasource identifies the dataset and asset from which to source the data.
    SnapshotRequestQueryModel:
      required:
        - assetName
        - query
      type: object
      properties:
        assetName:
          $ref: '#/components/schemas/ObjectNameProperty'
        query:
          type: string
      description: >
        A specification of the query to go into a snapshot.
    SnapshotRequestRowIdModel:
      required:
        - tables
      type: object
      properties:
        tables:
          type: array
          items:
            $ref: '#/components/schemas/SnapshotRequestRowIdTableModel'
      description: >
        Identifies the list of tables + columns along with the row ids to be included in the snapshot
    SnapshotRequestRowIdTableModel:
      required:
        - columns
        - rowIds
        - tableName
      type: object
      properties:
        tableName:
          $ref: '#/components/schemas/ObjectNameProperty'
        columns:
          type: array
          items:
            $ref: '#/components/schemas/ObjectNameProperty'
        rowIds:
          type: array
          items:
            $ref: '#/components/schemas/UniqueIdProperty'
      description: >
        A specification of a table, columns, and row ids to go into a snapshot.
    SnapshotSummaryModel:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/UniqueIdProperty'
        name:
          $ref: '#/components/schemas/DatasetSnapshotNameProperty'
        description:
          type: string
          description: Description of the snapshot
        createdDate:
          type: string
          description: Date the snapshot was created
        profileId:
          $ref: '#/components/schemas/UniqueIdProperty'
      description: >
        summary of snapshot
    EnumerateSnapshotModel:
      type: object
      properties:
        total:
          type: integer
          description: Total number of snapshots
        items:
          type: array
          items:
            $ref: '#/components/schemas/SnapshotSummaryModel'
      description: >
        The total number of snapshots available that match the criteria and a page of summaries
    SnapshotModel:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/UniqueIdProperty'
        name:
          $ref: '#/components/schemas/DatasetSnapshotNameProperty'
        description:
          type: string
          description: Description of the snapshot
        createdDate:
          type: string
          description: Date the snapshot was created
        source:
          type: array
          items:
            $ref: '#/components/schemas/SnapshotSourceModel'
        tables:
          type: array
          items:
            $ref: '#/components/schemas/TableModel'
        relationships:
          type: array
          items:
            $ref: '#/components/schemas/RelationshipModel'
        profileId:
          $ref: '#/components/schemas/UniqueIdProperty'
        dataProject:
          type: string
          description: Project id of the snapshot data project
      description: >
        SnapshotModel returns detailed data about an existing snapshot.
    SnapshotSourceModel:
      required:
        - asset
        - dataset
      type: object
      properties:
        dataset:
          $ref: '#/components/schemas/DatasetSummaryModel'
        asset:
          $ref: '#/components/schemas/ObjectNameProperty'
      description: >
        SnapshotSourceModel returns data about the source for an existing snapshot
    JobModel:
      required:
        - id
        - job_status
        - status_code
      type: object
      properties:
        id:
          $ref: '#/components/schemas/ShortIdProperty'
        description:
          type: string
          description: Description of the job's flight from description flight input
            parameter
        job_status:
          type: string
          description: Status of job
          enum:
            - running
            - succeeded
            - failed
        status_code:
          type: integer
          description: HTTP code
        submitted:
          type: string
          description: Timestamp when the flight was created
        completed:
          type: string
          description: Timestamp when the flight was completed; not present if not
            complete
      description: >
        Status of job
    ErrorModel:
      required:
        - message
      type: object
      properties:
        message:
          type: string
        errorDetail:
          type: array
          items:
            type: string
      description: >
        Representation of an error that occurred while processing a request.
        Some errors provide error details. For example, validation of input may report several problems.
        Each of those are reported in a separate error detail.
    DeleteResponseModel:
      type: object
      properties:
        objectState:
          type: string
          enum:
            - deleted
            - not_found
      description: >
        Returns the state of the object of the deletion
    PolicyMemberRequest:
      required:
        - email
      type: object
      properties:
        email:
          type: string
      description: >
        email of user or group to add to policy
    PolicyModel:
      type: object
      properties:
        name:
          type: string
        members:
          type: array
          items:
            type: string
      description: >
        Describes a policy
    PolicyResponse:
      type: object
      properties:
        policies:
          type: array
          items:
            $ref: '#/components/schemas/PolicyModel'
      description: >
        email of user or group to add to policy
    DataDeletionRequest:
      required:
        - deleteType
        - specType
      type: object
      properties:
        deleteType:
          type: string
          enum:
            - soft
        specType:
          type: string
          enum:
            - gcsFile
        tables:
          type: array
          items:
            $ref: '#/components/schemas/DataDeletionTableModel'
      description: >
        a container holding a specification for how to delete tabular data in one or more tables
    DataDeletionTableModel:
      required:
        - tableName
      type: object
      properties:
        tableName:
          type: string
          description: the name of a table in the dataset
        gcsFileSpec:
          $ref: '#/components/schemas/DataDeletionGcsFileModel'
      description: >
        a specification for how to delete tabular data in one table
    DataDeletionGcsFileModel:
      required:
        - fileType
        - path
      type: object
      properties:
        fileType:
          type: string
          enum:
            - csv
        path:
          type: string
          description: a gs://path/to/a/file that can include a wildcard (*)
      description: >
        a specification of a gcs file containing row ids to delete
    UserStatusInfo:
      required:
        - enabled
        - userEmail
        - userSubjectId
      type: object
      properties:
        userSubjectId:
          type: string
          description: user id
        userEmail:
          type: string
          description: user email
        enabled:
          type: boolean
          description: true if the user is enabled in ldap
      description: ""
    RepositoryStatusModel:
      required:
        - ok
        - systems
      type: object
      properties:
        ok:
          type: boolean
          description: status of this service
        systems:
          type: object
          additionalProperties:
            type: object
            properties:
              ok:
                type: boolean
              critical:
                type: boolean
              message:
                type: string
      description: Returns the status of monitored subsystems.
    RepositoryConfigurationModel:
      type: object
      properties:
        clientId:
          type: string
          description: the google defined client id for the repository
        activeProfiles:
          type: array
          description: the active profiles for this instance
          items:
            type: string
        semVer:
          type: string
          description: the semantic version of the data repository
        gitHash:
          type: string
          description: the git hash of the data repository
        terraUrl:
          type: string
          description: the url to the corresponding terra environment
        samUrl:
          type: string
          format: uri
          description: the URI of SAM this instance uses
    ConfigModel:
      type: object
      properties:
        name:
          type: string
          description: name of the configuration
        configType:
          type: string
          enum:
            - fault
            - parameter
            - logging
        fault:
          $ref: '#/components/schemas/ConfigFaultModel'
        parameter:
          $ref: '#/components/schemas/ConfigParameterModel'
      description: >
        There are three types of configurations: faults, parameters, and logging.
        Due to the way swagger works, we make a property for each type, but only
        the property that matches the type enumeration will be processed.
    ConfigFaultModel:
      type: object
      properties:
        enabled:
          type: boolean
          description: >
            If the fault is enabled, then is in effect. Fault points cause insert
            faults. Typical usage is that faults are disabled on system start and explicitly
            enabled by test code or via the setFault endpoint.
        faultType:
          type: string
          description: >
            A simple fault has no parameters. It is just enabled or disabled. This type of
            fault is typically used when the desired behavior of the fault is too complex
            for expression in the fault types and custom code is needed to get the right
            failure behavior.

            A counted fault is used to insert some number of faults in a pattern. See the
            ConfigFaultCountedModel for details.
          enum:
            - simple
            - counted
        counted:
          $ref: '#/components/schemas/ConfigFaultCountedModel'
      description: Fault control parameters
    ConfigFaultCountedModel:
      type: object
      properties:
        skipFor:
          type: integer
          description: number of fault tests to skip before beginning fault insertion
        insert:
          type: integer
          description: total number of times to insert the fault; -1 means insert
            forever
        rate:
          type: integer
          description: >
            insert a fault rate percent of the time. If rate is 100, the
            fault will always be inserted regardless of rate.
        rateStyle:
          type: string
          description: >
            fixed style means insert the fault; skip for rate-1; ...
            random style means randomly insert the fault with probability of 1:<rate>
          enum:
            - fixed
            - random
      description: >
        Counted fault is used to insert a fixed number of faults. A "fault test" is one
        call to the fault manager for a named fault. The skipFor lets you get the system to
        a certain stable point where you want to begin inserting faults. Insert gives the
        total number of faults to trigger. The rate gives the percentage of the time to
        insert the fault. A value of 50 would insert the fault half
        the time. A value of 20 would insert the fault 20% of the time . The rateStyle
        describes whether the fault will be fixed or random. In our 20 example, if the rate style
        is fixed, the fault would be skipped 4 times, inserted once, skipped 4 times, inserted once, etc.
        It uses integer math - you've been warned. If the rate style is random, a random number
        is generated to determine whether the fault is inserted with a probability of 0.2.
    ConfigParameterModel:
      type: object
      properties:
        value:
          type: string
          description: >
            Configuration parameters are always passed as strings and converted within
            the service. That keeps the JSON simple. Sending in specific types doesn't
            help much, because there still might be a mismatch between the type passed in
            and the type required.
      description: The value of the parameter
    ConfigGroupModel:
      type: object
      properties:
        label:
          type: string
          description: string to be logged with the settings to identify this set
        group:
          type: array
          items:
            $ref: '#/components/schemas/ConfigModel'
      description: A group of ConfigModel with a label for logging
    ConfigListModel:
      type: object
      properties:
        total:
          type: integer
          description: Total number of configs
        items:
          type: array
          items:
            $ref: '#/components/schemas/ConfigModel'
      description: Result list of configuration settings
    ConfigEnableModel:
      type: object
      properties:
        enabled:
          type: boolean
          description: whether to enable (default) or disable the fault
          default: true
      description: Control whether a fault is enabled

    UpgradeModel:
      required:
        - upgradeName
        - upgradeType
      type: object
      properties:
        upgradeName:
          type: string
          description: Unique name for the upgrade
        upgradeType:
          type: string
          description: Enumeration to allow different kinds upgrades
          enum:
            - custom
        customName:
          type: string
          description: >-
            Name of custom upgrade to launch. Only used when upgradeType is custom.
        customArgs:
          description: >-
            Array of string arguments to the custom upgrade. Only used when upgradeType is custom.
          type: array
          items:
            type: string

    UpgradeResponseModel:
      type: object
      properties:
        upgradeName:
          type: string
          description: Unique name for the upgrade
        startTime:
          type: string
          description: Timestamp the upgrade was started
        endTime:
          type: string
          description: Timestamp the upgrade completed

    CloudPlatform:
      type: string
      enum: [ gcp, azure ]
      default: gcp
      description: Cloud platforms supported by TDR.

    ##############################################################################
    ## DRS STANDARD MODELS
    ##############################################################################
    DRSChecksum:
      required:
        - checksum
      type: object
      properties:
        checksum:
          type: string
          description: The hex-string encoded checksum for the data
        type:
          type: string
          description: >-
            The digest method used to create the checksum. If left unspecified md5
            will be assumed.

            possible values:
            md5                # most blob stores provide a checksum using this
            etag               # multipart uploads to blob stores
            sha256
            sha512
    DRSObject:
      required:
        - checksums
        - id
        - self_uri
        - size
      type: object
      properties:
        id:
          type: string
          description: An identifier unique to this `Object`.
        name:
          type: string
          description: >-
            A string that can be used to name an `Object`.
            This string is made up of uppercase and lowercase letters, decimal digits, hypen, period, and underscore [A-Za-z0-9.-_].
            See http://pubs.opengroup.org/onlinepubs/9699919799/basedefs/V1_chap03.html#tag_03_282[portable filenames].
        self_uri:
          type: string
          description: >-
            A drs:// URI, as defined in the DRS documentation, that tells clients how to access this object.
            The intent of this field is to make DRS objects self-contained, and therefore easier for clients to store and pass around.
          example: drs://drs.example.org/314159
        size:
          type: integer
          description: >-
            For blobs, the blob size in bytes.
            For bundles, the cumulative size, in bytes, of items in the `contents` field.
          format: int64
        created_time:
          type: string
          description: Timestamp of object creation in RFC3339.
        updated_time:
          type: string
          description: Timestamp of `Object` update in RFC3339, identical to create
            timestamp in systems that do not support updates.
        version:
          type: string
          description: >-
            A string representing a version.
            (Some systems may use checksum, a RFC3339 timestamp, or an incrementing version number.)
        mime_type:
          type: string
          description: A string providing the mime-type of the `Object`.
          example: application/json
        checksums:
          minItems: 1
          type: array
          description: >-
            The checksum of the `Object`. At least one checksum must be provided.
            For blobs, the checksum is computed over the bytes in the blob.

            For bundles, the checksum is computed over a sorted concatenation of the checksums of its top-level contained objects (not recursive, names not included). The list of checksums is sorted alphabetically (hex-code) before concatenation and a further checksum is performed on the concatenated checksum value.

            For example, if a bundle contains blobs with the following checksums:
            md5(blob1) = 72794b6d
            md5(blob2) = 5e089d29

            Then the checksum of the bundle is:
            md5( concat( sort( md5(blob1), md5(blob2) ) ) )
            = md5( concat( sort( 72794b6d, 5e089d29 ) ) )
            = md5( concat( 5e089d29, 72794b6d ) )
            = md5( 5e089d2972794b6d )
            = f7a29a04
          items:
            $ref: '#/components/schemas/DRSChecksum'
        access_methods:
          minItems: 1
          type: array
          description: >-
            The list of access methods that can be used to fetch the `Object`.
            Required for single blobs; optional for bundles.
          items:
            $ref: '#/components/schemas/DRSAccessMethod'
        contents:
          type: array
          description: >-
            If not set, this `Object` is a single blob.
            If set, this `Object` is a bundle containing the listed `ContentsObject` s (some of which may be further nested).
          items:
            $ref: '#/components/schemas/DRSContentsObject'
        description:
          type: string
          description: A human readable description of the `Object`.
        aliases:
          type: array
          description: A list of strings that can be used to find other metadata about
            this `Object` from external metadata sources. These aliases can be used
            to represent secondary accession numbers or external GUIDs.
          items:
            type: string
    DRSAccessURL:
      required:
        - url
      type: object
      properties:
        url:
          type: string
          description: A fully resolvable URL that can be used to fetch the actual
            object bytes.
        headers:
          type: array
          description: An optional list of headers to include in the HTTP request
            to `url`. These headers can be used to provide auth tokens required to
            fetch the object bytes.
          example:
            Authorization: Basic Z2E0Z2g6ZHJz
          items:
            type: string
    DRSAccessMethod:
      required:
        - type
      type: object
      properties:
        type:
          type: string
          description: Type of the access method.
          enum:
            - s3
            - gs
            - ftp
            - gsiftp
            - globus
            - htsget
            - https
            - file
        access_url:
          $ref: '#/components/schemas/DRSAccessURL'
        access_id:
          type: string
          description: >-
            An arbitrary string to be passed to the `/access` path to get an `AccessURL`.
            This must be unique per object. Note that at least one of `access_url` and `access_id` must be provided.
        region:
          type: string
          description: Name of the region in the cloud service provider that the object
            belongs to.
          example: us-east-1
    DRSError:
      type: object
      properties:
        msg:
          type: string
          description: A detailed error message.
        status_code:
          type: integer
          description: The integer representing the HTTP status code (e.g. 200, 404).
      description: An object that can optionally include information about the error.
    DRSServiceInfo:
      required:
        - version
      type: object
      properties:
        version:
          type: string
          description: Service version
        title:
          type: string
          description: Service name
        description:
          type: string
          description: Service description
        contact:
          type: object
          properties: {}
          description: Maintainer contact info
        license:
          type: object
          properties: {}
          description: License information for the exposed API
      description: Useful information about the running service.
    DRSContentsObject:
      required:
        - name
      type: object
      properties:
        name:
          type: string
          description: A name declared by the bundle author that must be used when
            materialising this object, overriding any name directly associated with
            the object itself. The name must be unique with the containing bundle.
            This string is made up of uppercase and lowercase letters, decimal digits,
            hypen, period, and underscore [A-Za-z0-9.-_]. See http://pubs.opengroup.org/onlinepubs/9699919799/basedefs/V1_chap03.html#tag_03_282[portable
            filenames].
        id:
          type: string
          description: A DRS identifier of an `Object` (either a single blob or a
            nested bundle). If this ContentsObject is an object within a nested bundle,
            then the id is optional. Otherwise, the id is required.
        drs_uri:
          type: array
          description: A list of full DRS identifier URI paths that may be used to
            obtain the object. These URIs may be external to this DRS instance.
          example: drs://example.com/ga4gh/drs/v1/objects/{object_id}
          items:
            type: string
        contents:
          type: array
          description: If this ContentsObject describes a nested bundle and the caller
            specified "?expand=true" on the request, then this contents array must
            be present and describe the objects within the nested bundle.
          items:
            $ref: '#/components/schemas/DRSContentsObject'
  parameters:
    Id:
      name: id
      in: path
      description: A UUID to used to identify an object in the repository
      required: true
      schema:
        type: string
    SnapshotPolicyName:
      name: policyName
      in: path
      description: The relevant policy
      required: true
      schema:
        type: string
        enum:
          - steward
          - reader
          - discoverer
    DatasetPolicyName:
      name: policyName
      in: path
      description: The relevant policy
      required: true
      schema:
        type: string
        enum:
          - steward
          - custodian
          - snapshot_creator
    ProfilePolicyName:
      name: policyName
      in: path
      description: The relevant policy
      required: true
      schema:
        type: string
        enum:
          - owner
          - user
    FileId:
      name: fileid
      in: path
      description: A file id
      required: true
      schema:
        type: string
    Path:
      name: path
      in: query
      description: URL-encoded full path to a file or directory
      required: true
      schema:
        type: string
    Depth:
      name: depth
      in: query
      description: Enumeration depth; -1 means fully expand; 0 means no expansion;
        1..N expands that many subdirectories
      schema:
        type: integer
        default: 0
    LoadTag:
      name: loadtag
      in: path
      description: a load tag
      required: true
      schema:
        type: string
    AssetId:
      name: assetid
      in: path
      description: An asset id
      required: true
      schema:
        type: string
  securitySchemes:
    googleoauth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: https://accounts.google.com/o/oauth2/auth
          scopes:
            openid: open id authorization
            email: email authorization
            profile: profile authorization
            https://www.googleapis.com/auth/cloud-billing: cloud billing authorization
    authToken:
      type: apiKey
      description: >
        A valid authorization token must be passed in the 'Authorization' header.
        Example syntax for using 'Authorization' header :
          Bearer: token_string
      name: Authorization
      in: header
