# [dd] It seems like openapi 3.0 is released, but swagger-codegen does not yet support it.
# We should move to 3.0 when swagger-codegen is ready.

swagger: '2.0'
info:
  title: Data Repository API
  description: |
    This document defines the REST API for Data Repository.
    **Status: design in progress**

    There are four top-level endpoints (besides some used by swagger):
     * /swagger-ui.html - generated by swagger: swagger API page that provides this documentation and a live UI for
         submitting REST requests
     * /status - provides the operational status of the service
     * /api    - is the authenticated and authorized Data Repository API
     * /ga4gh/drs/v1 - is a transcription of the Data Repository Service API

    The overall API (/api) currently supports two interfaces:
     * Repository - a general and default interface for initial setup, managing ingest and repository metadata
     * Resource - an interface for managing billing accounts and resources

    The API endpoints are organized by interface. Each interface is separately versioned.

    ## Notes on Naming
    All of the reference items are suffixed with "Model". Those names are used as the class names in the generated Java
    code. It is helpful to distinguish these model classes from other related classes, like the DAO classes and the
    operation classes.

    ## Editing and debugging
    I have found it best to edit this file directly to make changes and then use the swagger-editor to validate. The
    errors out of swagger-codegen are not that helpful. In the swagger-editor, it gives you nice errors and links to
    the place in the YAML where the errors are.

    But... the swagger-editor has been a bit of a pain for me to run. I tried the online website and was not able to
    load my YAML. Instead, I run it locally in a docker container, like this:
    ```
    docker pull swaggerapi/swagger-editor
    docker run -p 9090:8080 swaggerapi/swagger-editor
    ```
    Then navigate to localhost:9090 in your browser.

    I have not been able to get the file upload to work. It is a bit of a PITA, but I copy-paste the source code,
    replacing what is in the editor. Then make any fixes. Then copy-paste the resulting, valid file back into our source
    code. Not elegant, but easier than playing detective with the swagger-codegen errors.

    This might be something about my browser or environment, so give it a try yourself and see how it goes.

    ## Merging the DRS standard swagger into this swagger ##

    The merging is done in three sections:
     1. Merging the security definitions into our security definitions
     2. This section of paths. We make all paths explicit (prefixed with /ga4gh/drs/v1)
        All standard DRS definitions and parameters are prefixed with 'DRS' to separate them
        from our native definitions and parameters. We remove the x-swagger-router-controller lines.
     3. A separate part of the definitions section for the DRS definitions

    NOTE: the code here does not relect the DRS spec anymore. See DR-409.


  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html

  version: "0.1.0"

basePath: /
produces:
  - application/json

##########################################################################################
# AUTH
##########################################################################################
security:
  - googleoauth:
    - openid
    - email
    - profile

securityDefinitions:
  googleoauth:
    type: oauth2
    authorizationUrl: 'https://accounts.google.com/o/oauth2/auth'
    flow: implicit
    scopes:
      openid: open id authorization
      email: email authorization
      profile: profile authorization
  authToken: ## From DRS
    description: |
      A valid authorization token must be passed in the 'Authorization' header.
      Example syntax for using 'Authorization' header :
        Bearer: token_string
    type: apiKey
    name: Authorization
    in: header

##########################################################################################
# PATHS
##########################################################################################
paths:

  ## Unauthenticated endpoints

  '/status':
    get:
      description: |
        Returns the operational status of the service
      operationId: serviceStatus
      tags:
        - unauthenticated
      responses:
        200:
          description: service is fine
        500:
          description: service is broken
      security: []


  '/configuration':
    get:
      description: Retrieve the repository configuration information
      operationId: retrieveRepositoryConfig
      tags:
        - unauthenticated
      responses:
        200:
          description: Repository Config
          schema:
            $ref: '#/definitions/RepositoryConfigurationModel'
        500:
          description: Config is unavailable
      security: []


  ## Resources interface

  '/api/resources/v1/profiles':
    post:
      description: |
        Creates a new profile associated with a billing account
      operationId: createProfile
      tags:
        - resources
      consumes:
      - application/json
      parameters:
      - in: body
        name: billingProfileRequest
        schema:
          $ref: '#/definitions/BillingProfileRequestModel'
      responses:
        201:
          description: Successfully created the new profile associated with the billing account
          schema:
            $ref: '#/definitions/BillingProfileModel'
        400:
          description: Bad request - see error message
          schema:
            $ref: '#/definitions/ErrorModel'
        403:
          description: No permission to create profiles
          schema:
            $ref: '#/definitions/ErrorModel'

    get:  ## enumerate
      description: |
        Returns a list of all of the billing profiles
      operationId: enumerateProfiles
      tags:
      - resources
      parameters:
      - in: query
        name: offset
        type: integer
        default: 0
        description: The number of items to skip before starting to collect the result set.
      - in: query
        name: limit
        type: integer
        description: The numbers of items to return.
        default: 10
      responses:
        200:
          description: List of billing profiles
          schema:
            $ref: '#/definitions/EnumerateBillingProfileModel'


  '/api/resources/v1/profiles/{id}':
    get:  ## retrieve
      description: Retrieve a billing profile by id
      operationId: retrieveProfile
      tags:
      - resources
      parameters:
      - $ref: '#/parameters/Id'
      responses:
        200:
          description: Billing profile
          schema:
            $ref: '#/definitions/BillingProfileModel'
        400:
          description: Bad request - invalid id, badly formed
          schema:
            $ref: '#/definitions/ErrorModel'
        403:
          description: No permission to see billing profile
          schema:
            $ref: '#/definitions/ErrorModel'
        404:
          description: Not found - billing profile id does not exist
          schema:
            $ref: '#/definitions/ErrorModel'

    delete: ## delete
      description: Delete a billing profile by id
      operationId: deleteProfile
      tags:
      - resources
      parameters:
      - $ref: '#/parameters/Id'
      responses:
        200:
          description: Successful deletion
          schema:
            $ref: '#/definitions/DeleteResponseModel'
        400:
          description: Bad request - invalid id, badly formed
          schema:
            $ref: '#/definitions/ErrorModel'
        403:
          description: No permission to delete profile
          schema:
            $ref: '#/definitions/ErrorModel'
        404:
          description: Not found - profile id does not exist
          schema:
            $ref: '#/definitions/ErrorModel'
        409:
          description: Profile in use by at least one dataset
          schema:
            $ref: '#/definitions/ErrorModel'


  ## Repository Interface

  '/api/repository/v1/snapshots':
    get:  ## enumerate
      description: |
        Returns a list of all of the snapshots the caller has access to
      operationId: enumerateSnapshots
      tags:
      - repository
      parameters:
      - in: query
        name: offset
        type: integer
        default: 0
        description: The number of items to skip before starting to collect the result set.
      - in: query
        name: limit
        type: integer
        description: The numbers of items to return.
        default: 10
      - in: query
        name: sort
        type: string
        default: created_date
        enum:
        - name
        - description
        - created_date
        description: The field to use for sorting.
      - in: query
        name: direction
        type: string
        default: desc
        enum:
        - asc
        - desc
        description: The direction to sort.
      - in: query
        name: filter
        type: string
        description: Filter the results where this string is a case insensitive match in the name or description.
      responses:
        200:
          description: List of snapshots
          schema:
            $ref: '#/definitions/EnumerateSnapshotModel'

    post:
      description: Create a new snapshot
      operationId: createSnapshot
      tags:
      - repository
      consumes:
      - application/json
      parameters:
      - in: body
        name: snapshot
        description: Snapshot to create
        schema:
          $ref: '#/definitions/SnapshotRequestModel'
      responses:
        202:
          description: Job status of snapshot creation job & url for polling in the response header
          schema:
            $ref: '#/definitions/JobModel'
          headers:
            location:
              type: string
              description: url for the job polling
        200:
          description: Redirect for snapshot successful creation
          schema:
            $ref: '#/definitions/JobModel'
          headers:
            location:
              type: string
              description: url for the job result
        400:
          description: Bad request - invalid name, badly formed or user email not found
          schema:
            $ref: '#/definitions/ErrorModel'
        403:
          description: No permission to create snapshots
          schema:
            $ref: '#/definitions/ErrorModel'
        409:
          description: Snapshot with this name already exists
          schema:
            $ref: '#/definitions/ErrorModel'


  '/api/repository/v1/snapshots/{id}':
    get:  ## retrieve
      description: Retrieve a snapshot by id
      operationId: retrieveSnapshot
      tags:
      - repository
      parameters:
        - $ref: '#/parameters/Id'
      responses:
        200:
          description: Snapshot
          schema:
            $ref: '#/definitions/SnapshotModel'
        400:
          description: Bad request - invalid id, badly formed
          schema:
            $ref: '#/definitions/ErrorModel'
        403:
          description: No permission to see snapshot
          schema:
            $ref: '#/definitions/ErrorModel'
        404:
          description: Not found - snapshot id does not exist
          schema:
            $ref: '#/definitions/ErrorModel'

    delete: ## delete
      description: Delete a snapshot by id
      operationId: deleteSnapshot
      tags:
      - repository
      parameters:
        - $ref: '#/parameters/Id'
      responses:
        202:
          description: Job status of snapshot creation job & url for polling in the response header
          schema:
            $ref: '#/definitions/JobModel'
          headers:
            location:
              type: string
              description: url for the job polling
        200:
          description: Redirect for snapshot successful creation
          schema:
            $ref: '#/definitions/JobModel'
          headers:
            location:
              type: string
              description: url for the job result
        400:
          description: Bad request - invalid id, badly formed
          schema:
            $ref: '#/definitions/ErrorModel'
        403:
          description: No permission to delete snapshot
          schema:
            $ref: '#/definitions/ErrorModel'
        404:
          description: Not found - snapshot id does not exist
          schema:
            $ref: '#/definitions/ErrorModel'
        409:
          description: Snapshot in use?
          schema:
            $ref: '#/definitions/ErrorModel'

  '/api/repository/v1/snapshots/{id}/files/{fileid}':
    get:
      description: Lookup metadata for one file
      operationId: lookupSnapshotFileById
      tags:
        - repository
      parameters:
        - $ref: '#/parameters/Id'
        - $ref: '#/parameters/FileId'
        - $ref: '#/parameters/Depth'
      responses:
        200:
          description: File exists
          schema:
            $ref: '#/definitions/FileModel'
        400:
          description: Bad request - not sure this will ever happen
          schema:
            $ref: '#/definitions/ErrorModel'
        403:
          description: No permission
          schema:
            $ref: '#/definitions/ErrorModel'
        404:
          description: Not found - file id does not exist
          schema:
            $ref: '#/definitions/ErrorModel'
        409:
          description: No idea if we will generate this error code
          schema:
            $ref: '#/definitions/ErrorModel'

  '/api/repository/v1/snapshots/{id}/filesystem/objects':
    get:
      description: Lookup metadata for one file
      operationId: lookupSnapshotFileByPath
      tags:
        - repository
      parameters:
        - $ref: '#/parameters/Id'
        - $ref: '#/parameters/Path'
        - $ref: '#/parameters/Depth'
      responses:
        200:
          description: File exists
          schema:
            $ref: '#/definitions/FileModel'
        400:
          description: Bad request - not sure this will ever happen
          schema:
            $ref: '#/definitions/ErrorModel'
        403:
          description: No permission
          schema:
            $ref: '#/definitions/ErrorModel'
        404:
          description: Not found - file id does not exist
          schema:
            $ref: '#/definitions/ErrorModel'
        409:
          description: No idea if we will generate this error code
          schema:
            $ref: '#/definitions/ErrorModel'

  '/api/repository/v1/snapshots/{id}/policies':
    get:  ## retrieve
      description: Retrieve the read and discover policies for the snapshot
      operationId: retrieveSnapshotPolicies
      tags:
      - repository
      parameters:
      - $ref: '#/parameters/Id'
      responses:
        200:
          description: Policy
          schema:
            $ref: '#/definitions/PolicyResponse'
        400:
          description: Bad request - invalid id, badly formed
          schema:
            $ref: '#/definitions/ErrorModel'
        403:
          description: No permission to see policies
          schema:
            $ref: '#/definitions/ErrorModel'
        404:
          description: Not found - snapshot id does not exist
          schema:
            $ref: '#/definitions/ErrorModel'


  '/api/repository/v1/snapshots/{id}/policies/{policyName}/members':
    post:  ## retrieve
      description: Adds a member to the specified policy for the snapshot
      operationId: addSnapshotPolicyMember
      tags:
      - repository
      consumes:
      - application/json
      parameters:
      - in: body
        name: policyMember
        description: Snapshot to change the policy of
        schema:
          $ref: '#/definitions/PolicyMemberRequest'
      - $ref: '#/parameters/Id'
      - $ref: '#/parameters/SnapshotPolicyName'
      responses:
        201:
          description: PolicyResponse
          schema:
            $ref: '#/definitions/PolicyResponse'
        400:
          description: Bad request - invalid id, badly formed, or email not found
          schema:
            $ref: '#/definitions/ErrorModel'
        403:
          description: No permission to update policies
          schema:
            $ref: '#/definitions/ErrorModel'
        404:
          description: Not found - snapshot id does not exist
          schema:
            $ref: '#/definitions/ErrorModel'


  '/api/repository/v1/snapshots/{id}/policies/{policyName}/members/{memberEmail}':
    delete:  ## retrieve
      description: Adds a member to the specified policy for the snapshot
      operationId: deleteSnapshotPolicyMember
      tags:
      - repository
      parameters:
      - $ref: '#/parameters/Id'
      - $ref: '#/parameters/SnapshotPolicyName'
      - name: memberEmail
        description: The email of the user to remove
        required: true
        in: path
        type: string
      responses:
        200:
          description: PolicyResponse
          schema:
            $ref: '#/definitions/PolicyResponse'
        400:
          description: Bad request - invalid id, badly formed
          schema:
            $ref: '#/definitions/ErrorModel'
        403:
          description: No permission to update policies
          schema:
            $ref: '#/definitions/ErrorModel'
        404:
          description: Not found - snapshot id does not exist
          schema:
            $ref: '#/definitions/ErrorModel'

  '/api/repository/v1/datasets':
    get:  ## enumerate
      description: |
        Returns a list of all of the datasets the caller has access to
      operationId: enumerateDatasets
      tags:
      - repository
      parameters:
      - in: query
        name: offset
        type: integer
        default: 0
        description: The number of datasets to skip before when retrieving the next page
      - in: query
        name: limit
        type: integer
        description: The numbers datasets to retrieve and return.
        default: 10
      - in: query
        name: sort
        type: string
        default: created_date
        enum:
        - name
        - description
        - created_date
        description: The field to use for sorting.
      - in: query
        name: direction
        type: string
        default: desc
        enum:
        - asc
        - desc
        description: The direction to sort.
      - in: query
        name: filter
        type: string
        description: Filter the results where this string is a case insensitive match in the name or description.
      responses:
        200:
          description: List of datasets
          schema:
            $ref: '#/definitions/EnumerateDatasetModel'

    post:
      description: Create a new dataset
      operationId: createDataset
      tags:
      - repository
      consumes:
      - application/json
      parameters:
      - in: body
        name: dataset
        description: Dataset to create
        schema:
          $ref: '#/definitions/DatasetRequestModel'
      responses:
        201:
          description: Dataset created successfully and a summary is returned
          schema:
            $ref: '#/definitions/DatasetSummaryModel'
        400:
          description: Bad request - duplicate name, invalid name, badly formed schema
          schema:
            $ref: '#/definitions/ErrorModel'
        403:
          description: No permission to create datasets
          schema:
            $ref: '#/definitions/ErrorModel'

  '/api/repository/v1/datasets/{id}':
    get:  ## retrieve
      description: Retrieve a dataset by id
      operationId: retrieveDataset
      tags:
      - repository
      parameters:
      - $ref: '#/parameters/Id'
      responses:
        200:
          description: Dataset
          schema:
            $ref: '#/definitions/DatasetModel'
        400:
          description: Bad request - invalid id, badly formed
          schema:
            $ref: '#/definitions/ErrorModel'
        403:
          description: No permission to see dataset
          schema:
            $ref: '#/definitions/ErrorModel'
        404:
          description: Not found - dataset id does not exist
          schema:
            $ref: '#/definitions/ErrorModel'

    delete: ## delete
      description: Delete a dataset by id
      operationId: deleteDataset
      tags:
      - repository
      parameters:
      - $ref: '#/parameters/Id'
      responses:
        200:
          description: Successful deletion
          schema:
            $ref: '#/definitions/DeleteResponseModel'
        400:
          description: Bad request - invalid id, badly formed
          schema:
            $ref: '#/definitions/ErrorModel'
        403:
          description: No permission to delete dataset
          schema:
            $ref: '#/definitions/ErrorModel'
        404:
          description: Not found - dataset id does not exist
          schema:
            $ref: '#/definitions/ErrorModel'
        409:
          description: Dataset in use by at least one snapshot
          schema:
            $ref: '#/definitions/ErrorModel'

  '/api/repository/v1/datasets/{id}/policies':
    get:  ## retrieve
      description: Retrieve the read and discover policies for the snapshot
      operationId: retrieveDatasetPolicies
      tags:
      - repository
      parameters:
      - $ref: '#/parameters/Id'
      responses:
        200:
          description: Policy
          schema:
            $ref: '#/definitions/PolicyResponse'
        400:
          description: Bad request - invalid id, badly formed
          schema:
            $ref: '#/definitions/ErrorModel'
        403:
          description: No permission to see policies
          schema:
            $ref: '#/definitions/ErrorModel'
        404:
          description: Not found - snapshot id does not exist
          schema:
            $ref: '#/definitions/ErrorModel'


  '/api/repository/v1/datasets/{id}/policies/{policyName}/members':
    post:
      description: Adds a member to the specified policy for the snapshot
      operationId: addDatasetPolicyMember
      tags:
      - repository
      consumes:
      - application/json
      parameters:
      - in: body
        name: policyMember
        description: Snapshot to change the policy of
        schema:
          $ref: '#/definitions/PolicyMemberRequest'
      - $ref: '#/parameters/Id'
      - $ref: '#/parameters/DatasetPolicyName'
      responses:
        201:
          description: PolicyResponse
          schema:
            $ref: '#/definitions/PolicyResponse'
        400:
          description: Bad request - invalid id, badly formed, or email not found
          schema:
            $ref: '#/definitions/ErrorModel'
        403:
          description: No permission to update policies
          schema:
            $ref: '#/definitions/ErrorModel'
        404:
          description: Not found - snapshot id does not exist
          schema:
            $ref: '#/definitions/ErrorModel'


  '/api/repository/v1/datasets/{id}/policies/{policyName}/members/{memberEmail}':
    delete:  ## delete
      description: Removes the member from the specified policy for the snapshot
      operationId: deleteDatasetPolicyMember
      tags:
      - repository
      parameters:
      - $ref: '#/parameters/Id'
      - $ref: '#/parameters/DatasetPolicyName'
      - name: memberEmail
        description: The email of the user to remove
        required: true
        in: path
        type: string
      responses:
        200:
          description: PolicyResponse
          schema:
            $ref: '#/definitions/PolicyResponse'
        400:
          description: Bad request - invalid id, badly formed
          schema:
            $ref: '#/definitions/ErrorModel'
        403:
          description: No permission to update policies
          schema:
            $ref: '#/definitions/ErrorModel'
        404:
          description: Not found - snapshot id does not exist
          schema:
            $ref: '#/definitions/ErrorModel'

  '/api/repository/v1/datasets/{id}/ingest':
    post:
      description: Ingest data into a dataset table
      operationId: ingestDataset
      tags:
      - repository
      consumes:
      - application/json
      parameters:
      - $ref: '#/parameters/Id'
      - in: body
        name: ingest
        description: Ingest request
        schema:
          $ref: '#/definitions/IngestRequestModel'
      responses:
        202:
          description: Job status of ingest job & url for polling in the response header
          schema:
            $ref: '#/definitions/JobModel'
          headers:
            location:
              type: string
              description: url for the job polling
        200:
          description: Redirect for ingest complete
          schema:
            $ref: '#/definitions/JobModel'
          headers:
            location:
              type: string
              description: url for the job result
        400:
          description: Bad request - invalid ingest request, badly formed
          schema:
            $ref: '#/definitions/ErrorModel'
        403:
          description: No permission to ingest
          schema:
            $ref: '#/definitions/ErrorModel'
        409:
          description: No idea if we will generate this error code
          schema:
            $ref: '#/definitions/ErrorModel'

  '/api/repository/v1/datasets/{id}/assets':
    post:
      description: Add an asset definiion to a dataset
      operationId: addDatasetAssetSpecifications
      tags:
      - repository
      consumes:
      - application/json
      parameters:
      - $ref: '#/parameters/Id'
      - in: body
        name: assetModel
        description: Asset definition to add to the dataset
        schema:
          $ref: '#/definitions/AssetModel'
      responses:
        202:
          description: Job status of ingest job & url for polling in the response header
          schema:
            $ref: '#/definitions/JobModel'
          headers:
            location:
              type: string
              description: url for the job polling
        200:
          description: Redirect for ingest complete
          schema:
            $ref: '#/definitions/JobModel'
          headers:
            location:
              type: string
              description: url for the job result
        400:
          description: Bad request - invalid ingest request, badly formed
          schema:
            $ref: '#/definitions/ErrorModel'
        403:
          description: No permission to add an asset to a dataset
          schema:
            $ref: '#/definitions/ErrorModel'

  '/api/repository/v1/datasets/{id}/assets/{assetid}':
    delete:
      description: Remove an asset definiion from a dataset
      operationId: removeDatasetAssetSpecifications
      tags:
      - repository
      consumes:
      - application/json
      parameters:
      - $ref: '#/parameters/Id'
      - $ref: '#/parameters/AssetId'
      responses:
        202:
          description: Add new assets to a dataset
          schema:
            $ref: '#/definitions/JobModel'
          headers:
            location:
              type: string
              description: url for the job polling
        200:
          description: Redirect for ingest complete
          schema:
            $ref: '#/definitions/JobModel'
          headers:
            location:
              type: string
              description: url for the job result
        400:
          description: Bad request - invalid ingest request, badly formed
          schema:
            $ref: '#/definitions/ErrorModel'
        403:
          description: No permission to remove an asset from a dataset
          schema:
            $ref: '#/definitions/ErrorModel'

  '/api/repository/v1/register/user':
    get:
      description: |
        Returns whether the user is registered with terra
      operationId: user
      tags:
      - repository
      responses:
        200:
          description: User Info
          schema:
            $ref: '#/definitions/UserStatusInfo'

  '/api/repository/v1/datasets/{id}/files':
    post:
      description: Ingest one file into the dataset file system; async returns a FileModel
      operationId: ingestFile
      tags:
      - repository
      consumes:
      - application/json
      parameters:
      - $ref: '#/parameters/Id'
      - in: body
        name: ingestFile
        description: Ingest file request
        schema:
          $ref: '#/definitions/FileLoadModel'
      responses:
        202:
          description: Job status of ingest job & url for polling in the response header
          schema:
            $ref: '#/definitions/JobModel'
          headers:
            location:
              type: string
              description: url for the job polling
        200:
          description: Redirect for ingest complete
          schema:
            $ref: '#/definitions/JobModel'
          headers:
            location:
              type: string
              description: url for the job result
        400:
          description: Bad request - invalid ingest request, badly formed
          schema:
            $ref: '#/definitions/ErrorModel'
        403:
          description: No permission to ingest
          schema:
            $ref: '#/definitions/ErrorModel'
        409:
          description: No idea if we will generate this error code
          schema:
            $ref: '#/definitions/ErrorModel'

  '/api/repository/v1/datasets/{id}/files/bulk':
    post:
      description: |-
        Load many files into the dataset file system; async returns a BulkLoadResultModel
        Note that this endpoint is not a single transaction. Some files may be loaded and
        others may fail. Each file load is atomic; the file will either be loaded into the
        dataset file system or it will not exist.
      operationId: bulkFileLoad
      tags:
      - repository
      consumes:
      - application/json
      parameters:
      - $ref: '#/parameters/Id'
      - in: body
        name: bulkFileLoad
        description: |-
          Bulk file load request with file list in an external file. Load summary results
          are returned in the async response.
        schema:
          $ref: '#/definitions/BulkLoadRequestModel'
      responses:
        202:
          description: Job status of bulk load job & url for polling in the response header
          schema:
            $ref: '#/definitions/JobModel'
          headers:
            location:
              type: string
              description: url for the job polling
        200:
          description: Redirect for bulk load complete
          schema:
            $ref: '#/definitions/JobModel'
          headers:
            location:
              type: string
              description: url for the job result
        400:
          description: Bad request - invalid ingest request, badly formed
          schema:
            $ref: '#/definitions/ErrorModel'
        403:
          description: No permission to ingest
          schema:
            $ref: '#/definitions/ErrorModel'
        409:
          description: Someone else is using the load tag
          schema:
            $ref: '#/definitions/ErrorModel'

  '/api/repository/v1/datasets/{id}/files/bulk/{loadtag}':
    get:
      description: |-
        Retrieve the results of a bulk file load. The results of each bulk load are stored
        in the dataset. They can be queried directly or retrieved with this paginated
        interface.
      operationId: bulkFileResultsGet
      tags:
      - repository
      consumes:
      - application/json
      parameters:
      - $ref: '#/parameters/Id'
      - $ref: '#/parameters/LoadTag'
      - in: query
        name: jobId
        type: string
        description: The job id associated with the load
      - in: query
        name: offset
        type: integer
        default: 0
        description: The number of items to skip before starting to collect the result set.
      - in: query
        name: limit
        type: integer
        description: The numbers of items to return.
        default: 10
      responses:
        202:
          description: Job status of bulk load result retrieval
          schema:
            $ref: '#/definitions/JobModel'
          headers:
            location:
              type: string
              description: url for the job polling
        200:
          description: Redirect for bulk load result retrieval complete
          schema:
            $ref: '#/definitions/JobModel'
          headers:
            location:
              type: string
              description: url for the job result
        400:
          description: Bad request
          schema:
            $ref: '#/definitions/ErrorModel'
        403:
          description: No permission to access bulk file results
          schema:
            $ref: '#/definitions/ErrorModel'

    delete:
      description: |-
        Delete results from the bulk file load table of the dataset.
        If jobId is specified, then only the results for the loadTag plus that jobId are
        deleted. Otherwise, all results associated with the loadTag are deleted.
      operationId: bulkFileResultsDelete
      tags:
      - repository
      consumes:
      - application/json
      parameters:
      - $ref: '#/parameters/Id'
      - $ref: '#/parameters/LoadTag'
      - in: query
        name: jobId
        type: string
        description: The job id associated with the load
      responses:
        202:
          description: Job status of bulk load result deletion
          schema:
            $ref: '#/definitions/JobModel'
          headers:
            location:
              type: string
              description: url for the job polling
        200:
          description: Redirect for bulk load result deletion complete
          schema:
            $ref: '#/definitions/JobModel'
          headers:
            location:
              type: string
              description: url for the job result
        400:
          description: Bad request
          schema:
            $ref: '#/definitions/ErrorModel'
        403:
          description: No permission to access bulk file results
          schema:
            $ref: '#/definitions/ErrorModel'

  '/api/repository/v1/datasets/{id}/files/bulk/array':
    post:
      description: |-
        Load many files into the dataset file system; async returns a BulkLoadArrayResultModel
        Note that this endpoint is not a single transaction. Some files may be loaded and
        others may fail. Each file load is atomic; the file will either be loaded into the
        dataset file system or it will not exist.
      operationId: bulkFileLoadArray
      tags:
      - repository
      consumes:
      - application/json
      parameters:
      - $ref: '#/parameters/Id'
      - in: body
        name: bulkFileLoadArray
        description: |-
          Bulk file load request with file list in the body of the request and load
          results returned in the async response.
        schema:
          $ref: '#/definitions/BulkLoadArrayRequestModel'
      responses:
        202:
          description: Job status of bulk load job & url for polling in the response header
          schema:
            $ref: '#/definitions/JobModel'
          headers:
            location:
              type: string
              description: url for the job polling
        200:
          description: Redirect for bulk load complete
          schema:
            $ref: '#/definitions/JobModel'
          headers:
            location:
              type: string
              description: url for the job result
        400:
          description: Bad request - invalid ingest request, badly formed
          schema:
            $ref: '#/definitions/ErrorModel'
        403:
          description: No permission to ingest
          schema:
            $ref: '#/definitions/ErrorModel'
        409:
          description: Someone else is using the load tag
          schema:
            $ref: '#/definitions/ErrorModel'

  '/api/repository/v1/datasets/{id}/files/{fileid}':
    get:
      description: Lookup metadata for one file
      operationId: lookupFileById
      tags:
      - repository
      parameters:
      - $ref: '#/parameters/Id'
      - $ref: '#/parameters/FileId'
      - $ref: '#/parameters/Depth'
      responses:
        200:
          description: File exists
          schema:
            $ref: '#/definitions/FileModel'
        400:
          description: Bad request - not sure this will ever happen
          schema:
            $ref: '#/definitions/ErrorModel'
        403:
          description: No permission
          schema:
            $ref: '#/definitions/ErrorModel'
        404:
          description: Not found - file id does not exist
          schema:
            $ref: '#/definitions/ErrorModel'
        409:
          description: No idea if we will generate this error code
          schema:
            $ref: '#/definitions/ErrorModel'

    delete: ## delete
      description: |
        Hard delete of a file by id. The file is deleted even if it is in use by
        a dataset. Subsequent lookups will give not found errors.
      operationId: deleteFile
      tags:
      - repository
      parameters:
      - $ref: '#/parameters/Id'
      - $ref: '#/parameters/FileId'
      responses:
        202:
          description: Job status of snapshot creation job & url for polling in the response header
          schema:
            $ref: '#/definitions/JobModel'
          headers:
            location:
              type: string
              description: url for the job polling
        200:
          description: Redirect for snapshot successful creation
          schema:
            $ref: '#/definitions/JobModel'
          headers:
            location:
              type: string
              description: url for the job result
        400:
          description: Bad request - invalid id, badly formed
          schema:
            $ref: '#/definitions/ErrorModel'
        403:
          description: No permission to delete file
          schema:
            $ref: '#/definitions/ErrorModel'
        404:
          description: Not found - dataset id or file id does not exist
          schema:
            $ref: '#/definitions/ErrorModel'

  '/api/repository/v1/datasets/{id}/filesystem/objects':
    get:
      description: Lookup metadata for one file
      operationId: lookupFileByPath
      tags:
      - repository
      parameters:
      - $ref: '#/parameters/Id'
      - $ref: '#/parameters/Path'
      - $ref: '#/parameters/Depth'
      responses:
        200:
          description: File exists
          schema:
            $ref: '#/definitions/FileModel'
        400:
          description: Bad request - not sure this will ever happen
          schema:
            $ref: '#/definitions/ErrorModel'
        403:
          description: No permission
          schema:
            $ref: '#/definitions/ErrorModel'
        404:
          description: Not found - file id does not exist
          schema:
            $ref: '#/definitions/ErrorModel'
        409:
          description: No idea if we will generate this error code
          schema:
            $ref: '#/definitions/ErrorModel'

  '/api/repository/v1/jobs':
    # '/api/repository/v1/jobs?offset=100&limit=50':
    get:  ## enumerate
      description: |
        Returns a list of all of the jobs the caller has access to
      operationId: enumerateJobs
      tags:
      - repository
      parameters:
      - in: query
        name: offset
        type: integer
        default: 0
        description: The number of items to skip before starting to collect the result set.
      - in: query
        name: limit
        type: integer
        description: The numbers of items to return.
        default: 10
      responses:
        200:
          description: List of jobs
          schema:
            type: array
            items:
              $ref: '#/definitions/JobModel'

  '/api/repository/v1/jobs/{id}':
    get:  ## retrieve
      description: Retrieve a job's status by id
      operationId: retrieveJob
      tags:
      - repository
      parameters:
      - $ref: '#/parameters/Id'
      responses:
        202:
          description: Job status
          schema:
            $ref: '#/definitions/JobModel'
          headers:
            location:
              type: string
              description: url for the job polling
        200:
          description: Redirect for object successful creation
          schema:
            $ref: '#/definitions/JobModel'
          headers:
            location:
              type: string
              description: url for the job result
        400:
          description: Bad request - invalid id, badly formed
          schema:
            $ref: '#/definitions/ErrorModel'
        403:
          description: No permission to see job
          schema:
            $ref: '#/definitions/ErrorModel'
        404:
          description: Not found - job id does not exist
          schema:
            $ref: '#/definitions/ErrorModel'
    delete:  ## delete job data
      description: Delete the job and data associated with it
      operationId: deleteJob
      tags:
      - repository
      parameters:
      - $ref: '#/parameters/Id'
      responses:
        204:
          description: Job was deleted


  '/api/repository/v1/jobs/{id}/result':
    get:  ## retrieve
      description: Retrieve a job's result by id
      operationId: retrieveJobResult
      tags:
      - repository
      parameters:
      - $ref: '#/parameters/Id'
      responses: ## successful responses return the type of model specified by the job
        default:
          description: Successful responses return the type of model specified by the job; otherwise, ErrorModel
          schema:
            type: object

# -- Configuration Control Endpoints --

  '/api/repository/v1/configs/{name}':
    get:
      description: Get one configuration
      operationId: getConfig
      tags:
        - repository
      parameters:
        - name: name
          description: name of the configuration to get
          required: true
          in: path
          type: string
      responses:
        200:
          description: current configuration
          schema:
            $ref: '#/definitions/ConfigModel'
        404:
          description: unknown configuration name
          schema:
            $ref: '#/definitions/ErrorModel'

    put:
      description: |
        Enable or disable the named fault. Performing the put on a config that
        is not a fault is an error.
      operationId: setFault
      tags:
        - repository
      parameters:
        - name: name
          description: name of the configuration to
          required: true
          in: path
          type: string
        - in: query
          name: enable
          type: boolean
          default: true
          description: whether to enable (default) or disable the fault
      responses:
        204:
          description: fault was en/dis-abled successfully - no content
        400:
          description: configuration name is not a fault
          schema:
            $ref: '#/definitions/ErrorModel'
        404:
          description: unknown configuration name
          schema:
            $ref: '#/definitions/ErrorModel'

  '/api/repository/v1/configs':
    put:
      description: Set the a group of configurations
      operationId: setConfigList
      tags:
        - repository
      parameters:
        - in: body
          name: configModel
          schema:
            $ref: '#/definitions/ConfigGroupModel'
      responses:
        200:
          description: previous settings
          schema:
            $ref: '#/definitions/ConfigListModel'
        400:
          description: invalid configuration model
          schema:
            $ref: '#/definitions/ErrorModel'
        404:
          description: unknown configuration name(s) - see errorDetails
          schema:
            $ref: '#/definitions/ErrorModel'

    get:
      description: Get all configurations
      operationId: getConfigList
      tags:
        - repository
      responses:
        200:
          description: all configurations
          schema:
            $ref: '#/definitions/ConfigListModel'

  '/api/repository/v1/configs/reset':
    put:
      description: Reset the configuration to original settings
      operationId: resetConfig
      tags:
        - repository
      responses:
        204:
          description: configuration reset

##########################################################################################
# DRS PATHS
##########################################################################################

  '/ga4gh/drs/v1/service-info':
    get:
      summary: Get information about this implementation.
      description: >-
        May return service version and other information.
        [dd]NOTE: technically, this has been removed from DRS V1.0. It will be added back when there is a common
        service_info across ga4gh. I don't expect it to be too different, so just leaving this info call
        in place.
      operationId: GetServiceInfo
      responses:
        '200':
          description: Service information returned successfully
          schema:
            $ref: '#/definitions/DRSServiceInfo'
      tags:
        - DataRepositoryService

  '/ga4gh/drs/v1/objects/{object_id}':
    get:
      summary: Get info about an `Object`.
      description: >-
        Returns object metadata, and a list of access methods that can be used to fetch object bytes.
      operationId: GetObject
      responses:
        '200':
          description: The `Object` was found successfully.
          schema:
            $ref: '#/definitions/DRSObject'
        '202':
          description: >
            The operation is delayed and will continue asynchronously.
            The client should retry this same request after the delay specified by Retry-After header.
          headers:
            Retry-After:
              description: >
                Delay in seconds. The client should retry this same request after waiting for this duration.
                To simplify client response processing, this must be an integral relative time in seconds.
                This value SHOULD represent the minimum duration the client should wait before attempting
                the operation again with a reasonable expectation of success. When it is not feasible
                for the server to determine the actual expected delay, the server may return a
                brief, fixed value instead.
              type: integer
              format: int64
        '400':
          description: The request is malformed.
          schema:
            $ref: '#/definitions/DRSError'
        '401':
          description: The request is unauthorized.
          schema:
            $ref: '#/definitions/DRSError'
        '403':
          description: The requester is not authorized to perform this action.
          schema:
            $ref: '#/definitions/DRSError'
        '404':
          description: The requested `Object` wasn't found
          schema:
            $ref: '#/definitions/DRSError'
        '500':
          description: An unexpected error occurred.
          schema:
            $ref: '#/definitions/DRSError'
      parameters:
        - name: object_id
          in: path
          required: true
          type: string
        - in: query
          name: expand
          type: boolean
          default: false
          description: >-
            If false and the object_id refers to a bundle, then the ContentsObject array
            contains only those objects directly contained in the bundle. That is, if the
            bundle contains other bundles, those other bundles are not recursively
            included in the result.

            If true and the object_id refers to a bundle, then the entire set of objects
            in the bundle is expanded. That is, if the bundle contains another bundles,
            then those other bundles are recursively expanded and included in the result.
            Recursion continues through the entire sub-tree of the bundle.

            If the object_id refers to a blob, then the query parameter is ignored.
      tags:
        - DataRepositoryService

  '/ga4gh/drs/v1/objects/{object_id}/access/{access_id}':
    get:
      summary: Get a URL for fetching bytes.
      description: >-
        Returns a URL that can be used to fetch the object bytes.
        This method only needs to be called when using an `AccessMethod` that contains an `access_id`
        (e.g., for servers that use signed URLs for fetching object bytes).
      operationId: GetAccessURL
      responses:
        '200':
          description: The access URL was found successfully.
          schema:
            $ref: '#/definitions/DRSAccessURL'
        '202':
          description: >
            The operation is delayed and will continue asynchronously.
            The client should retry this same request after the delay specified by Retry-After header.
          headers:
            Retry-After:
              description: >
                Delay in seconds. The client should retry this same request after waiting for this duration.
                To simplify client response processing, this must be an integral relative time in seconds.
                This value SHOULD represent the minimum duration the client should wait before attempting
                the operation again with a reasonable expectation of success. When it is not feasible
                for the server to determine the actual expected delay, the server may return a
                brief, fixed value instead.
              type: integer
              format: int64
        '400':
          description: The request is malformed.
          schema:
            $ref: '#/definitions/DRSError'
        '401':
          description: The request is unauthorized.
          schema:
            $ref: '#/definitions/DRSError'
        '404':
          description: The requested access URL wasn't found
          schema:
            $ref: '#/definitions/DRSError'
        '403':
          description: The requester is not authorized to perform this action.
          schema:
            $ref: '#/definitions/DRSError'
        '500':
          description: An unexpected error occurred.
          schema:
            $ref: '#/definitions/DRSError'
      parameters:
        - name: object_id
          in: path
          required: true
          type: string
          description: An `id` of a Data Object
        - name: access_id
          in: path
          required: true
          type: string
          description: An `access_id` from the `access_methods` list of a Data Object
      tags:
        - DataRepositoryService

##########################################################################################
# PARAMETERS
##########################################################################################
parameters:
  Id:
    name: id
    description: A UUID to used to identify an object in the repository
    required: true
    type: string
    in: path
  SnapshotPolicyName:
    name: policyName
    in: path
    description: The relevant policy
    required: true
    type: string
    enum:
      - reader
      - discoverer
  DatasetPolicyName:
    name: policyName
    in: path
    description: The relevant policy
    required: true
    type: string
    enum:
    - steward
    - custodian
    - ingester
  FileId:
    name: fileid
    description: A file id
    required: true
    type: string
    in: path
  Path:
    name: path
    description: URL-encoded full path to a file or directory
    required: true
    type: string
    in: query
  Depth:
    name: depth
    description: Enumeration depth; -1 means fully expand; 0 means no expansion; 1..N expands that many subdirectories
    required: false
    type: integer
    default: 0
    in: query
  LoadTag:
    name: loadtag
    description: a load tag
    required: true
    type: string
    in: path
  AssetId:
    name: assetid
    description: An asset id
    required: true
    type: string
    in: path

##########################################################################################
# DEFINITIONS
##########################################################################################
definitions:

  ## Identifiers ##

  ObjectNameProperty:
    description: |
      Table, column, and relationship names follow this pattern. This should be used for the name of any object in the
      system. It enforces BigQuery naming rules except it disallows a leading underscore so we avoid collisions with
      any extra columns the DR adds. For table names, this is shorter than what BigQuery allows.
    type: string
    pattern: '^[a-zA-Z0-9][_a-zA-Z0-9]*$' ## TODO this will support any unicode string
    minLength: 1
    maxLength: 63

  UniqueIdProperty:
    description: |
      Unique identifier for a dataset, snapshot, etc.
    type: string
    pattern: '^[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}' ## eg:957117a6-79fd-4f2c-a63c-f6dc84a94d9c



  ## Billing ##
  BillingProfileRequestModel:
    description: |
      Describes a profile that references a billing account.
    type: object
    required:
      - billingAccountId
      - profileName
      - biller
    properties:
      billingAccountId:
        type: string
        description: unique identifier of the billing account from Google
      profileName:
        type: string
        description: display name to be used for the profile
      biller:
        type: string
        description: either “direct” or the reseller of the sub-account that sends the bill (like “on_spend”)

  BillingProfileModel:
    type: object
    properties:
      id:
        $ref: '#/definitions/UniqueIdProperty'
      billingAccountId:
        type: string
        description: unique identifier of the billing account from Google
      profileName:
        type: string
        description: display name to be used for the profile
      biller:
        type: string
        description: either “direct” or the reseller of the sub-account that sends the bill (like “on_spend”)
      accessible:
        type: boolean
        description: true if the repository SA is a billing account user on this billing account, false o/w

  EnumerateBillingProfileModel:
    description: |
      The total number of billing profiles available and a page of profiles
    type: object
    properties:
      total:
        type: integer
        description: Total number of billing profiles
      items:
        type: array
        items:
          $ref: '#/definitions/BillingProfileModel'

  ## Dataset ##

  DatasetModel:
    description: |
      Complete definition of a dataset.
    type: object
    properties:
      id:
        $ref: '#/definitions/UniqueIdProperty'
      name:
        $ref: '#/definitions/ObjectNameProperty'
      description:
        type: string
        description: Description of the dataset
      defaultProfileId:
        $ref: '#/definitions/UniqueIdProperty'
        description: This is the profile id used for core dataset resources
      dataProject:
        type: string
        description: Project id of the project where tabular data in BigQuery lives
      additionalProfileIds:
        type: array
        description: Additional profile ids to be used for this dataset
        items:
          $ref: '#/definitions/UniqueIdProperty'
      defaultSnapshotId:
        type: string
        description: Id of the auto-generated default passthru snapshot
      schema:
        $ref: '#/definitions/DatasetSpecificationModel'
      createdDate:
        type: string
        description: Date the dataset was created

  DatasetSummaryModel:
    description: |
      Summary of a dataset.
    type: object
    properties:
      id:
        $ref: '#/definitions/UniqueIdProperty'
      name:
        $ref: '#/definitions/ObjectNameProperty'
      description:
        type: string
        description: Description of the dataset
      defaultProfileId:
        $ref: '#/definitions/UniqueIdProperty'
        description: This is the ID of the profile used for core dataset resources
      additionalProfileIds:
        type: array
        description: Additional profile IDs to be used for this dataset
        items:
          $ref: '#/definitions/UniqueIdProperty'
      createdDate:
        type: string
        description: Date the dataset was created

  DatasetRequestModel:
    description: |
      Complete definition of a dataset without the id (used to create a dataset)
    type: object
    required:
    - name
    - defaultProfileId
    - schema
    properties:
      name:
        $ref: '#/definitions/ObjectNameProperty'
      description:
        type: string
        description: Description of the dataset
      defaultProfileId:
        $ref: '#/definitions/UniqueIdProperty'
        description: This is the ID of the profile used for core dataset resources
      additionalProfileIds:
        type: array
        description: Additional profile IDs to be used for this dataset
        items:
          $ref: '#/definitions/UniqueIdProperty'
      schema:
        $ref: '#/definitions/DatasetSpecificationModel'

  EnumerateDatasetModel:
    description: |
      The total number of datasets available that match the filter criteria and a page of summaries
    type: object
    properties:
      total:
        type: integer
        description: Total number of datasets
      items:
        type: array
        items:
          $ref: '#/definitions/DatasetSummaryModel'


  ## Schema Definitions ##

  ColumnModel:
    description: one column of a table
    type: object
    required:
      - name
      - datatype
    properties:
      name:
        $ref: '#/definitions/ObjectNameProperty'

      ## TODO: Use an enumeration for the datatype. We will probably want to support some kind of extended datatyping
      ## to process references to UCSC and/or UChicago schema parts. Whatever GA4GH standardizes.

      datatype:
        type: string
      array_of:
        type: boolean
        default: false
        description: if true, make this column an array of type datatype.

  TableModel:
    description: one table in a schema
    type: object
    required:
      - name
      - columns

    properties:
      name:
        $ref: '#/definitions/ObjectNameProperty'

      columns:
        type: array
        items:
          $ref: '#/definitions/ColumnModel'

      primaryKey:
        type: array
        items:
          $ref: '#/definitions/ObjectNameProperty'

  RelationshipTermModel:
    description: Describes a table and columns for a relationship
    type: object
    required:
      - table
      - column
    properties:
      table:
        $ref: '#/definitions/ObjectNameProperty'
      column:
        type: string

  RelationshipModel:
    description: |
      One relationship between two tables. Captures a specific relationship between two tables. By naming the
      relationships, we can define assets.
    type: object
    required:
      - name
      - from
      - to
    properties:
      name:
        $ref: '#/definitions/ObjectNameProperty'
      from:
        $ref: '#/definitions/RelationshipTermModel'
      to:
        $ref: '#/definitions/RelationshipTermModel'

  AssetTableModel:
    description: |
      Used in the asset definition to describe a table that is included in the asset. This is used to define
      the view of the asset table in the snapshot. Columns can be an empty array indicating that all columns
      should be included.
    type: object
    required:
      - name
      - columns
    properties:
      name:
        $ref: '#/definitions/ObjectNameProperty'
      columns:
        type: array
        items:
          $ref: '#/definitions/ObjectNameProperty'

  AssetModel:
    description: One asset in the data model. The table list identifies the tables in the asset.
          The rootTable and rootColumn indicate which value will be used as the unique identifier.
          The list of relationships provides the instructions for how to connect the tables.
          Asset tables have to be connected in a relationship hierarchy. So there cannot be
          two paths to the same table from the root.
    required:
      - name
      - tables
      - rootTable
      - rootColumn
    properties:
      name:
        $ref: '#/definitions/ObjectNameProperty'
      tables:
        type: array
        items:
          $ref: '#/definitions/AssetTableModel'
      rootTable:
        $ref: '#/definitions/ObjectNameProperty'
      rootColumn:
        $ref: '#/definitions/ObjectNameProperty'
      follow:
        type: array
        items:
          $ref: '#/definitions/ObjectNameProperty'

  DatasetSpecificationModel:
    description: data model definition
    type: object
    required:
      - tables
      - assets
    properties:
      tables:
        type: array
        items:
          $ref: '#/definitions/TableModel'
      relationships:
        type: array
        items:
          $ref: '#/definitions/RelationshipModel'
      assets:
        type: array
        items:
          $ref: '#/definitions/AssetModel'

  ## Dataset Ingest Definitions ##
  IngestRequestModel:
    description: |
      Request to ingest data from a file in GCS into a table in a dataset.
      The ingest source must be readable by the DR manager.
      TODO: other input forms
    type: object
    required:
      - table
      - path
      - format
      - strategy
    properties:
      table:
        $ref: '#/definitions/ObjectNameProperty'
        description: name of the target table for ingest
      path:
        type: string
        description: gs path to a file in a bucket accessible to data repo
      format:
        type: string
        enum:
          - csv
          - json
      strategy:
        type: string
        enum:
          - upsert
          - append
      load_tag:
        $ref: '#/definitions/LoadTagModel'
      max_bad_records:
        type: integer
        default: 0
        description: max number of bad records to skip; applies to JSON and CSV
      ignore_unknown_values:
        type: boolean
        default: true
        description: skip extra data; applies to JSON and CSV
      csv_field_delimiter:
        type: string
        default: ','
        description: field separator
      csv_quote:
        type: string
        default: '"'
        description: quoting character
      csv_skip_leading_rows:
        type: integer
        default: 0
        description: number of header rows to skip
      csv_allow_quoted_newlines:
        type: boolean
        default: true
      csv_null_marker:
        type: string
        default: ''

  IngestResponseModel:
    description: |
      Response from performing an ingest.
    type: object
    required:
      - table
      - path
      - row_count
    properties:
      dataset_id:
        $ref: '#/definitions/UniqueIdProperty'
        description: unique id of the dataset
      dataset:
        $ref: '#/definitions/ObjectNameProperty'
        description: name of the dataset
      table:
        $ref: '#/definitions/ObjectNameProperty'
        description: name of the target table for ingest
      path:
        type: string
      load_tag:
        $ref: '#/definitions/LoadTagModel'
      row_count:
        type: integer
        format: int64
        description: number of rows successfully ingested
      bad_row_count:
        type: integer
        format: int64
        description: number of bad rows skipped

  ## File Definitions ##
  FileLoadModel:
    description: |
      Information needed to copy a file from a source bucket into the
      dataset bucket.
      Eventually, this will include attributes of the storage including
      billing, temperature, geography, etc. But for now...
    type: object
    required:
      - source_path
      - target_path
      - profileid
    properties:
      source_path:
        type: string
        description: gs URL of the source file to load
      target_path:
        type: string
        description: |
          Full path within the dataset where the file should be placed.
          The path must start with /.
      mime_type:
        type: string
        description: |-
          A string providing the mime-type of the Data Object.
          For example, "application/json".
      profileId:
        $ref: '#/definitions/UniqueIdProperty'
        description: The profile id to use for this file
      loadTag:
        $ref: '#/definitions/LoadTagModel'
      description:
        type: string
        description: |-
          A human readable description of the contents of the Data Object.

  FileModel:
    description: A file or directory in the data repository
    type: object
    properties:
      fileId:
        type: string
        description: Unique id of the filesystem object within the dataset
      collectionId:
        type: string
        description: Id of the dataset or snapshot directory describing the object
      path:
        type: string
        description: full path of the file in the dataset
      size:
        type: integer
        format: int64
        description: |
          Always present for files - the file size in bytes
          Present for directories in snapshots - sum of sizes of objects in a directory
      checksums:
        type: array
        items:
          $ref: '#/definitions/DRSChecksum'
        description: |
          Always present for files - checksums; always includes crc32c. May include md5.
          Present for directories in snapshots - see DRS spec for algorithm for combining checksums of
          underlying directory contents.
      created:
        type: string
        description: timestamp of object creation in RFC3339
      description:
        type: string
        description: Human readable description of the file
      fileType:
        $ref: '#/definitions/FileModelType'
      fileDetail:
        $ref: '#/definitions/FileDetailModel'
      directoryDetail:
        $ref: '#/definitions/DirectoryDetailModel'

  FileModelType:
    type: string
    enum:
      - file
      - directory

  FileDetailModel:
    description: File in the data repository
    type: object
    properties:
      datasetId:
        type: string
        description: Id of the dataset that holds the file
      mimeType:
        type: string
      accessUrl:
        type: string
        description: URL of the file in cloud storage
      loadTag:
        $ref: '#/definitions/LoadTagModel'

  DirectoryDetailModel:
    description: Directory in the data repository
    type: object
    properties:
      enumerated:
        type: boolean
        description: |
          Indicates whether or not the directory has been enumerated. True means the directory has been enumerated.
          The contents property describes the contents. An empty array indicates and empty directory. False means
          the directory has not been enumerated. If the contents property is present, it should be ignored.
      contents:
        type: array
        description: Array of directory contents
        items:
          $ref: '#/definitions/FileModel'

  LoadTagModel:
    type: string
    description: |
      client-specified tag for a data or file load. If no id is specified, we use the
      string form of the job create time as the tag.

  BulkLoadRequestModel:
    description: |-
      Body of a bulk file load request. This variant of a bulk load provides the set of
      files to be loaded in a file containing the JSON form of a BulkLoadFileModel.
      A summary of the load results is returned in the async response (BulkLoadResponseModel)
      Per-file details of a bulk load are always stored into the dataset tabular data store
      and can be retrieved directly from there, or via the GET .../bulk/{loadTag}
      They can be cleaned up with the DELETE .../bulk/{loadTag}
    type: object
    required:
      - profileId
      - loadTag
      - loadControlFile
    properties:
      profileId:
        $ref: '#/definitions/UniqueIdProperty'
        description: The profile id to use for these files
      loadTag:
        $ref: '#/definitions/LoadTagModel'
      maxFailedFileLoads:
        type: integer
        default: 0
        description: max number of failed file loads before stopping
      loadControlFile:
        type: string
        description: |-
          gs:// path to a text file in a bucket. The file must be accessible to the DR
          Manager. Each line of the file is interpreted as the JSON form of one
          BulkLoadFileModel. For example, one line might look like
            '{ "sourcePath":"gs:/bucket/path/file", "targetPath":"/target/path/file" }'

  BulkLoadArrayRequestModel:
    description: |-
      Body of a bulk file load request. This variant of a bulk load provides the set of
      files to be loaded in the body of the request. Both the summary of the load and the
      per-file details of the bulk load returned in the async response (BulkLoadArrayResponseModel)
      Per-file details of a bulk load are also stored into the dataset tabular data store
      and can be retrieved directly from there, or via the GET .../bulk/{loadTag}
      They can be cleaned up with the DELETE .../bulk/{loadTag}
    type: object
    required:
      - profileId
      - loadTag
      - loadArray
    properties:
      profileId:
        $ref: '#/definitions/UniqueIdProperty'
        description: The profile id to use for these files
      loadTag:
        $ref: '#/definitions/LoadTagModel'
      maxFailedFileLoads:
        type: integer
        default: 0
        description: max number of failed file loads before stopping
      loadArray:
        type: array
        description: Array files to load
        items:
          $ref: '#/definitions/BulkLoadFileModel'

  BulkLoadFileModel:
    description: Describes one file within a bulk file load
    type: object
    required:
      - sourcePath
      - targetPath
    properties:
      sourcePath:
        type: string
        description: gs URL of the source file to load
      targetPath:
        type: string
        description: |
          Full path within the dataset where the file should be placed.
          The path must start with /.
      mimeType:
        type: string
        description: |-
          A string providing the mime-type of the Data Object.
          For example, "application/json".
      description:
        type: string
        description: |-
          A human readable description of the contents of the Data Object.

  BulkLoadResultModel:
    description: |-
      Returned when the bulk file load job finishes.
    type: object
    properties:
      loadTag:
        $ref: '#/definitions/LoadTagModel'
      jobId:
        type: string
      totalFiles:
        type: integer
      succeededFiles:
        type: integer
      failedFiles:
        type: integer
      notTriedFiles:
        type: integer

  BulkLoadArrayResultModel:
    description: |-
      Returned when the bulk file load job finishes. 
    type: object
    properties:
      loadSummary:
        $ref: '#/definitions/BulkLoadResultModel'
      loadFileResults:
        type: array
        items:
          $ref: '#/definitions/BulkLoadFileResultModel'

  BulkLoadFileResultModel:
    description: Describes the status result of one file within a bulk file load
    type: object
    required:
      - sourcePath
      - targetPath
    properties:
      sourcePath:
        type: string
        description: gs URL of the source file to load
      targetPath:
        type: string
        description: |
          Full path within the dataset where the file should be placed.
          The path must start with /.
      state:
        $ref: '#/definitions/BulkLoadFileState'
      fileId:
        type: string
        description: The fileId of the loaded file; non-null if state is SUCCEEDED
      error:
        type: string
        description: The error message if state is FAILED

  BulkLoadFileState:
    type: string
    enum:
      - succeeded
      - failed
      - not_tried
      - running

  ## Snapshot Definitions ##

  SnapshotRequestModel:
    description: |
      Request for creating a snapshot.
      For now, the API only supports snapshots defined as a single dataset asset and
      row ids for the root table of that asset. The snapshot has exactly the tables
      and columns of the asset. An optional list of users can be provided to set as
      readers on the snapshot.
      In the future, we will need to extend this to handle cross-dataset snapshots
      from disparate assets, so we will need to support column and datatype
      mapping from asset tables to the target snapshot tables.
    type: object
    required:
      - name
      - contents
    properties:
      name:
        $ref: '#/definitions/ObjectNameProperty'
      description:
        type: string
        description: Description of the snapshot
      contents:
        type: array
        items:
          $ref: '#/definitions/SnapshotRequestContentsModel'
      readers:
        type: array
        items:
          type: string
      profileId:
        $ref: '#/definitions/UniqueIdProperty'
        description: The profile id to use for this snapshot

  SnapshotRequestContentsModel:
    description: |
      The contents specifies the source of the data (dataset and asset)
      and the rows to include (field and rootValues).
      TODO: field will move the asset object; it is here as a stepping stone
    type: object
    required:
      - source
      - rootValues
    properties:
      source:
        $ref: '#/definitions/SnapshotRequestSourceModel'
      rootValues:
        type: array
        items:
          type: string

  SnapshotRequestSourceModel:
    description: |
      The datasource identifies the dataset and asset from which to source the data.
    type: object
    required:
      - datasetName
      - assetName
    properties:
      datasetName:
        $ref: '#/definitions/ObjectNameProperty'
      assetName:
        $ref: '#/definitions/ObjectNameProperty'

  SnapshotSummaryModel:
    description: |
      summary of snapshot
    type: object
    properties:
      id:
        $ref: '#/definitions/UniqueIdProperty'
      name:
        $ref: '#/definitions/ObjectNameProperty'
      description:
        type: string
        description: Description of the snapshot
      createdDate:
        type: string
        description: Date the snapshot was created
      profileId:
        $ref: '#/definitions/UniqueIdProperty'
        description: The profile id for this snapshot

  EnumerateSnapshotModel:
    description: |
      The total number of snapshots available that match the criteria and a page of summaries
    type: object
    properties:
      total:
        type: integer
        description: Total number of snapshots
      items:
        type: array
        items:
          $ref: '#/definitions/SnapshotSummaryModel'

  SnapshotModel:
    description: |
      SnapshotModel returns detailed data about an existing snapshot.
    type: object
    properties:
      id:
        $ref: '#/definitions/UniqueIdProperty'
      name:
        $ref: '#/definitions/ObjectNameProperty'
      description:
        type: string
        description: Description of the snapshot
      createdDate:
        type: string
        description: Date the snapshot was created
      source:
        type: array
        items:
          $ref: '#/definitions/SnapshotSourceModel'
      tables:
        type: array
        items:
          $ref: '#/definitions/TableModel'
      profileId:
        $ref: '#/definitions/UniqueIdProperty'
        description: The profile id of this snapshot
      dataProject:
        type: string
        description: Project id of the snapshot data project

  SnapshotSourceModel:
    description: |
      SnapshotSourceModel returns data about the source for an existing snapshot
    type: object
    required:
      - dataset
      - asset
    properties:
      dataset:
        $ref: '#/definitions/DatasetSummaryModel'
      asset:
        $ref: '#/definitions/ObjectNameProperty'

  JobModel:
    description: |
      Status of job
    type: object
    required:
    - id
    - job_status
    - status_code
    properties:
      id:
        $ref: '#/definitions/UniqueIdProperty'
      description:
        type: string
        description: Description of the job's flight from description flight input parameter
      job_status:
        description: Status of job
        type: string
        enum:
          - running
          - succeeded
          - failed
      status_code:
        description: HTTP code
        type: integer
      submitted:
        type: string
        description: Timestamp when the flight was created
      completed:
        type: string
        description: Timestamp when the flight was completed; not present if not complete

  ErrorModel:
    description: |
      Representation of an error that occurred while processing a request.
      Some errors provide error details. For example, validation of input may report several problems.
      Each of those are reported in a separate error detail.
    type: object
    required:
      - message
    properties:
      message:
        type: string
      errorDetail:
        type: array
        items:
          type: string


  DeleteResponseModel:
    description: |
      Returns the state of the object of the deletion
    type: object
    properties:
      objectState:
        type: string
        enum:
          - deleted
          - not_found

  PolicyMemberRequest:
    description: |
      email of user or group to add to policy
    type: object
    required:
      - email
    properties:
      email:
        type: string

  PolicyModel:
    description: |
      Describes a policy
    type: object
    properties:
      name:
        type: string
      members:
        type: array
        items:
          type: string

  PolicyResponse:
    description: |
      email of user or group to add to policy
    type: object
    properties:
      policies:
        type: array
        items:
          $ref: '#/definitions/PolicyModel'

  UserStatusInfo:
    description: ''
    required:
    - userSubjectId
    - userEmail
    - enabled
    properties:
      userSubjectId:
        type: string
        description: user id
      userEmail:
        type: string
        description: user email
      enabled:
        type: boolean
        description: true if the user is enabled in ldap

  RepositoryConfigurationModel:
    properties:
      clientId:
        description: the google defined client id for the repository
        type: string
      activeProfiles:
        description: the active profiles for this instance
        type: array
        items:
          type: string

  ConfigModel:
    description: |
      There are three types of configurations: faults, parameters, and logging.
      Due to the way swagger works, we make a property for each type, but only
      the property that matches the type enumeration will be processed.
    properties:
      name:
        type: string
        description: name of the configuration
      configType:
        type: string
        enum:
          - fault
          - parameter
          - logging
      fault:
        $ref: '#/definitions/ConfigFaultModel'
      parameter:
        $ref: '#/definitions/ConfigParameterModel'

  # TODO: add the other configuration types
  #      logging:
  #        $ref: '#/definitions/ConfigLoggingModel'

  ConfigFaultModel:
    description: Fault control parameters
    properties:
      enabled:
        type: boolean
        description: |
          If the fault is enabled, then is in effect. Fault points cause insert
          faults. Typical usage is that faults are disabled on system start and explicitly
          enabled by test code or via the setFault endpoint.
      faultType:
        type: string
        enum:
          - simple
          - counted
        description: |
          A simple fault has no parameters. It is just enabled or disabled. This type of
          fault is typically used when the desired behavior of the fault is too complex
          for expression in the fault types and custom code is needed to get the right
          failure behavior.

          A counted fault is used to insert some number of faults in a pattern. See the
          ConfigFaultCountedModel for details.
      counted:
        $ref: '#/definitions/ConfigFaultCountedModel'

  ConfigFaultCountedModel:
    description: |
      Counted fault is used to insert a fixed number of faults. A "fault test" is one
      call to the fault manager for a named fault. The skipFor lets you get the system to
      a certain stable point where you want to begin inserting faults. Insert gives the
      total number of faults to trigger. The rate gives the percentage of the time to
      insert the fault. A value of 50 would insert the fault half
      the time. A value of 20 would insert the fault 20% of the time . The rateStyle
      describes whether the fault will be fixed or random. In our 20 example, if the rate style
      is fixed, the fault would be skipped 4 times, inserted once, skipped 4 times, inserted once, etc.
      It uses integer math - you've been warned. If the rate style is random, a random number
      is generated to determine whether the fault is inserted with a probability of 0.2.
    properties:
      skipFor:
        type: integer
        description: number of fault tests to skip before beginning fault insertion
      insert:
        type: integer
        description: total number of times to insert the fault; -1 means insert forever
      rate:
        type: integer
        description: |
          insert a fault rate percent of the time. If rate is 100, the
          fault will always be inserted regardless of rate.
      rateStyle:
        type: string
        enum:
          - fixed
          - random
        description: |
          fixed style means insert the fault; skip for rate-1; ...
          random style means randomly insert the fault with probability of 1:<rate>

  ConfigParameterModel:
    description: The value of the parameter
    properties:
      value:
        type: string
        description: |
          Configuration parameters are always passed as strings and converted within
          the service. That keeps the JSON simple. Sending in specific types doesn't
          help much, because there still might be a mismatch between the type passed in
          and the type required.

  ConfigGroupModel:
    description: A group of ConfigModel with a label for logging
    properties:
      label:
        type: string
        description: string to be logged with the settings to identify this set
      group:
        type: array
        items:
          $ref: '#/definitions/ConfigModel'

  ConfigListModel:
    description: Result list of configuration settings
    properties:
      total:
        type: integer
        description: Total number of configs
      items:
        type: array
        items:
          $ref: '#/definitions/ConfigModel'


##########################################################################################
# DRS DEFINITIONS
##########################################################################################
  DRSChecksum:
    type: object
    required:
      - checksum
    properties:
      checksum:
        type: string
        description: 'The hex-string encoded checksum for the data'
      type:
        type: string
        description: |-
          The digest method used to create the checksum. If left unspecified md5
          will be assumed.

          possible values:
          md5                # most blob stores provide a checksum using this
          etag               # multipart uploads to blob stores
          sha256
          sha512

  DRSObject:
    type: object
    required: ['id', 'self_uri', 'size', 'created', 'checksums']
    properties:
      id:
        type: string
        description: |-
          An identifier unique to this `Object`.
      name:
        type: string
        description: |-
          A string that can be used to name an `Object`.
          This string is made up of uppercase and lowercase letters, decimal digits, hypen, period, and underscore [A-Za-z0-9.-_].
          See http://pubs.opengroup.org/onlinepubs/9699919799/basedefs/V1_chap03.html#tag_03_282[portable filenames].
      self_uri:
        type: string
        description: |-
          A drs:// URI, as defined in the DRS documentation, that tells clients how to access this object.
          The intent of this field is to make DRS objects self-contained, and therefore easier for clients to store and pass around.
        example:
          drs://drs.example.org/314159
      size:
        type: integer
        format: int64
        description: |-
          For blobs, the blob size in bytes.
          For bundles, the cumulative size, in bytes, of items in the `contents` field.
      created_time:
        type: string
        description: |-
          Timestamp of object creation in RFC3339.
      updated_time:
        type: string
        description: >-
          Timestamp of `Object` update in RFC3339, identical to create timestamp in systems
          that do not support updates.
      version:
        type: string
        description: >-
          A string representing a version.

          (Some systems may use checksum, a RFC3339 timestamp, or an incrementing version number.)
      mime_type:
        type: string
        description: |-
          A string providing the mime-type of the `Object`.
        example:
          application/json
      checksums:
        type: array
        minItems: 1
        items:
          $ref: '#/definitions/DRSChecksum'
        description: >-
          The checksum of the `Object`. At least one checksum must be provided.

          For blobs, the checksum is computed over the bytes in the blob.


          For bundles, the checksum is computed over a sorted concatenation of the
          checksums of its top-level contained objects (not recursive, names not included).
          The list of checksums is sorted alphabetically (hex-code) before concatenation
          and a further checksum is performed on the concatenated checksum value.


          For example, if a bundle contains blobs with the following checksums:

          md5(blob1) = 72794b6d

          md5(blob2) = 5e089d29


          Then the checksum of the bundle is:

          md5( concat( sort( md5(blob1), md5(blob2) ) ) )

          = md5( concat( sort( 72794b6d, 5e089d29 ) ) )

          = md5( concat( 5e089d29, 72794b6d ) )

          = md5( 5e089d2972794b6d )

          = f7a29a04
      access_methods:
        type: array
        minItems: 1
        items:
          $ref: '#/definitions/DRSAccessMethod'
        description: |-
          The list of access methods that can be used to fetch the `Object`.
          Required for single blobs; optional for bundles.
      contents:
        type: array
        description: >-
          If not set, this `Object` is a single blob.

          If set, this `Object` is a bundle containing the listed `ContentsObject` s (some of which may be further nested).
        items:
          $ref: '#/definitions/DRSContentsObject'
      description:
        type: string
        description: |-
          A human readable description of the `Object`.
      aliases:
        type: array
        items:
          type: string
        description: >-
          A list of strings that can be used to find other metadata
          about this `Object` from external metadata sources. These
          aliases can be used to represent secondary
          accession numbers or external GUIDs.

  DRSAccessURL:
    type: object
    required: ['url']
    properties:
      url:
        type: string
        description: A fully resolvable URL that can be used to fetch the actual object bytes.
      headers:
        type: array
        items:
          type: string
        description: >-
          An optional list of headers to include in the HTTP request to `url`.
          These headers can be used to provide auth tokens required to fetch the object bytes.
        example:
          Authorization: Basic Z2E0Z2g6ZHJz

  DRSAccessMethod:
    type: object
    required:
      - type
    properties:
      type:
        type: string
        enum:
        - s3
        - gs
        - ftp
        - gsiftp
        - globus
        - htsget
        - https
        - file
        description: >-
          Type of the access method.
      access_url:
        $ref: '#/definitions/DRSAccessURL'
        description: >-
          An `AccessURL` that can be used to fetch the actual object bytes.
          Note that at least one of `access_url` and `access_id` must be provided.
      access_id:
        type: string
        description: >-
          An arbitrary string to be passed to the `/access` path to get an `AccessURL`.

          This must be unique per object.
          Note that at least one of `access_url` and `access_id` must be provided.
      region:
        type: string
        description: >-
          Name of the region in the cloud service provider that the object belongs to.
        example:
          us-east-1

  DRSError:
    description:
      An object that can optionally include information about the error.
    type: object
    properties:
      msg:
        type: string
        description: A detailed error message.
      status_code:
        type: integer
        description: The integer representing the HTTP status code (e.g. 200, 404).

  DRSServiceInfo:
    type: object
    required:
      - version
    description: >-
      Useful information about the running service.
    properties:
      version:
        type: string
        description: Service version
      title:
        type: string
        description: Service name
      description:
        type: string
        description: Service description
      contact:
        type: object
        description: Maintainer contact info
      license:
        type: object
        description: License information for the exposed API

  DRSContentsObject:
    type: object
    properties:
      name:
        type: string
        description: >-
          A name declared by the bundle author that must be
          used when materialising this object,
          overriding any name directly associated with the object itself.
          The name must be unique with the containing bundle.
          This string is made up of uppercase and lowercase letters, decimal digits, hypen, period, and underscore [A-Za-z0-9.-_].
          See http://pubs.opengroup.org/onlinepubs/9699919799/basedefs/V1_chap03.html#tag_03_282[portable filenames].
      id:
        type: string
        description: >-
          A DRS identifier of an `Object` (either a single blob or a nested bundle).
          If this ContentsObject is an object within a nested bundle, then the id is
          optional. Otherwise, the id is required.
      drs_uri:
        type: array
        description: >-
          A list of full DRS identifier URI paths
          that may be used to obtain the object.
          These URIs may be external to this DRS instance.
        example:
          drs://example.com/ga4gh/drs/v1/objects/{object_id}
        items:
          type: string
      contents:
        type: array
        description: >-
          If this ContentsObject describes a nested bundle and the caller specified
          "?expand=true" on the request, then this contents array must be present and
          describe the objects within the nested bundle.
        items:
          $ref: '#/definitions/DRSContentsObject'
    required:
      - name
