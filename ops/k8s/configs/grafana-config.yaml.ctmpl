{{ with $environment := env "ENVIRONMENT" }}
{{ with $suffix := env "SUFFIX" }}
{{ with secret (printf "secret/dsde/datarepo/%s/grafana-sa-%s.json" $environment $suffix) }}
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-config
  labels:
    name: grafana-config
data:
  bigquerydatasource: |-
    apiVersion: 1

    datasources:
      - name: BigQuery
        type: doitintl-bigquery-datasource
        access: proxy
        isDefault: true
        jsonData:
          authenticationType: jwt
          clientEmail: {{ .Data.client_email }}
          defaultProject: {{ .Data.project_id}}
          tokenUri: {{ .Data.token_uri }}
        secureJsonData:
          privateKey: |
{{ .Data.private_key | indent 12 }}
          version: 2
          readOnly: false
  stackdriverdatasource: |-
    apiVersion: 1

    datasources:
      - name: Stackdriver
        type: stackdriver
        access: proxy
        jsonData:
          tokenUri: {{ .Data.token_uri }}
          clientEmail: {{ .Data.client_email }}
          authenticationType: jwt
          defaultProject: {{ .Data.project_id}}
        secureJsonData:
          privateKey: |
{{ .Data.private_key | indent 12 }}
  prometheusdatasource: |-
      # config file version
      apiVersion: 1

      # list of datasources that should be deleted from the database
      deleteDatasources:
        - name: Prometheus
          orgId: 1

      # list of datasources to insert/update depending
      # whats available in the database
      datasources:
        # <string, required> name of the datasource. Required
      - name: Prometheus
        # <string, required> datasource type. Required
        type: prometheus
        # <string, required> access mode. direct or proxy. Required
        access: proxy
        # <int> org id. will default to orgId 1 if not specified
        orgId: 1
        # <string> url
        url: http://prometheus-service.data-repo:9090
        # <bool> mark as default datasource. Max one per org
        isDefault: false
        # <map> fields that will be converted to json and stored in json_data
        jsonData:
           graphiteVersion: "1.1"
           tlsAuth: false
           tlsAuthWithCACert: false
        # <string> json object of data that will be encrypted.
        secureJsonData:
          tlsCACert: "..."
          tlsClientCert: "..."
          tlsClientKey: "..."
        version: 1
        # <bool> allow users to edit datasources from the UI.
        editable: true
  dashboards: |-
    apiVersion: 1

    providers:
      # <string> an unique provider name
    - name: 'Cheese'
      # <int> org id. will default to orgId 1 if not specified
      orgId: 1
      # <string, required> name of the dashboard folder. Required
      folder: 'Ops'
      # <string> folder UID. will be automatically generated if not specified
      folderUid: ''
      # <string, required> provider type. Required
      type: file
      # <bool> disable dashboard deletion
      disableDeletion: false
      # <bool> enable dashboard editing
      editable: true
      # <int> how often Grafana will scan for changed dashboards
      updateIntervalSeconds: 10
      options:
        # <string, required> path to dashboard files on disk. Required
        path: /var/lib/grafana/dashboards
  k8sdashboard: |-
{{ file "ops/k8s/configs/grafana/k8s-dashboard.json" | indent 4 }}
  loadbalancerdashboard: |-
{{ file "ops/k8s/configs/grafana/loadbalancer-dashboard.json" | indent 4 }}
  cloud-sql-dashboard: |-
{{ file "ops/k8s/configs/grafana/cloudsql-dashboard.json" | indent 4 }}
  k8sprometheus: |-
{{ file "ops/k8s/configs/grafana/k8s-prometheus.json" | indent 4 }}
  cloudstorage-dashboard: |-
{{ file "ops/k8s/configs/grafana/cloudstorage-dashboard.json" | indent 4 }}
  bigquery-logs: |-
{{ file "ops/k8s/configs/grafana/bigquery-logs.json" | indent 4 }}


{{end}}
{{end}}
{{end}}
