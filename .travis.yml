before_cache:
  - rm -f  $HOME/.gradle/caches/modules-2/modules-2.lock
  - rm -fr $HOME/.gradle/caches/*/plugin-resolution/
cache:
  directories:
    - $HOME/.gradle/caches/
    - $HOME/.gradle/wrapper/
    - $HOME/google-cloud-sdk/

env:
  - PATH=${HOME}/google-cloud-sdk/bin:$PATH CLOUDSDK_CORE_DISABLE_PROMPTS=1

language: java

jdk:
  - openjdk8

addons:
  postgresql: "9.6"

services:
  - docker
  - postgresql

before_install:
  - if [ ! -d ${HOME}/google-cloud-sdk/bin ]; then
      rm -rf $HOME/google-cloud-sdk;
      curl https://sdk.cloud.google.com | bash > /dev/null;
    fi
  - source $HOME/google-cloud-sdk/path.bash.inc
  - gcloud config set project $INTEGRATION_PROJECT
  - gcloud config set compute/zone $INTEGRATION_ZONE
  - ./render-configs.sh $TRAVIS_TOKEN
  - gcloud auth activate-service-account --key-file $GOOGLE_APPLICATION_CREDENTIALS
  - gcloud auth configure-docker
  - gcloud components install kubectl
  - gcloud container clusters get-credentials $CLUSTER_NAME

script:
  - set -x
  - psql -U postgres -f ./db/create-data-repo-db
  - GCR_TAG=$(git rev-parse --short HEAD) ./gradlew jib
  - kubectl --namespace data-repo --record deployments/api-deployment set image
    deployments/api-deployment
    "data-repo-api-container=gcr.io/${DEV_PROJECT}/jade-data-repo:$(git rev-parse --short HEAD)"
  - ./gradlew assemble
  - ./gradlew check --scan
  - ./gradlew testConnected --scan
  - ./gradlew testIntegration --scan

deploy:
  provider: script
  script:
    - gcloud config set project $DEV_PROJECT
    - gcloud config set compute/zone $DEV_ZONE
    - gcloud container clusters get-credentials $CLUSTER_NAME
    - kubectl --record deployment.apps/data-repo-deployment set image
      deployment.v1.apps/data-repo-deployment
      "data-repo-api-container=gcr.io/${DEV_PROJECT}/jade-data-repo:$(git rev-parse --short HEAD)"
  on:
    branch: develop
